@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-1999, 2001-2019 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Files
@chapter Файлы

  В этой главе описываются функции и переменные Emacs Lisp для поиска,
создания, просмотра, сохранения и другой работы с файлами и каталогами.
Некоторые другие функции, связанные с файлами, описаны в @ref{Buffers}, а
функции, связанные с резервным копированием и автосохранением, описаны в
@ref{Backups and Auto-Saving}.

  Многие функции обработки файлов принимают один или несколько аргументов,
которые являются именами файлов.  Имя файла - это строка.  Большинство этих
функций расширяют аргументы имени файла с помощью функции
@code{expand-file-name}, так что @file{~} обрабатывается правильно, как и
относительные имена файлов (включая @file{../} и пустую строку).
@xref{File Name Expansion}.

  Кроме того, некоторые @dfn{магические} имена файлов  обрабатываются особым
образом.  Например, когда указано имя удаленного файла, Emacs обращается к
файлу по сети через соответствующий протокол.
@xref{Remote Files,, Remote Files, emacs, The GNU Emacs Manual}.  Эта
обработка выполняется на очень низком уровне, поэтому можно предположить,
что все функции, описанные в этой главе, принимают магические имена файлов в
качестве аргументов имени файла, за исключением случаев, когда это указано.
@xref{Magic File Names}, для подробностей.

  Когда функции файлового ввода-вывода сигнализируют об ошибках Lisp, они
обычно используют условие @code{file-error} (@pxref{Handling Errors}).
Сообщение об ошибке в большинстве случаев получается из операционной системы
в соответствии с локалью @code{system-messages-locale} и декодируется с
использованием системы кодирования @code{locale-coding-system}
(@pxref{Locales}).

@menu
* Visiting Files::          Чтение файлов в буферы Emacs для редактирования.
* Saving Buffers::           Запись измененных буферов обратно в файлы.
* Reading from Files::       Чтение файлов в буферы без посещения.
* Writing to Files::         Запись новых файлов из частей буферов.
* File Locks::               Блокировка и разблокировка файлов для
                                предотвращения одновременного редактирования
                                несколькими людьми.
* Information about Files:: Тестирование наличия, доступности, размера
                                файлов.
* Changing Files::  Переименование файлов, изменение разрешений и так далее.
* Files and Storage::        Surviving power and media failures
* File Names::               Разложение и раскрытие имен файлов.
* Contents of Directories::  Получение списка файлов в каталоге.
* Create/Delete Dirs::       Создание и удаление каталогов.
* Magic File Names::         Специальная обработка определенных имен файлов.
* Format Conversion::        Преобразование в различные форматы файлов и
                                обратно.
@end menu

@node Visiting Files
@section Посещение Файлов
@cindex finding files
@cindex visiting files

  Посещение файла означает чтение файла в буфер.  Как только это будет
сделано, понимается, что буфер является @dfn{посещаемый} файл, и
вызываем файл @dfn{посещаем файл} буфером.

  Файл и буфер - это разные вещи.  Файл - это информация, постоянно
записанная на компьютере (если не удалить её).  С другой стороны, буфер -
это информация внутри Emacs, которая исчезнет в конце сеанса редактирования
(или когда уничтожиться буфер).  Когда буфер обращается к файлу, он содержит
информацию, скопированную из файла.  Копия в буфере - это то, что изменяется
с помощью команд редактирования.  Изменения в буфере не изменяют файл; чтобы
сделать изменения постоянными, потребуется @dfn{сохранить} буфер, что
означает копирование измененного содержимого буфера обратно в файл.

  Несмотря на различие между файлами и буферами, люди часто ссылаются на
файл, имея в виду буфер, и наоборот.  В самом деле, мы говорится,
``Редактируется файл'', а не ``Редактируется буфер, который скоро сохранится
как файл с тем же именем''.  Людям обычно не нужно делать это различие
явным.  Однако, имея дело с компьютерной программой, следует помнить об этом
различии.

@menu
* Visiting Functions::         Обычный интерфейс для посещения.
* Subroutines of Visiting::    Подпрограммы нижнего уровня, которые
                                  используются.
@end menu

@node Visiting Functions
@subsection Функции для Посещения Файлов
@cindex visiting files, functions for
@cindex how to visit files

  В этом разделе описаны функции, обычно используемые для посещения файлов.
По историческим причинам эти функции имеют имена, начинающиеся с
@samp{find-}, а не @samp{visit-}.  @xref{Buffer File Name} для функций и
переменных, которые обращаются к имени посещенного файла буфера или находят
существующий буфер по имени посещенного файла.

  В программе на Lisp, если потребуется просматривать содержимое файла, но
не изменять его, самый быстрый способ - использовать
@code{insert-file-contents} во временном буфере.  Посещение файла не
требуется, которое занимает больше времени.  @xref{Reading from Files}.

@deffn Command find-file filename &optional wildcards
Эта команда выбирает буфер, обращающийся к файлу @var{filename}, используя
существующий буфер, если он есть, и в противном случае создает новый буфер
и считывает файл в него.  Также возвращает этот буфер.

За исключением некоторых технических деталей, тело функции @code{find-file}
в основном эквивалентно:

@smallexample
(switch-to-buffer (find-file-noselect filename nil nil wildcards))
@end smallexample

@noindent
(смотреть @code{switch-to-buffer} в @ref{Switching Buffers}.)

Если @var{wildcards} равен не-@code{nil}, что всегда верно в интерактивном
вызове, тогда @code{find-file} расширяет символы подстановки в
@var{filename} и посещает все соответствующие файлы.

Когда @code{find-file} вызывается в интерактивном режиме, запрашивается
@var{filename} в минибуфере.
@end deffn

@deffn Command find-file-literally filename
Эта команда обращается к @var{filename}, как и @code{find-file}, но не
выполняет никаких преобразований формата (@pxref{Format Conversion}),
преобразований символьного кода (@pxref{Coding Systems}) или преобразования
конца строки (@pxref{Coding System Basics, End of line conversion}).  Буфер,
обращающийся к файлу, делается однобайтовым, и его основным режимом является
режим Fundamental, независимо от имени файла.  Спецификации локальных
переменных файла в файле (@pxref{File Local Variables}) игнорируются,
автоматическая распаковка и добавление новой строки в конце файла из-за
@code{require-final-newline} (@pxref{Saving Buffers, require-final-newline})
также отключены.

Обратить внимание, что если в Emacs уже есть буфер, обращающийся к тому же
файлу не буквально, он не будет посещать тот же файл буквально, а вместо
этого просто переключится на существующий буфер.  Если требуется быть
уверены в прямом доступе к содержимому файла, следует создать временный
буфер, а затем прочитать в него содержимое файла с помощью
@code{insert-file-contents-literally} (@pxref{Reading from Files}).
@end deffn

@defun find-file-noselect filename &optional nowarn rawfile wildcards
Эта функция является основой всех функций обращения к файлам.  Возвращает
буфер, обращающийся к файлу @var{filename}.  Можно сделать буфер текущим или
отобразить его в окне, если нужно, но эта функция не делает этого.

Функция возвращает существующий буфер, если он есть; в противном случае
создает новый буфер и считывает в него файл.  Когда
@code{find-file-noselect} использует существующий буфер, сначала проверяет,
не изменился ли файл с момента последнего посещения или сохранения в этом
буфере.  Если файл был изменен, эта функция спрашивает пользователя, следует
ли перечитать измененный файл.  Если пользователь говорит @samp{yes}, все
изменения, ранее сделанные в буфере, теряются.

Чтение файла включает декодирование содержимого файла
(@pxref{Coding Systems}), включая преобразование конца строки и
преобразование формата (@pxref{Format Conversion}).  Если @var{wildcards}
равен не-@code{nil}, то @code{find-file-noselect} расширяет символы
подстановки в @var{filename} и посещает все соответствующие файлы.

Эта функция отображает предупреждающие или рекомендательные сообщения в
различных особых случаях, если только необязательный аргумент @var{nowarn}
не равен не-@code{nil}.  Например, если нужно создать буфер, а файла с
именем @var{filename} нет, отображается сообщение @samp{(New file)} в
эхо-области и оставляет буфер пустым.

Функция @code{find-file-noselect} обычно вызывает @code{after-find-file}
после чтения файла (@pxref{Subroutines of Visiting}).  Эта функция
устанавливает основной режим буфера, анализирует локальные переменные,
предупреждает пользователя, если существует файл автосохранения более
поздний, чем только что посещенный файл, и завершает выполнение функций в
@code{find-file-hook}.

Если необязательный аргумент @var{rawfile} - не-@code{nil}, то
@code{after-find-file} не вызывается, и @code{find-file-not-found-functions}
не запускаются в случае сбоя.  Более того, значение не-@code{nil}
@var{rawfile} подавляет преобразование системы кодирования и преобразование
формата.

Функция @code{find-file-noselect} обычно возвращает буфер, который посещает
файл @var{filename}.  Но если подстановочные знаки действительно
используются и расширяются, он возвращает список буферов, которые обращаются
к различным файлам.

@example
@group
(find-file-noselect "/etc/fstab")
     @result{} #<buffer fstab>
@end group
@end example
@end defun

@deffn Command find-file-other-window filename &optional wildcards
Эта команда выбирает буфер, обращающийся к файлу @var{filename}, но делает
это в окне, отличном от выбранного окна.  Может использовать другое
существующее окно или разделить окно; смотреть @ref{Switching Buffers}.

Когда эта команда вызывается в интерактивном режиме, она запрашивает
@var{filename}.
@end deffn

@deffn Command find-file-read-only filename &optional wildcards
Эта команда выбирает буфер, обращающийся к файлу @var{filename}, как и
@code{find-file}, но помечает буфер как доступный только для чтения.
@xref{Read Only Buffers}, для связанных функций и переменных.

Когда эта команда вызывается в интерактивном режиме, она запрашивает
@var{filename}.
@end deffn

@defopt find-file-wildcards
Если эта переменная - не-@code{nil}, то различные команды @code{find-file}
проверяют наличие подстановочных знаков и посещают все файлы, которые им
соответствуют (при интерактивном вызове или когда их аргумент
@var{wildcards} - не-@code{nil}).  Если эта опция - @code{nil}, то команды
@code{find-file} игнорируют свой аргумент @var{wildcards} и никогда
специально не обрабатывают подстановочные знаки.
@end defopt

@defopt find-file-hook
Значение этой переменной представляет собой список функций, вызываемых после
посещения файла.  Спецификация локальных переменных файла (если таковая
имеется) будет обработана до запуска перехватчиков.  Буфер, обращающийся к
файлу, является текущим, когда выполняются функции ловушки.

Эта переменная - обычная ловушка.  @xref{Hooks}.
@end defopt

@defvar find-file-not-found-functions
Значение этой переменной представляет собой список функций, которые будут
вызываться, когда @code{find-file} или @code{find-file-noselect} передается
несуществующее имя файла.  @code{find-file-noselect} вызывает эти функции,
как только обнаруживает несуществующий файл.  Вызывает их в порядке списка,
пока один из них не вернет не-@code{nil}.  @code{buffer-file-name} уже
настроен.

Это не обычная ловушка, потому что используются значения функций, а во
многих случаях вызываются только некоторые функции.
@end defvar

@defvar find-file-literally
Эта локальная в буфере переменная, если установлена в значение
не-@code{nil}, заставляет @code{save-buffer} вести себя так, как если бы
буфер буквально посещал свой файл, то есть без каких-либо преобразований.
Команда @code{find-file-literally} устанавливает локальное значение этой
переменной, но другие эквивалентные функции и команды также могут это
делать, например, чтобы избежать автоматического добавления новой строки в
конец файла.  Эта переменная является постоянной локальной, поэтому на нее
не влияют изменения основных режимов.
@end defvar

@node Subroutines of Visiting
@subsection Подпрограммы Посещения

  Функция @code{find-file-noselect} использует две важные подпрограммы,
которые иногда полезны в коде пользователя Lisp: @code{create-file-buffer} и
@code{after-find-file}.  В этом разделе объясняется, как их использовать.

@c FIXME Это не описывает поведение по умолчанию, потому что uniquify
@c включен по умолчанию и рекомендует эту функцию.  Это смущает.
@c uniquify должен быть встроен в функцию.
@defun create-file-buffer filename
Эта функция создает буфер с подходящим именем для посещения @var{filename} и
возвращает его.  В качестве имени используется @var{filename} (без указания
каталога), если это имя свободно; в противном случае он добавляется строка,
например @samp{<2>}, чтобы получить неиспользуемое имя.  Смотреть также
@ref{Creating Buffers}.  Обратить внимание, что библиотека @file{uniquify}
влияет на результат этой функции.
@xref{Uniquify,,, emacs, The GNU Emacs Manual}.

@strong{Пожалуйста, обратить внимание:} @code{create-file-buffer} @emph{не}
связывает новый буфер с файлом и не выбирает буфер.  Также не использует
основной режим по умолчанию.

@example
@group
(create-file-buffer "foo")
     @result{} #<buffer foo>
@end group
@group
(create-file-buffer "foo")
     @result{} #<buffer foo<2>>
@end group
@group
(create-file-buffer "foo")
     @result{} #<buffer foo<3>>
@end group
@end example

Эта функция используется @code{find-file-noselect}.  Использует
@code{generate-new-buffer} (@pxref{Creating Buffers}).
@end defun

@defun after-find-file &optional error warn noauto after-find-file-from-revert-buffer nomodes
Эта функция устанавливает основной режим буфера и анализирует локальные
переменные (@pxref{Auto Major Mode}).  Вызывается @code{find-file-noselect}
и функцией возврата по умолчанию (@pxref{Reverting}).

@cindex new file message
@cindex file open error
Если при чтении файла возникла ошибка, потому что файл не существует, но его
каталог существует, вызывающий должен передать значение не-@code{nil} для
@var{error}.  В этом случае @code{after-find-file} выдает предупреждение:
@samp{(New file)}.  В случае более серьезных ошибок вызывающий обычно не
должен вызывать @code{after-find-file}.

Если @var{warn} - не-@code{nil}, то эта функция выдает предупреждение, если
файл автосохранения существует и является более новым, чем посещенный файл.

Если @var{noauto} равен не-@code{nil}, это означает, что не следует включать
и отключать режим автосохранения.  Режим остается включенным, если он был
включен ранее.

Если @var{after-find-file-from-revert-buffer} - не-@code{nil}, это означает,
что этот вызов был от @code{revert-buffer}. Это не имеет прямого эффекта, но
некоторые функции режима и функции перехвата проверяют значение этой
переменной.

Если @var{nomodes} равен не-@code{nil}, это означает, что не изменять
основной режим буфера, не обрабатывать спецификации локальных переменных в
файле и не запускать @code{find-file-hook}.  Эта функция в некоторых случаях
используется @code{revert-buffer}.

Последнее, что делает @code{after-find-file} - вызывает все функции из
списка @code{find-file-hook}.
@end defun

@node Saving Buffers
@section Сохранение Буферов
@cindex saving buffers

  Когда редактируется файл в Emacs, фактически происходит работа с буфером,
который обращается к этому файлу, то есть содержимое файла копируется в
буфер, а копия - это то, что редактируется.  Изменения в буфере не изменяют
файл, пока не @dfn{сохранить} буфер, что означает копирование содержимого
буфера в файл.  Буферы, которые не обращаются к файлу, все еще могут быть
``сохранены'', в некотором смысле, с использованием функций в ловушке
buffer-local @code{write-contents-functions}.

@deffn Command save-buffer &optional backup-option
Эта функция сохраняет содержимое текущего буфера в своем посещенном файле,
если буфер был изменен с момента последнего посещения или сохранения.  В
противном случае ничего не происходит.

@code{save-buffer} отвечает за создание файлов резервных копий.  Обычно
@var{backup-option} - это @code{nil}, а @code{save-buffer} создает резервную
копию только в том случае, если это первое сохранение с момента обращения к
файлу.  Другие значения @var{backup-option} указывают запрашивать создание
файлов резервных копий в других случаях:

@itemize @bullet
@item
С аргументом 4 или 64, отражающим 1 или 3 @kbd{C-u}, функция
@code{save-buffer} отмечает эту версию файла для резервного копирования при
следующем сохранении буфера.

@item
С аргументом 16 или 64, отражающим 2 или 3 @kbd{C-u}, функция
@code{save-buffer} безусловно создает резервную копию предыдущей версии
файла перед ее сохранением.

@item
С аргументом 0 безоговорочно @emph{не} делает резервную копию любого файла.
@end itemize
@end deffn

@deffn Command save-some-buffers &optional save-silently-p pred
@anchor{Definition of save-some-buffers}
Эта команда сохраняет некоторые модифицированные буферы обращения к файлам.
Обычно спрашивается пользователя о каждом буфере.  Но если
@var{save-silently-p} равен не-@code{nil}, сохраняются все буферы обращения
к файлам, не запрашивая пользователя.

@vindex save-some-buffers-default-predicate
Необязательный аргумент @var{pred} предоставляет предикат, который
контролирует, какие буферы запрашивать (или молча сохранять, если
@var{save-silently-p} равен не-@code{nil}).  Если @var{pred} равно
@code{nil}, это означает, что вместо @var{pred} следует использовать
значение @code{save-some-buffers-default-predicate}.  Если результат
@code{nil}, значит спрашивать только о файловых буферах.  Если это @code{t},
это означает также предложение сохранить некоторые другие нефайловые буферы
- те, которые имеют локальное значение не-@code{nil} для буфера
@code{buffer-offer-save} (@pxref{Killing Buffers}).  Пользователя, который
говорит @samp{yes} для сохранения нефайлового буфера, просят указать имя
файла для использования.  Функция @code{save-buffers-kill-emacs} передает
значение @code{t} для @var{pred}.

Если предикат не является ни @code{t}, ни @code{nil}, то должен быть
функцией без аргументов.  Будет вызываться в каждом буфере, чтобы решить,
предлагать ли сохранить этот буфер.  Если возвращается значение
не-@code{nil} в определенном буфере, означает, что предлагается сохранить
этот буфер.
@end deffn

@deffn Command write-file filename &optional confirm
@anchor{Definition of write-file}
Эта функция записывает текущий буфер в файл @var{filename}, заставляет буфер
посещать этот файл и отмечает, что он не изменен.  Затем переименовывает
буфер на основе @var{filename}, добавляя строку типа @samp{<2>}, если
необходимо, чтобы получить уникальное имя буфера.  Большую часть этой работы
выполняет, вызывая @code{set-visited-file-name} (@pxref{Buffer File Name}) и
@code{save-buffer}.

Если @var{confirm} - не-@code{nil}, это означает, что нужно запрашивать
подтверждение перед перезаписью существующего файла.  В интерактивном режиме
требуется подтверждение, если пользователь не предоставляет префиксный
аргумент.

Если @var{filename} - это имя каталога (@pxref{Directory Names}),
@code{write-file} использует имя посещенного файла в каталоге
@var{filename}.  Если буфер не обращается к файлу, вместо этого используется
имя буфера.
@end deffn

  Сохранение буфера запускает несколько ловушек.  Также выполняется
преобразование формата (@pxref{Format Conversion}).  Обратить внимание, что
эти ловушки, описанные ниже, запускаются только @code{save-buffer}, они не
запускаются другими примитивами и функциями, которые записывают текст буфера
в файлы, и, в частности, автосохранение (@pxref{Auto-Saving}) не запускает
эти перехватчики.

@defvar write-file-functions
Значение этой переменной представляет собой список функций, которые должны
быть вызваны перед записью буфера в посещенный файл.  Если одна из них
возвращает не-@code{nil}, файл считается уже записанным, и остальные функции
не вызываются, а также не выполняется обычный код для записи файла.

Если функция в @code{write-file-functions} возвращает не-@code{nil}, она
отвечает за создание файла резервной копии (если это уместно).  Для этого
выполняется следующий код:

@example
(or buffer-backed-up (backup-buffer))
@end example

Можно сохранить значение режима файла, возвращаемое @code{backup-buffer}, и
использовать его (если не-@code{nil}) для установки битов режима файла,
который пишется.  Это то, что обычно делает @code{save-buffer}.
@xref{Making Backups,, Making Backup Files}.

Функции ловушки в @code{write-file-functions} также отвечают за кодирование
данных (при желании): они должны выбрать подходящую систему кодирования и
преобразование конца строки (@pxref{Lisp and Coding Systems}), выполнить
кодирование (@pxref{Explicit Encoding}) и установить
@code{last-coding-system-used} на систему кодирования, которая
использовалась (@pxref{Encoding and I/O}).

Если устанавливается эта ловушка локально в буфере, предполагается, что она
связана с файлом или способом получения содержимого буфера.  Таким образом,
переменная помечается как постоянная локальная, так что изменение основного
режима не меняет локального значения буфера.  С другой стороны, вызов
@code{set-visited-file-name} сбросит его.  Если это не то, что нужно, можно
вместо этого использовать @code{write-contents-functions}.

Несмотря на то, что это не обычная ловушка, можно использовать
@code{add-hook} и @code{remove-hook} для управления списком перехватчиков.
@xref{Hooks}.
@end defvar

@c Emacs 19 feature
@defvar write-contents-functions
Это работает так же, как @code{write-file-functions}, но предназначено для
ловушек, которые относятся к содержимому буфера, а не к конкретному
посещенному файлу или его местоположению, и может использоваться для
создания произвольных процессов сохранения для буферов, которые вообще не
обращаются к файлам.  Такие перехватчики обычно устанавливаются основными
режимами как привязки этой переменной к локальному буферу.  Эта переменная
автоматически становится локальной в буфере всякий раз, когда она
установлена; переключение в новый основной режим всегда сбрасывает эту
переменную, но вызов @code{set-visited-file-name} - нет.

Если какая-либо из функций в этой ловушке возвращает не-@code{nil}, файл
считается уже записанным, а остальные не вызываются, как и функции в
@code{write-file-functions}.

При использовании этой ловушки для сохранения буферов, которые не обращаются
к файлам (например, буферов специального режима), иметь в виду, что если
функция не сможет правильно сохранить и возвращает значение @code{nil},
@code{save-buffer} продолжит запрашивать у пользователя файл для сохранения
буфера.  Если это нежелательно, рассмотреть возможность отказа функции,
вызвав ошибку.
@end defvar

@defopt before-save-hook
Эта обычная ловушка запускается до того, как буфер будет сохранен в
посещенном файле, независимо от того, выполняется ли это обычным образом или
с помощью одной из описанных выше ловушек.  Например, программа
@file{copyright.el} использует эту ловушку, чтобы убедиться, что в
сохраняемом файле указан текущий год в уведомлении об авторских правах.
@end defopt

@c Emacs 19 feature
@defopt after-save-hook
Эта обычная ловушка запускается после того, как буфер был сохранен в
посещенном им файле.  Одно использование этого перехватчика - в режиме
Fast Lock; он использует этот хук для сохранения информации о выделении в
файле кэша.
@end defopt

@defopt file-precious-flag
Если эта переменная - не-@code{nil}, то @code{save-buffer} защищает от
ошибок ввода-вывода при сохранении, записывая новый файл с временным именем
вместо имени, которое он должен иметь, а затем переименовывает его в
предполагаемое имя после того, как станет ясно, что нет ошибки.  Эта
процедура предотвращает возникновение таких проблем, как нехватка места на
диске, в результате чего файл окажется недействительным.

Как побочный эффект, резервные копии обязательно делаются путем копирования.
@xref{Rename or Copy}.  Но в то же время при сохранении ценного файла всегда
прерываются все жесткие связи между сохраняемым файлом и другими именами
файлов.

Некоторые режимы присваивают этой переменной значение не-@code{nil},
локальное в конкретном буфере.
@end defopt

@defopt require-final-newline
Эта переменная определяет, могут ли быть записаны файлы, котрые @emph{не}
заканчиваются новой строкой.  Если значение переменной - @code{t}, то
@code{save-buffer} незаметно добавляет новую строку в конец буфера всякий
раз, когда это не так.  Если значение равно @code{visit}, Emacs добавляет не
достающую новую строку сразу после посещения файла.  Если значение равно
@code{visit-save}, Emacs добавляет недостающую новую строку как при
посещении, так и при сохранении.  Для любого другого значения не-@code{nil}
@code{save-buffer} спрашивает пользователя, добавлять ли новую строку каждый
раз, когда возникает случай.

Если значение переменной - @code{nil}, то @code{save-buffer} вообще не
добавляет новые строки.  @code{nil} - значение по умолчанию, но несколько
основных режимов устанавливают его на @code{t} в определенных буферах.
@end defopt

Смотреть также функцию @code{set-visited-file-name}
(@pxref{Buffer File Name}).

@node Reading from Files
@section Чтение из Файлов
@cindex reading from files

  Чтобы скопировать содержимое файла в буфер, использвать функцию
@code{insert-file-contents}.  (Не использовать команду @code{insert-file} в
программе на Lisp, поскольку она устанавливает метку.)

@defun insert-file-contents filename &optional visit beg end replace
Эта функция вставляет содержимое файла @var{filename} в текущий буфер после
точки.  Возвращает список абсолютного имени файла и длины вставленных
данных.  Выдается сообщение об ошибке, если @var{filename} не является
именем файла, который можно прочитать.

Функция проверяет содержимое файла на соответствие определенным форматам
файлов и при необходимости преобразует содержимое файла, а также вызывает
функции из списка @code{after-insert-file-functions}.
@xref{Format Conversion}.  Обычно одна из функций в списке
@code{after-insert-file-functions} определяет систему кодирования
(@pxref{Coding Systems}), используемую для декодирования содержимого файла,
включая преобразование конца строки.  Однако, если файл содержит нулевые
байты, он по умолчанию посещается без каких-либо преобразований кода.
@xref{Lisp and Coding Systems, inhibit-null-byte-detection}.

Если @var{visit} равен не-@code{nil}, эта функция дополнительно помечает
буфер как немодифицированный и настраивает различные поля в буфере так,
чтобы он обращался к файлу @var{filename}: это включает имя файла,
посещенного буфером, и время его последнего сохранения.  Функция
используется @code{find-file-noselect}, и, вероятно, не стоит использовать
ее самостоятельно.

Если @var{beg} и @var{end} равны не-@code{nil}, они должны быть числами,
которые представляют собой байтовые смещения, определяющие часть файла для
вставки.  В этом случае @var{visit} должен быть @code{nil}.  Для примера,

@example
(insert-file-contents filename nil 0 500)
@end example

@noindent
вставляет первые 500 символов файла.

Если аргумент @var{replace} равен не-@code{nil}, это означает замену
содержимого буфера (фактически, только доступной части) содержимым файла.
Это лучше, чем просто удалить содержимое буфера и вставить весь файл, потому
что (1) он сохраняет некоторые позиции маркеров и (2) помещает меньше данных
в список отмены.

Можно читать специальный файл (например, устройство FIFO или I/O) с помощью
@code{insert-file-contents}, если @var{replace} и @var{visit} имеют значение
@code{nil}.
@end defun

@defun insert-file-contents-literally filename &optional visit beg end replace
Функция работает как @code{insert-file-contents}, за исключением того, что
не запускает @code{after-insert-file-functions} и не выполняет декодирование
формата, преобразование кода символов, автоматическую распаковку и тому
подобное.
@end defun

Если требуется передать имя файла другому процессу, чтобы другая программа
могла его прочитать, используется функция @code{file-local-copy}; смотреть
@ref{Magic File Names}.

@node Writing to Files
@section Запись в Файлы
@cindex writing to files

  Можно записать содержимое буфера или его части непосредственно в файл на
диске с помощью функций @code{append-to-file} и @code{write-region}.  Не
использовать эти функции для записи в файлы, которые посещаются; это может
вызвать путаницу в механизмах посещения.

@deffn Command append-to-file start end filename
Функция добавляет содержимое области, разделенной @var{start} и @var{end} в
текущем буфере, в конец файла @var{filename}.  Если этот файл не существует,
он создается.  Функция возвращает @code{nil}.

Об ошибке сообщается, если @var{filename} указывает файл, который нельзя
записывать, или несуществующий файл в каталоге, где файлы не могут быть
созданы.

При вызове из Lisp эта функция полностью эквивалентна:

@example
(write-region start end filename t)
@end example
@end deffn

@deffn Command write-region start end filename &optional append visit lockname mustbenew
Функция записывает область, ограниченную @var{start} и @var{end} в текущем
буфере, в файл, указанный @var{filename}.

Если @var{start} равен @code{nil}, то команда записывает все содержимое
буфера (@emph{не} только доступную часть) в файл и игнорирует @var{end}.

@c Emacs 19 feature
Если @var{start} является строкой, то @code{write-region} записывает или
добавляет эту строку, а не текст из буфера.  @var{end} в этом случае
игнорируется.

Если @var{append} равен не-@code{nil}, то указанный текст добавляется к
существующему содержимому файла (если есть).  Если @var{append} является
числом, @code{write-region} ищет это байтовое смещение от начала файла и
записывает данные оттуда.

Если @var{mustbenew} равен не-@code{nil}, то @code{write-region} запрашивает
подтверждение, если @var{filename} называет существующий файл.  Если
@var{mustbenew} - это символ @code{excl}, то @code{write-region} не
запрашивает подтверждения, а вместо этого сигнализирует об ошибке
@code{file-already-exists}, если файл уже существует.  Хотя
@code{write-region} обычно следует по символической ссылке и создает
указанный файл, если символическая ссылка битая, он не следует по
символическим ссылкам, если @var{mustbenew} имеет значение @code{excl}.

Тест для существующего файла, когда @var{mustbenew} равен @code{excl},
использует специальную системную функцию.  По крайней мере, для файлов на
локальном диске исключается возможность, что какая-то другая программа
сможет создать файл с тем же именем раньше, чем это сделает Emacs, без
его ведома.

Если @var{visit} равен @code{t}, то Emacs устанавливает связь между буфером
и файлом: тогда буфер обращается к этому файлу.  Также устанавливается время
последней модификации файла для текущего буфера как @var{filename} время
модификации и отмечает буфер как неизмененный.  Функция используется
@code{save-buffer}, но, вероятно, не стоит использовать ее самостоятельно.

@c Emacs 19 feature
Если @var{visit} - строка, она указывает имя файла для посещения.  Таким
образом, можно записывать данные в один файл (@var{filename}) при записи
буфера при посещении другого файла (@var{visit}).  Аргумент @var{visit}
используется в сообщении эхо-области, а также для блокировки файла;
@var{visit} хранится в @code{buffer-file-name}.  Функция используется для
реализации @code{file-precious-flag}; не использовать её самостоятельно,
если действительно не знать, что делать.

Необязательный аргумент @var{lockname}, если не-@code{nil}, указывает имя
файла для использования в целях блокировки и разблокировки, заменяя
@var{filename} и @var{visit} для этой цели.

Функция @code{write-region} преобразует данные, которые записывает, в
соответствующие форматы файлов, указанные в @code{buffer-file-format}, а
также вызывает функции из списка @code{write-region-annotate-functions}.
@xref{Format Conversion}.

Обычно @code{write-region} отображает сообщение @samp{Wrote @var{filename}}
в эхо-области.  Сообщение запрещается, если @var{visit} не является ни
@code{t}, ни @code{nil}, ни строкой, или если Emacs работает в пакетном
режиме (@pxref{Batch Mode}).  Функция полезна для программ, которые
используют файлы для внутренних целей, файлы, о которых пользователю не
нужно знать.
@end deffn

@defvar write-region-inhibit-fsync
Если значение этой переменной - @code{nil}, @code{write-region} использует
системный вызов @code{fsync} после записи файла.  Хотя это замедляет работу
Emacs, это снижает риск потери данных после сбоя питания.  Если значение
равно @code{t}, Emacs не использует @code{fsync}.  Значение по умолчанию -
@code{nil}, когда Emacs интерактивен, и @code{t}, когда Emacs работает в
пакетном режиме.  @xref{Files and Storage}.
@end defvar

@defmac with-temp-file file body@dots{}
@anchor{Definition of with-temp-file}
Макрос @code{with-temp-file} оценивает формы @var{body} с временным буфером
в качестве текущего буфера; затем, в конце, записывает содержимое буфера
в файл @var{file}.  По завершении уничтожает временный буфер, восстанавливая
буфер, который был текущим до формы @code{with-temp-file}.  Затем возвращает
значение последней формы в @var{body}.

Текущий буфер восстанавливается даже в случае аварийного выхода через
@code{throw} или ошибки (@pxref{Nonlocal Exits}).

Смотреть также @code{with-temp-buffer} в
@ref{Definition of with-temp-buffer,, The Current Buffer}.
@end defmac

@node File Locks
@section Файловые Блокировки
@cindex file locks
@cindex lock file
@cindex .#, lock file names

  Когда два пользователя редактируют один и тот же файл одновременно, они
могут мешать друг другу.  Emacs пытается предотвратить возникновение этой
ситуации, записывая @dfn{блокировку файла}, когда файл изменяется.
Затем Emacs может обнаружить первую попытку изменить буфер, обращения к
файлу, который заблокирован другим заданием Emacs, и спросить пользователя,
что ему делать.  Блокировка файла на самом деле представляет собой файл,
символическую ссылку со специальным именем, хранящуюся в том же каталоге,
что и файл, который редактируется.  Имя создается путем добавления @file{.#}
к имени файла буфера.
Цель символической ссылки будет иметь вид
@code{@var{user}@@@var{host}.@var{pid}:@var{boot}}, где @var{user}
заменяется текущим именем пользователя (из @code{user-login-name}),
@var{host} - на имя хоста, на котором работает Emacs (из
@code{system-name}), @var{pid} - на идентификатор процесса Emacs, а
@var{boot} со временем с момента последней перезагрузки.  @code{:@var{boot}}
не указывается, если время загрузки недоступно.  (В файловых системах,
которые не поддерживают символические ссылки, вместо этого используется
обычный файл с содержимым в форме
@code{@var{user}@@@var{host}.@var{pid}:@var{boot}}.)

  Когда получается доступ к файлам с помощью NFS, существует небольшая
вероятность того, что два пользователя заблокируете один и тот же файл
одновременно.  Если это произойдет, пользователи могут внести изменения
одновременно, но Emacs все равно предупредит пользователя, который
окажется вторым.  Также обнаружение модификации буфера при обращении к
файлу, измененному на диске, выявляет некоторые случаи одновременного
редактирования; смотреть @ref{Modification Time}.

@defun file-locked-p filename
Функция возвращает @code{nil}, если файл @var{filename} не заблокирован.
Возвращается @code{t}, если заблокирован этим процессом Emacs, и возвращает
имя пользователя, заблокировавшего его, если файл заблокирован каким-либо
другим заданием.

@example
@group
(file-locked-p "foo")
     @result{} nil
@end group
@end example
@end defun

@defun lock-buffer &optional filename
Функция блокирует файл @var{filename}, если текущий буфер изменен.  По
умолчанию аргумент @var{filename} соответствует посещенному файлу текущего
буфера.  Ничего не происходит, если текущий буфер не обращается к файлу или
не изменяется, или если опция @code{create-lockfiles} имеет значение
@code{nil}.
@end defun

@defun unlock-buffer
Функция разблокирует посещаемый файл в текущем буфере, если буфер изменен.
Если буфер не изменен, файл не должен быть заблокирован, поэтому функция
ничего не делает.  Также ничего не делает, если текущий буфер не обращается
к файлу или не заблокирован.
@end defun

@defopt create-lockfiles
Если эта переменная - @code{nil}, Emacs не блокирует файлы.
@end defopt

@defun ask-user-about-lock file other-user
Функция вызывается, когда пользователь пытается изменить @var{file}, но он
заблокирован другим пользователем с именем @var{other-user}.  Определение
этой функции по умолчанию просит пользователя сказать, что делать.
Значение, которое возвращает эта функция, определяет, что Emacs будет делать
дальше.:

@itemize @bullet
@item
Значение @code{t} говорит о захвате блокировки файла.  Затем этот
пользователь может редактировать файл, и @var{other-user} теряет блокировку.

@item
Значение @code{nil} указывает игнорировать блокировку и в любом случае
позволить этому пользователю редактировать файл.

@item
@kindex file-locked
Вместо этого эта функция может сигнализировать об ошибке @code{file-locked},
и в этом случае изменение, которое пользователь собирался внести, не
происходит.

Сообщение об этой ошибке выглядит так:

@example
@error{} File is locked: @var{file} @var{other-user}
@end example

@noindent
где @code{file} - это имя файла, а @var{other-user} - имя пользователя,
заблокировавшего файл.
@end itemize

При желании можно заменить функцию @code{ask-user-about-lock} своей версией,
которая принимает решение другим способом.
@end defun

@node Information about Files
@section Информация о Файлах
@cindex file, information about

  В этом разделе описаны функции для получения различных типов информации о
файлах (или каталогах, или символических ссылках), например о том, доступен
ли файл для чтения или записи, а также его размер.  Все эти функции
принимают аргументы, которые являются именами файлов.  Если не указано иное,
эти аргументы должны указывать существующие файлы, иначе будет выдана
ошибка.

@cindex file names, trailing whitespace
@cindex trailing blanks in file names
  Быть осторожным с именами файлов, заканчивающимися пробелами.  В некоторых
файловых системах (особенно в MS-Windows) завершающие пробельные символы в
именах файлов автоматически игнорируются.

@menu
* Testing Accessibility::   Читается ли данный файл? Возможность записи?
* Kinds of Files::          Это каталог? Символическая ссылка?
* Truenames::               Удаление символических ссылок из имени файла.
* File Attributes::         Размеры файлов, время модификации и так далее.
* Extended Attributes::    Расширенные атрибуты файлов для контроля доступа.
* Locating Files::          Как найти файл в стандартных местах.
@end menu

@node Testing Accessibility
@subsection Тестирование Доступности
@cindex accessibility of a file
@cindex file accessibility

  Эти функции проверяют разрешение на доступ к файлу для чтения, записи или
выполнения.  Если явно не указано иное, они переходят по символическим
ссылкам.  @xref{Kinds of Files}.

  В некоторых операционных системах можно указать более сложные наборы прав
доступа с помощью таких механизмов, как Access Control Lists (ACLs).
@xref{Extended Attributes}, чтобы узнать, как запрашивать и устанавливать
эти разрешения.

@defun file-exists-p filename
Функция возвращает @code{t}, если файл с именем @var{filename} существует.
Это не означает, что обязательно можно читать файл, только возможно узнать
его атрибуты.  (В GNU и других системах, подобных POSIX, это верно, если
файл существует и есть разрешение на выполнение в содержащих его каталогах,
независимо от разрешений самого файла.)

Если файл не существует или политики контроля доступа не позволяют найти его
атрибуты, эта функция возвращает @code{nil}.

Каталоги - это файлы, поэтому @code{file-exists-p} может возвращать @code{t}
при задании каталога. Однако, поскольку @code{file-exists-p} следует по
символическим ссылкам, он возвращает @code{t} для имени символической
ссылки, только если целевой файл существует.
@end defun

@defun file-readable-p filename
This function returns @code{t} if a file named @var{filename} exists
and you can read it.  It returns @code{nil} otherwise.
@end defun

@defun file-executable-p filename
Функция возвращает @code{t}, если файл с именем @var{filename} существует и
можно его выполнить.  В противном случае возвращается @code{nil}.  В GNU и
других системах, подобных POSIX, если файл является каталогом, разрешение на
выполнение означает, что можно проверять наличие и атрибуты файлов внутри
каталога и открывать эти файлы, если их режимы позволяют.
@end defun

@defun file-writable-p filename
Функция возвращает @code{t}, если файл @var{filename} может быть записан или
создан, и @code{nil} в противном случае.  Файл доступен для записи, если
файл существует и можно его записать.  Его можно создать, если он не
существует, но указанный каталог существует, и можно писать в этом каталоге.

В приведенном ниже примере @file{foo} недоступен для записи, потому что
родительский каталог не существует, даже если пользователь может создать
такой каталог.

@example
@group
(file-writable-p "~/no-such-dir/foo")
     @result{} nil
@end group
@end example
@end defun

@defun file-accessible-directory-p dirname
Функция возвращает @code{t}, если есть разрешение на открытие существующих
файлов каталога, имя в качестве файла которого - @var{dirname}; в противном
случае (или если такой директории нет) возвращается @code{nil}.  Значение
@var{dirname} может быть либо именем каталога (например, @file{/foo/}), либо
именем файла, который является каталогом (например, @file{/foo}, без
последней косой черты).

Например, из следующего делается вывод, что любая попытка прочитать файл в
@file{/foo/} приведет к ошибке:

@example
(file-accessible-directory-p "/foo")
     @result{} nil
@end example
@end defun

@defun access-file filename string
Функция открывает файл @var{filename} для чтения, затем закрывает его и
возвращает @code{nil}.  Однако, если открыть не удается, сигнализирует об
ошибке, используя @var{string} в качестве текста сообщения об ошибке.
@end defun

@defun file-ownership-preserved-p filename &optional group
Функция возвращает @code{t}, если удаление файла @var{filename} и
последующее его создание сохранит владельца файла неизменным.  Также
возвращает @code{t} для несуществующих файлов.

Если необязательный аргумент @var{group} - не-@code{nil}, эта функция также
проверяет, не изменилась ли группа файла.

Эта функция не переходит по символическим ссылкам.
@end defun

@defun file-modes filename
@cindex mode bits
@cindex file permissions
@cindex permissions, file
@cindex file modes
Функция возвращает @dfn{биты модификации} для @var{filename} - целое число,
суммирующее его права на чтение, запись и выполнение.  Функция следует по
символическим ссылкам.  Если файл не существует, возвращается @code{nil}.

@xref{File permissions,,, coreutils, The @sc{gnu} @code{Coreutils} Manual},
для описания битов модификации.  Например, если младший бит равен 1, файл
может быть выполнен всеми пользователями; если второй младший бит равен 1,
файл доступен для записи всем пользователям; и так далее.  Максимально
возможное значение - 4095 (7777 восьмеричное), что означает, что у всех есть
права на чтение, запись и выполнение, бит @acronym{SUID} установлен как для
других, так и для группы, а также установлен бит закрепления.

@xref{Changing Files} для функции @code{set-file-modes}, которую можно
использовать для установки этих разрешений.

@example
@group
(file-modes "~/junk/diffs")
     @result{} 492               ; @r{Десятичное целое число.}
@end group
@group
(format "%o" 492)
     @result{} "754"             ; @r{Преобразовать в восьмеричное.}
@end group

@group
(set-file-modes "~/junk/diffs" #o666)
     @result{} nil
@end group

@group
$ ls -l diffs
-rw-rw-rw- 1 lewis lewis 3063 Oct 30 16:00 diffs
@end group
@end example

@cindex MS-DOS and file modes
@cindex file modes and MS-DOS
@strong{MS-DOS предупреждение:} В MS-DOS нет такого понятия, как бит режима
исполняемого файла.  Таким образом, @code{file-modes} считает файл
исполняемым, если его имя заканчивается одним из стандартных исполняемых
расширений, например @file{.com}, @file{.bat}, @file{.exe} и некоторыми
другими.  Файлы, начинающиеся со стандартной сигнатуры @samp{#!} стандарта
POSIX, такие как сценарии оболочки и Perl, также считаются исполняемыми.
Каталоги также сообщаются как исполняемые для совместимости с POSIX@.  За
этими соглашениями также следует @code{file-attributes}
(@pxref{File Attributes}).
@end defun

@node Kinds of Files
@subsection Различия Типов Файлов
@cindex file classification
@cindex classification of file types
@cindex symbolic links

  В этом разделе описывается, как различать различные типы файлов, такие как
каталоги, символические ссылки и обычные файлы.

  Символические ссылки обычно используются везде, где они появляются.
Например, для интерпретации имени файла @file{a/b/c} любая из @file{a},
@file{a/b}, и @file{a/b/c} может быть символической ссылкой, по которой
переходят, возможно, рекурсивно, если цели ссылки сами являются
символическими ссылками.  Однако некоторые функции не следуют символическим
ссылкам в конце имени файла (в этом примере @file{a/b/c}).  Такая функция
называется @dfn{не переходящая по символическим ссылкам}.

@defun file-symlink-p filename
@cindex symbolic links
Если файл @var{filename} является символической ссылкой, эта функция не
следует по ней и вместо этого возвращает цель ссылки в виде строки.
(Целевая строка ссылки не обязательно является полным абсолютным именем
целевого файла; определение полного имени файла, на которое указывает
ссылка, нетривиально, смотреть ниже.)

Если файл @var{filename} не является символической ссылкой или не
существует, @code{file-symlink-p} возвращает @code{nil}.

Вот несколько примеров использования этой функции:

@example
@group
(file-symlink-p "not-a-symlink")
     @result{} nil
@end group
@group
(file-symlink-p "sym-link")
     @result{} "not-a-symlink"
@end group
@group
(file-symlink-p "sym-link2")
     @result{} "sym-link"
@end group
@group
(file-symlink-p "/bin")
     @result{} "/pub/bin"
@end group
@end example

Обратить внимание, что в третьем примере функция вернула @file{sym-link}, но
не приступила к его разрешению, хотя этот файл сам по себе является
символической ссылкой.  Это потому, что эта функция не переходит по
символическим ссылкам - процесс перехода по символическим ссылкам не
применяется к последнему компоненту имени файла.

Строка, которую возвращает эта функция, записана в символической ссылке;
может включать или не включать какие-либо ведущие каталоги.  Функция
@emph{не} расширяет цель ссылки для получения полного имени файла и, в
частности, не использует ведущие каталоги аргумента @var{filename}, если
таковые имеются, если цель ссылки не является абсолютным именем файла.  Вот
пример:

@example
@group
(file-symlink-p "/foo/bar/baz")
     @result{} "some-file"
@end group
@end example

@noindent
Здесь, хотя @file{/foo/bar/baz} был задан как полное имя файла, результата
нет, и на самом деле у него вообще нет ведущих каталогов.  А поскольку
@file{some-file} сам по себе может быть символической ссылкой, не можно
просто добавить к нему ведущие каталоги или даже наивно использовать
@code{expand-file-name} (@pxref{File Name Expansion}) для получения его
абсолютного имени файла.

По этой причине эта функция редко бывает полезной, если нужно определить
нечто большее, чем просто тот факт, что файл является или не является
символической ссылкой.  Если действительно нужно имя файла цели ссылки,
используйте @code{file-chase-links} или @code{file-truename}, как описано в
@ref{Truenames}.
@end defun

@defun file-directory-p filename
Функция возвращает @code{t}, если @var{filename} - имя существующего
каталога, в противном случае - @code{nil}.  Функция следует по символическим
ссылкам.

@example
@group
(file-directory-p "~rms")
     @result{} t
@end group
@group
(file-directory-p "~rms/lewis/files.texi")
     @result{} nil
@end group
@group
(file-directory-p "~rms/lewis/no-such-file")
     @result{} nil
@end group
@group
(file-directory-p "$HOME")
     @result{} nil
@end group
@group
(file-directory-p
 (substitute-in-file-name "$HOME"))
     @result{} t
@end group
@end example
@end defun

@defun file-regular-p filename
Функция возвращает @code{t}, если файл @var{filename} существует и является
обычным файлом (не каталогом, именованным каналом, терминалом или другим
устройством I/O).  Функция следует по символическим ссылкам.
@end defun

@node Truenames
@subsection Truenames
@cindex truename (of file)

  @dfn{truename} файла - это имя, которое получаеся, при переходе по
символическим ссылкам на всех уровнях, пока не останется ни одной, а затем
упростив @samp{.}@: и @samp{..}@:, появляющиеся как компоненты имени.  Это
дает своего рода каноническое имя файла.  Файл не всегда имеет уникальное
истинное имя; количество различных истинных имен, которые имеет файл, равно
количеству жестких ссылок на файл.  Однако истинные имена полезны, потому
что они устраняют символические ссылки как причину вариации имени.

@defun file-truename filename
Функция возвращает истинное имя файла @var{filename}.  Если аргумент не
является абсолютным именем файла, эта функция сначала расширяет его до
@code{default-directory}.

Функция не расширяет переменные среды.  Только
@code{substitute-in-file-name} делает это.
@xref{Definition of substitute-in-file-name}.

Если может потребоваться перейти по символическим ссылкам, предшествующим
@samp{..}@:, появляющимся как компонент имени, вызывается
@code{file-truename} без предшествующих прямых или косвенных вызовов
@code{expand-file-name}.  В противном случае компонент имени файла,
непосредственно предшествующий @samp{..}, будет сброшен перед вызовом
@code{file-truename}.  Чтобы исключить необходимость вызова
@code{expand-file-name}, @code{file-truename} обрабатывает @samp{~} так же,
как @code{expand-file-name}.

Если цель символических ссылок имеет синтаксис удаленного имени файла,
@code{file-truename} возвращает его в кавычках.
@xref{File Name Expansion,,Функции, расширяющие имена файлов}.
@end defun

@defun file-chase-links filename &optional limit
Функция следует по символическим ссылкам, начиная с @var{filename}, пока не
найдет имя файла, которое не является именем символической ссылки.  Затем
возвращается это имя файла.  Функция @emph{не} переходит по символическим
ссылкам на уровне родительских каталогов.

Если указать число для @var{limit}, то после прохождения такого количества
ссылок функция просто вернет то, что у нее есть, даже если это все еще
символическая ссылка.
@end defun

  Чтобы проиллюстрировать разницу между @code{file-chase-links} и
@code{file-truename}, предпологается, что @file{/usr/foo} - это
символическая ссылка на каталог @file{/home/foo}, а @file{/home/foo/hello} -
обычный файл (или, по крайней мере, не символическая ссылка) или
несуществующий.  Тогда у нас было бы:

@example
(file-chase-links "/usr/foo/hello")
     ;; @r{Это не соответствует ссылкам в родительских каталогах.}
     @result{} "/usr/foo/hello"
(file-truename "/usr/foo/hello")
     ;; @r{Предполагая, что @file{/home} не является символической ссылкой.}
     @result{} "/home/foo/hello"
@end example

@defun file-equal-p file1 file2
Функция возвращает @code{t}, если файлы @var{file1} и @var{file2} называют
один и тот же файл.   Это похоже на сравнение их истинных имен, за
исключением того, что имена удаленных файлов также обрабатываются
соответствующим образом.  Если @var{file1} или @var{file2} не существует,
возвращаемое значение не определено.
@end defun

@defun file-name-case-insensitive-p filename
Иногда имена файлов или их части необходимо сравнивать как строки, и в этом
случае важно знать, нечувствительна ли файловая система к регистру.  Функция
возвращает @code{t}, если файл @var{filename} находится в файловой системе
без учета регистра.  Всегда возвращается @code{t} для MS-DOS и MS-Windows.
На Cygwin и macOS файловые системы могут или не могут быть нечувствительными
к регистру, и функция пытается определить чувствительность к регистру с
помощью теста времени выполнения.  Если проверка не дает результатов,
функция возвращает @code{t} для Cygwin и @code{nil} для macOS.

В настоящее время эта функция всегда возвращает @code{nil} на платформах,
отличных от MS-DOS, MS-Windows, Cygwin и macOS.  Не обнаруживает
нечувствительность к регистру смонтированных файловых систем, таких как
общие ресурсы Samba или тома Windows, смонтированные на NFS.  На удаленных
хостах для метода @samp{smb} используется @code{t}.  Для всех остальных
методов подключения выполняются тесты во время выполнения.
@end defun

@defun file-in-directory-p file dir
Функция возвращает @code{t}, если @var{file} - это файл в каталоге @var{dir}
или в подкаталоге @var{dir}.  Также возвращает @code{t}, если @var{file} и
@var{dir} находятся в одном каталоге.  Сравнивает истинные имена двух
каталогов.  Если @var{dir} не называет существующий каталог, возвращается
значение @code{nil}.
@end defun

@defun vc-responsible-backend file
Функция определяет ответственный бэкэнд VC данного @var{file}.  Например,
если @file{emacs.c} - это файл, отслеживаемый Git,
@w{@code{(vc-responsible-backend "emacs.c")}} возвращает @samp{Git}.
Обратить внимание, что если @var{file} является символической ссылкой,
@code{vc-responsible-backend} не разрешит ее - сообщается серверная часть
самого файла символической ссылки.  Чтобы получить бэкэнд VC файла, на
который ссылается @var{file}, обёртывается @var{file} функцией разрешения
символьных ссылок, например @code{file-chase-links}:

@smallexample
(vc-responsible-backend (file-chase-links "emacs.c"))
@end smallexample
@end defun

@node File Attributes
@subsection Атрибуты Файла
@cindex file attributes

  В этом разделе описаны функции для получения подробной информации о файле,
включая номера владельца и группы, количество имен, номер inode, размер и
время доступа и модификации.

@defun file-newer-than-file-p filename1 filename2
@cindex file age
@cindex file modification time
Функция возвращает @code{t}, если файл @var{filename1} новее, чем файл
@var{filename2}.  Если @var{filename1} не существует, возвращает @code{nil}.
Если @var{filename1} существует, а @var{filename2} нет, возвращается
@code{t}.

В следующем примере предположим, что файл @file{aug-19} был записан 19-го,
@file{aug-20} записан 20-го, а файл @file{no-file} вообще не существует.

@example
@group
(file-newer-than-file-p "aug-19" "aug-20")
     @result{} nil
@end group
@group
(file-newer-than-file-p "aug-20" "aug-19")
     @result{} t
@end group
@group
(file-newer-than-file-p "aug-19" "no-file")
     @result{} t
@end group
@group
(file-newer-than-file-p "no-file" "aug-19")
     @result{} nil
@end group
@end example
@end defun

@defun file-attributes filename &optional id-format
@anchor{Definition of file-attributes}
Функция возвращает список атрибутов файла @var{filename}.  Если к указанным
атрибутам файла невозможно получить доступ, возвращается @code{nil}.  Эта
функция не переходит по символическим ссылкам.  Необязательный параметр
@var{id-format} указывает предпочтительный формат атрибутов @acronym{UID} и
@acronym{GID} (смотреть ниже) --- допустимые значения - @code{'string} и
@code{'integer}.  Последний вариант используется по умолчанию, но
планируется его изменить, поэтому потребуется указать значение не-@code{nil}
для @var{id-format}, если используется возвращаемый @acronym{UID} или
@acronym{GID}.

На платформах GNU при работе с локальным файлом эта функция является
атомарной: если файловая система одновременно изменяется каким-либо другим
процессом, эта функция возвращает атрибуты файла до или после изменения.  В
противном случае эта функция не является атомарной и может возвращать
@code{nil}, если обнаруживает состояние гонки, или может возвращать мешанину
из предыдущих и текущих атрибутов файла.

Функции доступа предоставляются для доступа к элементам в этом списке.
Аксессоры упомянуты вместе с описанием элементов ниже.

Элементы списка по порядку::

@enumerate 0
@item
@code{t} для каталога, строка для символической ссылки (имя, на которое
ссылается) или @code{nil} для текстового файла (@code{file-attribute-type}).

@c Многословный, чтобы предотвратить переполнение бокса.  --rjc 15mar92
@item
Количество имен файла (@code{file-attribute-link-number}).  Альтернативные
имена, также известные как жесткие ссылки, можно создать с помощью функции
@code{add-name-to-file} (@pxref{Changing Files}).

@item
@acronym{UID} файла, обычно в виде строки (@code{file-attribute-user-id}).
Однако, если не соответствует указанному пользователю, значением является
число.

@item
файл @acronym{GID}, аналогично (@code{file-attribute-group-id}).

@item
время последнего доступа в виде списка из четырех целых чисел
@code{(@var{sec-high} @var{sec-low} @var{microsec} @var{picosec})}
(@code{file-attribute-access-time}).  (Это похоже на значение
@code{current-time}; смотреть @ref{Time of Day}.)  Значение усекается до
разрешения временной метки файловой системы; например, в некоторых файловых
системах на основе FAT записывается только дата последнего доступа, поэтому
на этот раз всегда будет находиться полночь дня последнего доступа.

@cindex modification time of file
@item
Время последней модификации в виде списка из четырех целых чисел (как
указано выше) (@code{file-attribute-modification-time}).  Это последний раз,
когда содержимое файла изменялось.

@item
Время последнего изменения статуса в виде списка из четырех целых чисел (как
указано выше) (@code{file-attribute-status-change-time}).  Это время
последнего изменения битов режима доступа к файлу, его владельца и группы,
а также другой информации, записанной в файловой системе для файла, помимо
содержимого файла.

@item
Размер файла в байтах (@code{file-attribute-size}).  Это число с плавающей
точкой, если размер слишком велик для целого числа Lisp.

@item
Режимы файла в виде строки из десяти букв или тире, как в @samp{ls -l}
(@code{file-attribute-modes}).

@item
An unspecified value, present for backward compatibility.

@item
Номер inode файла (@code{file-attribute-inode-number}).  Если возможно, это
целое число.  Если номер inode слишком велик для представления в виде целого
числа в Emacs Lisp, но деление его на @math{2^{16}} дает представимое целое
число, тогда значение имеет форму @code{(@var{high} . @var{low})}, где
@var{low} содержит младшие 16 бит.  Если номер inode слишком велик даже для
этого, значение имеет вид @code{(@var{high} @var{middle} . @var{low})}, где
@code{high} содержит старшие биты, @var{middle} - средние 24 бита, а
@var{low} - младшие 16 бит.

@item
Номер файловой системы устройства, на котором находится файл
@code{file-attribute-device-number}).  В зависимости от величины значения
это может быть целое число или cons-ячейка, так же, как и номер inode.  Этот
элемент и номер inode файла вместе дают достаточно информации, чтобы
различать любые два файла в системе - никакие два файла не могут иметь
одинаковые значения для обоих этих номеров.
@end enumerate

Например, вот атрибуты файла для @file{files.texi}:

@example
@group
(file-attributes "files.texi" 'string)
     @result{}  (nil 1 "lh" "users"
          (20614 64019 50040 152000)
          (20000 23 0 0)
          (20614 64555 902289 872000)
          122295 "-rw-rw-rw-"
          t (5888 2 . 43978)
          (15479 . 46724))
@end group
@end example

@noindent
и вот как интерпретируется результат:

@table @code
@item nil
не является ни каталогом, ни символической ссылкой.

@item 1
имеет только одно имя (имя @file{files.texi} в текущем каталоге по
умолчанию).

@item "lh"
принадлежит пользователю с именем @samp{lh}.

@item "users"
находится в группе с именем @samp{users}.

@item (20614 64019 50040 152000)
последний раз просматривался 23 октября 2012 г. в 20:12: 03.050040152 UTC.

@item (20000 23 0 0)
последний раз был изменен 15 июля 2001 г. в 08:53:43 UTC.

@item (20614 64555 902289 872000)
Последнее изменение статуса произошло 23 октября 2012 г., в
20:20: 59.902289872 UTC.

@item 122295
имеет длину 122295 байт.  (Однако может не содержать 122295 символов, если
некоторые байты принадлежат многобайтовым последовательностям, а также если
формат конца строки - CR-LF.)

@item "-rw-rw-rw-"
имеет режим доступа для чтения и записи для владельца, группы и остальных.

@item t
просто заполнитель; он не несет информации.

@item (5888 2 . 43978)
имеет номер inode 6473924464520138.

@item (15479 . 46724)
находится на устройстве файловой системы с номером 1014478468.
@end table
@end defun

@defun file-nlinks filename
Функция возвращает количество имен (то есть жестких ссылок) файла
@var{filename}.  Если файл не существует, эта функция возвращает @code{nil}.
Обратить внимание, что символические ссылки не влияют на эту функцию, потому
что они не считаются именами файлов, на которые они ссылаются.  Функция не
переходит по символическим ссылкам.

@example
@group
$ ls -l foo*
-rw-rw-rw- 2 rms rms 4 Aug 19 01:27 foo
-rw-rw-rw- 2 rms rms 4 Aug 19 01:27 foo1
@end group

@group
(file-nlinks "foo")
     @result{} 2
@end group
@group
(file-nlinks "doesnt-exist")
     @result{} nil
@end group
@end example
@end defun

@node Extended Attributes
@subsection Расширенные Aтрибуты Файлов
@cindex extended file attributes

В некоторых операционных системах каждый файл может быть связан с
произвольными @dfn{расширенными атрибутами файла}.  В настоящее время Emacs
поддерживает запросы и установку двух конкретных наборов расширенных
атрибутов файлов: контекстов Access Control Lists (ACLs) и SELinux.  Эти
расширенные атрибуты файлов используются в некоторых системах для введения
более сложных элементов управления доступа к файлам, чем базовые разрешения
в стиле Unix, которые обсуждались в предыдущих разделах.

@cindex access control list
@cindex ACL entries
@cindex SELinux context
  Подробное объяснение ACL и SELinux выходит за рамки этого руководства.
Для требуемых здеся целей каждый файл может быть связан с @dfn{ACL}, который
определяет его свойства в системе управления файлами на основе ACL, и/или
@dfn{SELinux контекст}, который определяет его свойства в системе SELinux.

@defun file-acl filename
Функция возвращает ACL для файла @var{filename}.  Точное представление ACL в
Lisp не определено (и может измениться в будущих версиях Emacs), но это то
же самое, что принимает @code{set-file-acl} в качестве аргумента @var{acl}
(@pxref{Changing Files}).

Базовая реализация ACL зависит от платформы; в GNU/Linux и BSD Emacs
использует интерфейс POSIX ACL, а в MS-Windows Emacs эмулирует интерфейс
POSIX ACL с собственными API-интерфейсами безопасности файлов.

Если Emacs не был скомпилирован с поддержкой ACL, или файл не существует или
недоступен, или Emacs не смог определить записи ACL по какой-либо другой
причине, то возвращается значение @code{nil}.
@end defun

@defun file-selinux-context filename
Функция возвращает контекст SELinux файла @var{filename} в виде списка вида
@code{(@var{user} @var{role} @var{type} @var{range})}.  Элементы списка -
это пользователь контекста, роль, тип и диапазон соответственно в виде строк
Lisp; смотреть документацию SELinux, чтобы узнать, что они на самом деле
означают.  Возвращаемое значение имеет ту же форму, что и
@code{set-file-selinux-context} в качестве аргумента @var{context}
(@pxref{Changing Files}).

Если Emacs не был скомпилирован с поддержкой SELinux, или файл не существует
или недоступен, или если система не поддерживает SELinux, то возвращаемое
значение - @code{(nil nil nil nil)}.
@end defun

@defun file-extended-attributes filename
Функция возвращает список расширенных атрибутов файла @var{filename},
распознаваемых Emacs.  В настоящее время служит удобным способом получения
контекста ACL и SELinux; затем возможно вызвать функцию
@code{set-file-extended-attributes} с возвращенным списком в качестве
второго аргумента, чтобы применить те же атрибуты доступа к файлу к другому
файлу (@pxref{Changing Files}).

Один из элементов - @code{(acl . @var{acl})}, где @var{acl} имеет ту же
форму, что и @code{file-acl}.

Другой элемент - @code{(selinux-context . @var{context})}, где @var{context}
- это контекст SELinux в той же форме, что и @code{file-selinux-context}.
@end defun

@node Locating Files
@subsection Размещение Файлов в Стандартных Местах
@cindex locate file in path
@cindex find file in path

  В этом разделе объясняется, как искать файл в списке каталогов
(@dfn{пути}) или исполняемый файл в стандартном списке каталогов
исполняемых файлов.

  Для поиска пользовательского файла конфигурации @xref{Standard File Names}
для функции @code{locate-user-emacs-file}.

@defun locate-file filename path &optional suffixes predicate
Функция ищет файл с именем @var{filename} в списке каталогов, заданном
@var{path}, пробуя суффиксы в @var{suffixes}.  Если находит такой файл,
возвращается абсолютное имя файла (@pxref{Relative File Names}); в противном
случае возвращается @code{nil}.

Необязательный аргумент @var{suffixes} дает список суффиксов имени файла,
добавляемых к @var{filename} при поиске.  @code{locate-file} пробует каждый
возможный каталог с каждым из этих суффиксов.  Если @var{suffixes} - это
@code{nil} или @code{("")}, суффиксы отсутствуют, и @var{filename}
используется как есть.  Типичные значения @var{suffixes} -
@code{exec-suffixes} (@pxref{Subprocess Creation}), @code{load-suffixes},
@code{load-file-rep-suffixes} и возвращаемое значение функции
@code{get-load-suffixes} (@pxref{Load Suffixes}).

Типичные значения @var{path}: @code{exec-path} (@pxref{Subprocess Creation})
при поиске исполняемых программ или @code{load-path}
(@pxref{Library Search}) при поиске файлов Lisp.  Если @var{filename}
является абсолютным, @var{path} не действует, но суффиксы в @var{suffixes}
все равно пробуются.

Необязательный аргумент @var{predicate}, если не-@code{nil}, указывает
функцию предиката для проверки, подходит ли файл-кандидат.  Предикату
передается имя файла-кандидата в качестве единственного аргумента.  Если
@var{predicate} равен @code{nil} или опущен, @code{locate-file} использует
@code{file-readable-p} в качестве предиката.  @xref{Kinds of Files} для
других полезных предикатов, например, @code{file-executable-p} и
@code{file-directory-p}.

Функция обычно пропускает каталоги, поэтому, если требуется, чтобы находила
каталоги, убедится, что функция @var{predicate} возвращает для них
@code{dir-ok}.  Например:

@example
(locate-file "html" '("/var/www" "/srv") nil
             (lambda (f) (if (file-directory-p f) 'dir-ok)))
@end example


Для совместимости @var{predicate} также может быть одним из символов
@code{executable}, @code{readable}, @code{writable}, @code{exists} или
списком из одного или нескольких из этих символов.
@end defun

@defun executable-find program
Функция ищет исполняемый файл с именем @var{program} и возвращает абсолютное
имя исполняемого файла, включая его расширения имени файла, если они есть.
Если файл не найден, возвращается @code{nil}.  Функции ищут во всех
каталогах в @code{exec-path} и пробуют все расширения имен файлов в
@code{exec-suffixes} (@pxref{Subprocess Creation}).
@end defun

@node Changing Files
@section Изменение Имен Файлов и Атрибутов
@c @cindex renaming files  Duplicates rename-file
@cindex copying files
@cindex deleting files
@cindex linking files
@cindex setting modes of files

  Функции в этом разделе переименовывают, копируют, удаляют, связывают и
устанавливают режимы (разрешения) файлов.  Как правило, сигнализируют об
ошибке @code{file-error}, если не выполняют свою функцию, сообщая
системно-зависимое сообщение об ошибке, которое описывает причину сбоя.
Если они терпят неудачу из-за отсутствия файла, они сигнализируют об ошибке
@code{file-missing}.

  Для повышения производительности операционная система может кэшировать или
изменять псевдонимы, сделанные этими функциями, вместо того, чтобы сразу
записывать их во вторичное хранилище.  @xref{Files and Storage}.

  В функциях, имеющих аргумент @var{newname}, если этот аргумент является
именем каталога, он обрабатывается так, как если бы была добавлена не
относящаяся к каталогу часть имени источника.  Обычно имя каталога
заканчивается на @samp{/} (@pxref{Directory Names}).  Например, если старое
имя - @file{a/b/c}, @var{newname} @file{d/e/f/} обрабатывается так, как если
бы оно было @file{d/e/f/c}.  Эта особая обработка не применяется, если
@var{newname} - это не имя каталога, а имя файла, который является
каталогом; например, @var{newname} @file{d/e/f} остается как есть, даже если
@file{d/e/f} является каталогом.

  В функциях, имеющих аргумент @var{newname}, если файл с именем
@var{newname} уже существует, предпринимаемые действия зависят от значения
аргумента @var{ok-if-already-exists}:

@itemize @bullet
@item
Сообщать об ошибке @code{file-already-exists}, если
@var{ok-if-already-exists} равен @code{nil}.

@item
Запросить подтверждение, если @var{ok-if-already-exists} - это число.

@item
Заменить старый файл без подтверждения, если @var{ok-if-already-exists}
имеет любое другое значение.
@end itemize

@deffn Command add-name-to-file oldname newname &optional ok-if-already-exists
@cindex file with multiple names
@cindex file hard link
Функция дает файлу с именем @var{oldname} дополнительное имя @var{newname}.
Это означает, что @var{newname} становится новой жесткой ссылкой на
@var{oldname}.

Если @var{newname} является символической ссылкой, заменяется ее запись в
каталоге, а не запись в каталоге, на которую она указывает.  Если
@var{oldname} является символической ссылкой, эта функция может переходить
или не переходить по ссылке; не переходит по ссылке на платформах GNU.  Если
@var{oldname} - это каталог, эта функция обычно терпит неудачу, хотя для
суперпользователя на нескольких устаревших платформах, отличных от GNU,
может успешно работать и создать файловую систему, не имеющую древовидной
структуры.

В первой части следующего примера перечислено два файла, @file{foo} и
@file{foo3}.

@example
@group
$ ls -li fo*
81908 -rw-rw-rw- 1 rms rms 29 Aug 18 20:32 foo
84302 -rw-rw-rw- 1 rms rms 24 Aug 18 20:31 foo3
@end group
@end example

Теперь создается жесткая ссылка, вызовом @code{add-name-to-file}, затем
снова выводится список файлов.  Это показывает два имени для одного файла,
@file{foo} и @file{foo2}.

@example
@group
(add-name-to-file "foo" "foo2")
     @result{} nil
@end group

@group
$ ls -li fo*
81908 -rw-rw-rw- 2 rms rms 29 Aug 18 20:32 foo
81908 -rw-rw-rw- 2 rms rms 29 Aug 18 20:32 foo2
84302 -rw-rw-rw- 1 rms rms 24 Aug 18 20:31 foo3
@end group
@end example

Наконец, оценивается следующие:

@example
(add-name-to-file "foo" "foo3" t)
@end example

@noindent
и снова перечислить файлы.  Теперь у одного файла три имени: @file{foo},
@file{foo2} и @file{foo3}.  Старое содержимое @file{foo3} теряется.

@example
@group
(add-name-to-file "foo1" "foo3")
     @result{} nil
@end group

@group
$ ls -li fo*
81908 -rw-rw-rw- 3 rms rms 29 Aug 18 20:32 foo
81908 -rw-rw-rw- 3 rms rms 29 Aug 18 20:32 foo2
81908 -rw-rw-rw- 3 rms rms 29 Aug 18 20:32 foo3
@end group
@end example

Функция не имеет смысла в операционных системах, где несколько имен для
одного файла не разрешены.  Некоторые системы реализуют несколько имен,
вместо этого копируя файл.

Смотреть также @code{file-nlinks} в @ref{File Attributes}.
@end deffn

@deffn Command rename-file filename newname &optional ok-if-already-exists
Команда переименовывает файл @var{filename} в @var{newname}.

If @var{filename} has additional names aside from @var{filename}, it
continues to have those names.  In fact, adding the name @var{newname}
with @code{add-name-to-file} and then deleting @var{filename} has the
same effect as renaming, aside from momentary intermediate states and
treatment of errors, directories and symbolic links.

This command does not follow symbolic links.  If @var{filename} is a
symbolic link, this command renames the symbolic link, not the file it
points to.  If @var{newname} is a symbolic link, its directory entry
is replaced, not the directory entry it points to.

This command does nothing if @var{filename} and @var{newname} are the
same directory entry, i.e., if they refer to the same parent directory
and give the same name within that directory.  Otherwise, if
@var{filename} and @var{newname} name the same file, this command does
nothing on POSIX-conforming systems, and removes @var{filename} on
some non-POSIX systems.

If @var{newname} exists, then it must be an empty directory if
@var{oldname} is a directory and a non-directory otherwise.
@end deffn

@deffn Command copy-file oldname newname &optional ok-if-already-exists time preserve-uid-gid preserve-extended-attributes
This command copies the file @var{oldname} to @var{newname}.  An
error is signaled if @var{oldname} is not a regular file.  If @var{newname}
names a directory, it copies @var{oldname} into that directory,
preserving its final name component.
@c FIXME: See Bug#27986 for how the previous sentence might change.

This function follows symbolic links, except that it does not follow a
dangling symbolic link to create @var{newname}.

If @var{time} is не-@code{nil}, then this function gives the new file
the same last-modified time that the old one has.  (This works on only
some operating systems.)  If setting the time gets an error,
@code{copy-file} signals a @code{file-date-error} error.  In an
interactive call, a prefix argument specifies a не-@code{nil} value
for @var{time}.

If argument @var{preserve-uid-gid} is @code{nil}, we let the operating
system decide the user and group ownership of the new file (this is
usually set to the user running Emacs).  If @var{preserve-uid-gid} is
не-@code{nil}, we attempt to copy the user and group ownership of the
file.  This works only on some operating systems, and only if you have
the correct permissions to do so.

If the optional argument @var{preserve-permissions} is не-@code{nil},
this function copies the file modes (or ``permissions'') of
@var{oldname} to @var{newname}, as well as the Access Control List and
SELinux context (if any).  @xref{Information about Files}.

Otherwise, the file modes of @var{newname} are left unchanged if it is
an existing file, and set to those of @var{oldname}, masked by the
default file permissions (see @code{set-default-file-modes} below), if
@var{newname} is to be newly created.  The Access Control List or
SELinux context are not copied over in either case.
@end deffn

@deffn Command make-symbolic-link target linkname &optional ok-if-already-exists
@pindex ln
@kindex file-already-exists
This command makes a symbolic link to @var{target}, named
@var{linkname}.  This is like the shell command @samp{ln -s
@var{target} @var{linkname}}.  The @var{target} argument
is treated only as a string; it need not name an existing file.
If @var{ok-if-already-exists} is an integer, indicating interactive
use, then leading @samp{~} is expanded and leading @samp{/:} is
stripped in the @var{target} string.

If @var{target} is a relative file name, the resulting symbolic link
is interpreted relative to the directory containing the symbolic link.
@xref{Relative File Names}.

If both @var{target} and @var{linkname} have remote file name syntax,
and if both remote identifications are equal, the symbolic link points
to the local file name part of @var{target}.

This function is not available on systems that don't support symbolic
links.
@end deffn

@cindex trash
@vindex delete-by-moving-to-trash
@deffn Command delete-file filename &optional trash
@pindex rm
This command deletes the file @var{filename}.  If the file has
multiple names, it continues to exist under the other names.  If
@var{filename} is a symbolic link, @code{delete-file} deletes only the
symbolic link and not its target.

A suitable kind of @code{file-error} error is signaled if the file
does not exist, or is not deletable.  (On GNU and other POSIX-like
systems, a file is deletable if its directory is writable.)

If the optional argument @var{trash} is не-@code{nil} and the
variable @code{delete-by-moving-to-trash} is не-@code{nil}, this
command moves the file into the system Trash instead of deleting it.
@xref{Misc File Ops,,Miscellaneous File Operations, emacs, The GNU
Emacs Manual}.  When called interactively, @var{trash} is @code{t} if
no prefix argument is given, and @code{nil} otherwise.

See also @code{delete-directory} in @ref{Create/Delete Dirs}.
@end deffn

@cindex file permissions, setting
@cindex permissions, file
@cindex file modes, setting
@deffn Command set-file-modes filename mode
This function sets the @dfn{file mode} (or @dfn{permissions}) of
@var{filename} to @var{mode}.  This function follows symbolic links.

If called non-interactively, @var{mode} must be an integer.  Only the
lowest 12 bits of the integer are used; on most systems, only the
lowest 9 bits are meaningful.  You can use the Lisp construct for
octal numbers to enter @var{mode}.  For example,

@example
(set-file-modes #o644)
@end example

@noindent
specifies that the file should be readable and writable for its owner,
readable for group members, and readable for all other users.
@xref{File permissions,,, coreutils, The @sc{gnu} @code{Coreutils}
Manual}, for a description of mode bit specifications.

Interactively, @var{mode} is read from the minibuffer using
@code{read-file-modes} (see below), which lets the user type in either
an integer or a string representing the permissions symbolically.

@xref{File Attributes}, for the function @code{file-modes}, which
returns the permissions of a file.
@end deffn

@defun set-default-file-modes mode
@cindex umask
This function sets the default permissions for new files created by
Emacs and its subprocesses.  Every file created with Emacs initially
has these permissions, or a subset of them (@code{write-region} will
not grant execute permissions even if the default file permissions
allow execution).  On GNU and other POSIX-like systems, the default
permissions are given by the bitwise complement of the @samp{umask}
value, i.e.@: each bit that is set in the argument @var{mode} will be
@emph{reset} in the default permissions with which Emacs creates
files.

The argument @var{mode} should be an integer which specifies the
permissions, similar to @code{set-file-modes} above.  Only the lowest
9 bits are meaningful.

The default file permissions have no effect when you save a modified
version of an existing file; saving a file preserves its existing
permissions.
@end defun

@defmac with-file-modes mode body@dots{}
This macro evaluates the @var{body} forms with the default
permissions for new files temporarily set to @var{modes} (whose value
is as for @code{set-file-modes} above).  When finished, it restores
the original default file permissions, and returns the value of the
last form in @var{body}.

This is useful for creating private files, for example.
@end defmac

@defun default-file-modes
This function returns the default file permissions, as an integer.
@end defun

@defun read-file-modes &optional prompt base-file
This function reads a set of file mode bits from the minibuffer.  The
first optional argument @var{prompt} specifies a non-default prompt.
Second second optional argument @var{base-file} is the name of a file
on whose permissions to base the mode bits that this function returns,
if what the user types specifies mode bits relative to permissions of
an existing file.

If user input represents an octal number, this function returns that
number.  If it is a complete symbolic specification of mode bits, as
in @code{"u=rwx"}, the function converts it to the equivalent numeric
value using @code{file-modes-symbolic-to-number} and returns the
result.  If the specification is relative, as in @code{"o+g"}, then
the permissions on which the specification is based are taken from the
mode bits of @var{base-file}.  If @var{base-file} is omitted or
@code{nil}, the function uses @code{0} as the base mode bits.  The
complete and relative specifications can be combined, as in
@code{"u+r,g+rx,o+r,g-w"}.  @xref{File permissions,,, coreutils, The
@sc{gnu} @code{Coreutils} Manual}, for a description of file mode
specifications.
@end defun

@defun file-modes-symbolic-to-number modes &optional base-modes
This function converts a symbolic file mode specification in
@var{modes} into the equivalent integer.  If the symbolic
specification is based on an existing file, that file's mode bits are
taken from the optional argument @var{base-modes}; if that argument is
omitted or @code{nil}, it defaults to 0, i.e., no access rights at
all.
@end defun

@defun set-file-times filename &optional time
This function sets the access and modification times of @var{filename}
to @var{time}.  The return value is @code{t} if the times are successfully
set, otherwise it is @code{nil}.  @var{time} defaults to the current
time and must be a time value (@pxref{Time of Day}).
@end defun

@defun set-file-extended-attributes filename attribute-alist
This function sets the Emacs-recognized extended file attributes for
@code{filename}.  The second argument @var{attribute-alist} should be
an alist of the same form returned by @code{file-extended-attributes}.
The return value is @code{t} if the attributes are successfully set,
otherwise it is @code{nil}.
@xref{Extended Attributes}.
@end defun

@defun set-file-selinux-context filename context
This function sets the SELinux security context for @var{filename} to
@var{context}.  The @var{context} argument should be a list
@code{(@var{user} @var{role} @var{type} @var{range})}, where each
element is a string.  @xref{Extended Attributes}.

The function returns @code{t} if it succeeds in setting the SELinux
context of @var{filename}.  It returns @code{nil} if the context was
not set (e.g., if SELinux is disabled, or if Emacs was compiled
without SELinux support).
@end defun

@defun set-file-acl filename acl
This function sets the Access Control List for @var{filename} to
@var{acl}.  The @var{acl} argument should have the same form returned
by the function @code{file-acl}.  @xref{Extended Attributes}.

The function returns @code{t} if it successfully sets the ACL of
@var{filename}, @code{nil} otherwise.
@end defun

@node Files and Storage
@section Files and Secondary Storage
@cindex secondary storage

After Emacs changes a file, there are two reasons the changes might
not survive later failures of power or media, both having to do with
efficiency.  First, the operating system might alias written data with
data already stored elsewhere on secondary storage until one file or
the other is later modified; this will lose both files if the only
copy on secondary storage is lost due to media failure.  Second, the
operating system might not write data to secondary storage
immediately, which will lose the data if power is lost.

@findex write-region
Although both sorts of failures can largely be avoided by a suitably
configured file system, such systems are typically more expensive or
less efficient.  In more-typical systems, to survive media failure you
can copy the file to a different device, and to survive a power
failure you can use the @code{write-region} function with the
@code{write-region-inhibit-fsync} variable set to @code{nil}.
@xref{Writing to Files}.

@node File Names
@section File Names
@cindex file names

  Files are generally referred to by their names, in Emacs as elsewhere.
File names in Emacs are represented as strings.  The functions that
operate on a file all expect a file name argument.

  In addition to operating on files themselves, Emacs Lisp programs
often need to operate on file names; i.e., to take them apart and to use
part of a name to construct related file names.  This section describes
how to manipulate file names.

  The functions in this section do not actually access files, so they
can operate on file names that do not refer to an existing file or
directory.

@findex cygwin-convert-file-name-from-windows
@findex cygwin-convert-file-name-to-windows
@cindex MS-Windows file-name syntax
@cindex converting file names from/to MS-Windows syntax
  On MS-DOS and MS-Windows, these functions (like the function that
actually operate on files) accept MS-DOS or MS-Windows file-name syntax,
where backslashes separate the components, as well as POSIX syntax; but
they always return POSIX syntax.  This enables Lisp programs to specify
file names in POSIX syntax and work properly on all systems without
change.@footnote{In MS-Windows versions of Emacs compiled for the Cygwin
environment, you can use the functions
@code{cygwin-convert-file-name-to-windows} and
@code{cygwin-convert-file-name-from-windows} to convert between the
two file-name syntaxes.}

@menu
* File Name Components::  The directory part of a file name, and the rest.
* Relative File Names::   Some file names are relative to a current directory.
* Directory Names::       A directory's name as a directory
                            is different from its name as a file.
* File Name Expansion::   Converting relative file names to absolute ones.
* Unique File Names::     Generating names for temporary files.
* File Name Completion::  Finding the completions for a given file name.
* Standard File Names::   If your package uses a fixed file name,
                            how to handle various operating systems simply.
@end menu

@node File Name Components
@subsection File Name Components
@cindex directory part (of file name)
@cindex nondirectory part (of file name)
@cindex version number (in file name)

  The operating system groups files into directories.  To specify a
file, you must specify the directory and the file's name within that
directory.  Therefore, Emacs considers a file name as having two main
parts: the @dfn{directory name} part, and the @dfn{nondirectory} part
(or @dfn{file name within the directory}).  Either part may be empty.
Concatenating these two parts reproduces the original file name.

  On most systems, the directory part is everything up to and including
the last slash (backslash is also allowed in input on MS-DOS or
MS-Windows); the nondirectory part is the rest.

  For some purposes, the nondirectory part is further subdivided into
the name proper and the @dfn{version number}.  On most systems, only
backup files have version numbers in their names.

@defun file-name-directory filename
This function returns the directory part of @var{filename}, as a
directory name (@pxref{Directory Names}), or @code{nil} if
@var{filename} does not include a directory part.

On GNU and other POSIX-like systems, a string returned by this function always
ends in a slash.  On MS-DOS it can also end in a colon.

@example
@group
(file-name-directory "lewis/foo")  ; @r{GNU example}
     @result{} "lewis/"
@end group
@group
(file-name-directory "foo")        ; @r{GNU example}
     @result{} nil
@end group
@end example
@end defun

@defun file-name-nondirectory filename
This function returns the nondirectory part of @var{filename}.

@example
@group
(file-name-nondirectory "lewis/foo")
     @result{} "foo"
@end group
@group
(file-name-nondirectory "foo")
     @result{} "foo"
@end group
@group
(file-name-nondirectory "lewis/")
     @result{} ""
@end group
@end example
@end defun

@defun file-name-sans-versions filename &optional keep-backup-version
This function returns @var{filename} with any file version numbers,
backup version numbers, or trailing tildes discarded.

If @var{keep-backup-version} is не-@code{nil}, then true file version
numbers understood as such by the file system are discarded from the
return value, but backup version numbers are kept.

@example
@group
(file-name-sans-versions "~rms/foo.~1~")
     @result{} "~rms/foo"
@end group
@group
(file-name-sans-versions "~rms/foo~")
     @result{} "~rms/foo"
@end group
@group
(file-name-sans-versions "~rms/foo")
     @result{} "~rms/foo"
@end group
@end example
@end defun

@defun file-name-extension filename &optional period
This function returns @var{filename}'s final extension, if any,
after applying @code{file-name-sans-versions} to remove any
version/backup part.  The extension, in a file name, is the part that
follows the last @samp{.} in the last name component (minus any
version/backup part).

This function returns @code{nil} for extensionless file names such as
@file{foo}.  It returns @code{""} for null extensions, as in
@file{foo.}.  If the last component of a file name begins with a
@samp{.}, that @samp{.}  doesn't count as the beginning of an
extension.  Thus, @file{.emacs}'s extension is @code{nil}, not
@samp{.emacs}.

If @var{period} is не-@code{nil}, then the returned value includes
the period that delimits the extension, and if @var{filename} has no
extension, the value is @code{""}.
@end defun

@defun file-name-sans-extension filename
This function returns @var{filename} minus its extension, if any.  The
version/backup part, if present, is only removed if the file has an
extension.  For example,

@example
(file-name-sans-extension "foo.lose.c")
     @result{} "foo.lose"
(file-name-sans-extension "big.hack/foo")
     @result{} "big.hack/foo"
(file-name-sans-extension "/my/home/.emacs")
     @result{} "/my/home/.emacs"
(file-name-sans-extension "/my/home/.emacs.el")
     @result{} "/my/home/.emacs"
(file-name-sans-extension "~/foo.el.~3~")
     @result{} "~/foo"
(file-name-sans-extension "~/foo.~3~")
     @result{} "~/foo.~3~"
@end example

Note that the @samp{.~3~} in the two last examples is the backup part,
not an extension.
@end defun

@defun file-name-base &optional filename
This function is the composition of @code{file-name-sans-extension}
and @code{file-name-nondirectory}.  For example,

@example
(file-name-base "/my/home/foo.c")
    @result{} "foo"
@end example

The @var{filename} argument defaults to @code{buffer-file-name}.
@end defun

@node Relative File Names
@subsection Absolute and Relative File Names
@cindex absolute file name
@cindex relative file name

  All the directories in the file system form a tree starting at the
root directory.  A file name can specify all the directory names
starting from the root of the tree; then it is called an
@dfn{absolute} file name.  Or it can specify the position of the file
in the tree relative to a default directory; then it is called a
@dfn{relative} file name.  On GNU and other POSIX-like systems,
after any leading @samp{~} has been expanded, an absolute file name
starts with a @samp{/}
(@pxref{abbreviate-file-name}), and a relative one does not.  On
MS-DOS and MS-Windows, an absolute file name starts with a slash or a
backslash, or with a drive specification @samp{@var{x}:/}, where
@var{x} is the @dfn{drive letter}.

@defun file-name-absolute-p filename
This function returns @code{t} if file @var{filename} is an absolute
file name or begins with @samp{~}, @code{nil} otherwise.

@example
@group
(file-name-absolute-p "~rms/foo")
     @result{} t
@end group
@group
(file-name-absolute-p "rms/foo")
     @result{} nil
@end group
@group
(file-name-absolute-p "/user/rms/foo")
     @result{} t
@end group
@end example
@end defun

  Given a possibly relative file name, you can expand any
leading @samp{~} and convert the result to an
absolute name using @code{expand-file-name} (@pxref{File Name
Expansion}).  This function converts absolute file names to relative
names:

@defun file-relative-name filename &optional directory
This function tries to return a relative name that is equivalent to
@var{filename}, assuming the result will be interpreted relative to
@var{directory} (an absolute directory name or directory file name).
If @var{directory} is omitted or @code{nil}, it defaults to the
current buffer's default directory.

On some operating systems, an absolute file name begins with a device
name.  On such systems, @var{filename} has no relative equivalent based
on @var{directory} if they start with two different device names.  In
this case, @code{file-relative-name} returns @var{filename} in absolute
form.

@example
(file-relative-name "/foo/bar" "/foo/")
     @result{} "bar"
(file-relative-name "/foo/bar" "/hack/")
     @result{} "../foo/bar"
@end example
@end defun

@node Directory Names
@subsection Directory Names
@cindex directory name
@cindex directory file name
@cindex file name of directory

  A @dfn{directory name} is a string that must name a directory if it
names any file at all.  A directory is actually a kind of file, and it
has a file name (called the @dfn{directory file name}, which is
related to the directory name but is typically not identical.  (This
is not quite the same as the usual POSIX terminology.)  These two
names for the same entity are related by a syntactic transformation.
On GNU and other POSIX-like systems, this is simple: to obtain a
directory name, append a @samp{/} to a directory file name that does
not already end in @samp{/}.  On MS-DOS the relationship is more
complicated.

  The difference between a directory name and a directory file name is
subtle but crucial.  When an Emacs variable or function argument is
described as being a directory name, a directory file name is not
acceptable.  When @code{file-name-directory} returns a string, that is
always a directory name.

  The following two functions convert between directory names and
directory file names.  They do nothing special with environment
variable substitutions such as @samp{$HOME}, and the constructs
@samp{~}, @samp{.} and @samp{..}.

@defun file-name-as-directory filename
This function returns a string representing @var{filename} in a form
that the operating system will interpret as the name of a directory (a
directory name).  On most systems, this means appending a slash to the
string (if it does not already end in one).

@example
@group
(file-name-as-directory "~rms/lewis")
     @result{} "~rms/lewis/"
@end group
@end example
@end defun

@defun directory-name-p filename
This function returns не-@code{nil} if @var{filename} ends with a
directory separator character.  This is the forward slash @samp{/} on
GNU and other POSIX-like systems; MS-Windows and MS-DOS recognize both
the forward slash and the backslash @samp{\} as directory separators.
@end defun

@defun directory-file-name dirname
This function returns a string representing @var{dirname} in a form
that the operating system will interpret as the name of a file (a
directory file name).  On most systems, this means removing the final
directory separators from the string, unless the string consists
entirely of directory separators.

@example
@group
(directory-file-name "~lewis/")
     @result{} "~lewis"
@end group
@end example
@end defun

  Given a directory name, you can combine it with a relative file name
using @code{concat}:

@example
(concat @var{dirname} @var{relfile})
@end example

@noindent
Be sure to verify that the file name is relative before doing that.
If you use an absolute file name, the results could be syntactically
invalid or refer to the wrong file.

  If you want to use a directory file name in making such a
combination, you must first convert it to a directory name using
@code{file-name-as-directory}:

@example
(concat (file-name-as-directory @var{dirfile}) @var{relfile})
@end example

@noindent
Don't try concatenating a slash by hand, as in

@example
;;; @r{Wrong!}
(concat @var{dirfile} "/" @var{relfile})
@end example

@noindent
because this is not portable.  Always use
@code{file-name-as-directory}.

  To avoid the issues mentioned above, or if the @var{dirname} value
might be @code{nil} (for example, from an element of @code{load-path}),
use:

@example
(expand-file-name @var{relfile} @var{dirname})
@end example

However, @code{expand-file-name} expands leading @samp{~} in
@var{relfile}, which may not be what you want.  @xref{File Name
Expansion}.

  To convert a directory name to its abbreviation, use this
function:

@cindex file name abbreviations
@cindex abbreviated file names
@vindex directory-abbrev-alist
@defun abbreviate-file-name filename
@anchor{abbreviate-file-name}
This function returns an abbreviated form of @var{filename}.  It
applies the abbreviations specified in @code{directory-abbrev-alist}
(@pxref{File Aliases,,File Aliases, emacs, The GNU Emacs Manual}),
then substitutes @samp{~} for the user's home directory if the
argument names a file in the home directory or one of its
subdirectories.  If the home directory is a root directory, it is not
replaced with @samp{~}, because this does not make the result shorter
on many systems.

You can use this function for directory names and for file names,
because it recognizes abbreviations even as part of the name.
@end defun

@node File Name Expansion
@subsection Functions that Expand Filenames
@cindex expansion of file names

  @dfn{Expanding} a file name means converting a relative file name to
an absolute one.  Since this is done relative to a default directory,
you must specify the default directory as well as the file name
to be expanded.  It also involves expanding abbreviations like
@file{~/}
@ifnottex
(@pxref{abbreviate-file-name}),
@end ifnottex
and eliminating redundancies like @file{./} and @file{@var{name}/../}.

@defun expand-file-name filename &optional directory
This function converts @var{filename} to an absolute file name.  If
@var{directory} is supplied, it is the default directory to start with
if @var{filename} is relative and does not start with @samp{~}.
(The value of @var{directory} should
itself be an absolute directory name or directory file name; it may
start with @samp{~}.)  Otherwise, the current buffer's value of
@code{default-directory} is used.  For example:

@example
@group
(expand-file-name "foo")
     @result{} "/xcssun/users/rms/lewis/foo"
@end group
@group
(expand-file-name "../foo")
     @result{} "/xcssun/users/rms/foo"
@end group
@group
(expand-file-name "foo" "/usr/spool/")
     @result{} "/usr/spool/foo"
@end group
@end example

If the part of @var{filename} before the first slash is
@samp{~}, it expands to the value of the @env{HOME} environment
variable (usually your home directory).  If the part before the first
slash is @samp{~@var{user}} and if @var{user} is a valid login name,
it expands to @var{user}'s home directory.
If you do not want this expansion for a relative @var{filename} that
might begin with a literal @samp{~}, you can use @code{(concat
(file-name-as-directory directory) filename)} instead of
@code{(expand-file-name filename directory)}.

Filenames containing @samp{.} or @samp{..} are simplified to their
canonical form:

@example
@group
(expand-file-name "bar/../foo")
     @result{} "/xcssun/users/rms/lewis/foo"
@end group
@end example

In some cases, a leading @samp{..} component can remain in the output:

@example
@group
(expand-file-name "../home" "/")
     @result{} "/../home"
@end group
@end example

@noindent
This is for the sake of filesystems that have the concept of a
superroot above the root directory @file{/}.  On other filesystems,
@file{/../} is interpreted exactly the same as @file{/}.

Expanding @file{.} or the empty string returns the default directory:

@example
@group
(expand-file-name "." "/usr/spool/")
     @result{} "/usr/spool"
(expand-file-name "" "/usr/spool/")
     @result{} "/usr/spool"
@end group
@end example

Note that @code{expand-file-name} does @emph{not} expand environment
variables; only @code{substitute-in-file-name} does that:

@example
@group
(expand-file-name "$HOME/foo")
     @result{} "/xcssun/users/rms/lewis/$HOME/foo"
@end group
@end example

Note also that @code{expand-file-name} does not follow symbolic links
at any level.  This results in a difference between the way
@code{file-truename} and @code{expand-file-name} treat @samp{..}.
Assuming that @samp{/tmp/bar} is a symbolic link to the directory
@samp{/tmp/foo/bar} we get:

@example
@group
(file-truename "/tmp/bar/../myfile")
     @result{} "/tmp/foo/myfile"
@end group
@group
(expand-file-name "/tmp/bar/../myfile")
     @result{} "/tmp/myfile"
@end group
@end example

If you may need to follow symbolic links preceding @samp{..}, you
should make sure to call @code{file-truename} without prior direct or
indirect calls to @code{expand-file-name}.  @xref{Truenames}.
@end defun

@defvar default-directory
The value of this buffer-local variable is the default directory for the
current buffer.  It should be an absolute directory name; it may start
with @samp{~}.  This variable is buffer-local in every buffer.

@code{expand-file-name} uses the default directory when its second
argument is @code{nil}.

The value is always a string ending with a slash.

@example
@group
default-directory
     @result{} "/user/lewis/manual/"
@end group
@end example
@end defvar

@defun substitute-in-file-name filename
@anchor{Definition of substitute-in-file-name}
This function replaces environment variable references in
@var{filename} with the environment variable values.  Following
standard Unix shell syntax, @samp{$} is the prefix to substitute an
environment variable value.  If the input contains @samp{$$}, that is
converted to @samp{$}; this gives the user a way to quote a
@samp{$}.

The environment variable name is the series of alphanumeric characters
(including underscores) that follow the @samp{$}.  If the character following
the @samp{$} is a @samp{@{}, then the variable name is everything up to the
matching @samp{@}}.

Calling @code{substitute-in-file-name} on output produced by
@code{substitute-in-file-name} tends to give incorrect results.  For
instance, use of @samp{$$} to quote a single @samp{$} won't work
properly, and @samp{$} in an environment variable's value could lead
to repeated substitution.  Therefore, programs that call this function
and put the output where it will be passed to this function need to
double all @samp{$} characters to prevent subsequent incorrect
results.

@c Wordy to avoid overfull hbox.  --rjc 15mar92
Here we assume that the environment variable @env{HOME}, which holds
the user's home directory, has value @samp{/xcssun/users/rms}.

@example
@group
(substitute-in-file-name "$HOME/foo")
     @result{} "/xcssun/users/rms/foo"
@end group
@end example

After substitution, if a @samp{~} or a @samp{/} appears immediately
after another @samp{/}, the function discards everything before it (up
through the immediately preceding @samp{/}).

@example
@group
(substitute-in-file-name "bar/~/foo")
     @result{} "~/foo"
@end group
@group
(substitute-in-file-name "/usr/local/$HOME/foo")
     @result{} "/xcssun/users/rms/foo"
     ;; @r{@file{/usr/local/} has been discarded.}
@end group
@end example

@end defun

  Sometimes, it is not desired to expand file names.  In such cases,
the file name can be quoted to suppress the expansion, and to handle
the file name literally.  Quoting happens by prefixing the file name
with @samp{/:}.

@defmac file-name-quote name
This macro adds the quotation prefix @samp{/:} to the file @var{name}.
For a local file @var{name}, it prefixes @var{name} with @samp{/:}.
If @var{name} is a remote file name, the local part of @var{name}
(@pxref{Magic File Names}) is quoted.  If @var{name} is already a
quoted file name, @var{name} is returned unchanged.

@example
@group
(substitute-in-file-name (file-name-quote "bar/~/foo"))
     @result{} "/:bar/~/foo"
@end group

@group
(substitute-in-file-name (file-name-quote "/ssh:host:bar/~/foo"))
     @result{} "/ssh:host:/:bar/~/foo"
@end group
@end example

The macro cannot be used to suppress file name handlers from magic
file names (@pxref{Magic File Names}).
@end defmac

@defmac file-name-unquote name
This macro removes the quotation prefix @samp{/:} from the file
@var{name}, if any. If @var{name} is a remote file name, the local
part of @var{name} is unquoted.
@end defmac

@defmac file-name-quoted-p name
This macro returns не-@code{nil}, when @var{name} is quoted with the
prefix @samp{/:}.  If @var{name} is a remote file name, the local part
of @var{name} is checked.
@end defmac


@node Unique File Names
@subsection Generating Unique File Names
@cindex unique file names
@cindex temporary files

  Some programs need to write temporary files.  Here is the usual way to
construct a name for such a file:

@example
(make-temp-file @var{name-of-application})
@end example

@noindent
The job of @code{make-temp-file} is to prevent two different users or
two different jobs from trying to use the exact same file name.

@defun make-temp-file prefix &optional dir-flag suffix text
This function creates a temporary file and returns its name.  Emacs
creates the temporary file's name by adding to @var{prefix} some
random characters that are different in each Emacs job.  The result is
guaranteed to be a newly created file, containing @var{text} if that's
given as a string and empty otherwise. On MS-DOS, this function can
truncate @var{prefix} to fit into the 8+3 file-name limits.  If
@var{prefix} is a relative file name, it is expanded against
@code{temporary-file-directory}.

@example
@group
(make-temp-file "foo")
     @result{} "/tmp/foo232J6v"
@end group
@end example

When @code{make-temp-file} returns, the file has been created and is
empty.  At that point, you should write the intended contents into the
file.

If @var{dir-flag} is не-@code{nil}, @code{make-temp-file} creates an
empty directory instead of an empty file.  It returns the file name,
not the directory name, of that directory.  @xref{Directory Names}.

If @var{suffix} is не-@code{nil}, @code{make-temp-file} adds it at
the end of the file name.

If @var{text} is a string, @code{make-temp-file} inserts it in the file.

To prevent conflicts among different libraries running in the same
Emacs, each Lisp program that uses @code{make-temp-file} should have its
own @var{prefix}.  The number added to the end of @var{prefix}
distinguishes between the same application running in different Emacs
jobs.  Additional added characters permit a large number of distinct
names even in one Emacs job.
@end defun

  The default directory for temporary files is controlled by the
variable @code{temporary-file-directory}.  This variable gives the user
a uniform way to specify the directory for all temporary files.  Some
programs use @code{small-temporary-file-directory} instead, if that is
не-@code{nil}.  To use it, you should expand the prefix against
the proper directory before calling @code{make-temp-file}.

@defopt temporary-file-directory
@cindex @env{TMPDIR} environment variable
@cindex @env{TMP} environment variable
@cindex @env{TEMP} environment variable
This variable specifies the directory name for creating temporary files.
Its value should be a directory name (@pxref{Directory Names}), but it
is good for Lisp programs to cope if the value is a directory's file
name instead.  Using the value as the second argument to
@code{expand-file-name} is a good way to achieve that.

The default value is determined in a reasonable way for your operating
system; it is based on the @env{TMPDIR}, @env{TMP} and @env{TEMP}
environment variables, with a fall-back to a system-dependent name if
none of these variables is defined.

Even if you do not use @code{make-temp-file} to create the temporary
file, you should still use this variable to decide which directory to
put the file in.  However, if you expect the file to be small, you
should use @code{small-temporary-file-directory} first if that is
не-@code{nil}.
@end defopt

@defopt small-temporary-file-directory
This variable specifies the directory name for
creating certain temporary files, which are likely to be small.

If you want to write a temporary file which is likely to be small, you
should compute the directory like this:

@example
(make-temp-file
  (expand-file-name @var{prefix}
                    (or small-temporary-file-directory
                        temporary-file-directory)))
@end example
@end defopt

@defun make-temp-name base-name
This function generates a string that might be a unique file
name.  The name starts with @var{base-name}, and has several random
characters appended to it, which are different in each Emacs job.  It
is like @code{make-temp-file} except that (i) it just constructs a
name and does not create a file, (ii) @var{base-name} should be an
absolute file name that is not magic, and (iii) if the returned file
name is magic, it might name an existing file.  @xref{Magic File
Names}.

@strong{Warning:} In most cases, you should not use this function; use
@code{make-temp-file} instead!  This function is susceptible to a race
condition, between the @code{make-temp-name} call and the creation of
the file, which in some cases may cause a security hole.
@end defun

Sometimes, it is necessary to create a temporary file on a remote host
or a mounted directory.  The following two functions support this.

@defun make-nearby-temp-file prefix &optional dir-flag suffix
This function is similar to @code{make-temp-file}, but it creates a
temporary file as close as possible to @code{default-directory}.  If
@var{prefix} is a relative file name, and @code{default-directory} is
a remote file name or located on a mounted file systems, the temporary
file is created in the directory returned by the function
@code{temporary-file-directory}.  Otherwise, the function
@code{make-temp-file} is used.  @var{prefix}, @var{dir-flag} and
@var{suffix} have the same meaning as in @code{make-temp-file}.

@example
@group
(let ((default-directory "/ssh:remotehost:"))
  (make-nearby-temp-file "foo"))
     @result{} "/ssh:remotehost:/tmp/foo232J6v"
@end group
@end example
@end defun

@defun temporary-file-directory
The directory for writing temporary files via
@code{make-nearby-temp-file}.  In case of a remote
@code{default-directory}, this is a directory for temporary files on
that remote host.  If such a directory does not exist, or
@code{default-directory} ought to be located on a mounted file system
(see @code{mounted-file-systems}), the function returns
@code{default-directory}.  For a non-remote and non-mounted
@code{default-directory}, the value of the variable
@code{temporary-file-directory} is returned.
@end defun

In order to extract the local part of the file's name of a temporary
file, use @code{file-local-name} (@pxref{Magic File Names}).

@node File Name Completion
@subsection File Name Completion
@cindex file name completion subroutines
@cindex completion, file name

  This section describes low-level subroutines for completing a file
name.  For higher level functions, see @ref{Reading File Names}.

@defun file-name-all-completions partial-filename directory
This function returns a list of all possible completions for a file
whose name starts with @var{partial-filename} in directory
@var{directory}.  The order of the completions is the order of the files
in the directory, which is unpredictable and conveys no useful
information.

The argument @var{partial-filename} must be a file name containing no
directory part and no slash (or backslash on some systems).  The current
buffer's default directory is prepended to @var{directory}, if
@var{directory} is not absolute.

In the following example, suppose that @file{~rms/lewis} is the current
default directory, and has five files whose names begin with @samp{f}:
@file{foo}, @file{file~}, @file{file.c}, @file{file.c.~1~}, and
@file{file.c.~2~}.

@example
@group
(file-name-all-completions "f" "")
     @result{} ("foo" "file~" "file.c.~2~"
                "file.c.~1~" "file.c")
@end group

@group
(file-name-all-completions "fo" "")
     @result{} ("foo")
@end group
@end example
@end defun

@defun file-name-completion filename directory &optional predicate
This function completes the file name @var{filename} in directory
@var{directory}.  It returns the longest prefix common to all file names
in directory @var{directory} that start with @var{filename}.  If
@var{predicate} is не-@code{nil} then it ignores possible completions
that don't satisfy @var{predicate}, after calling that function
with one argument, the expanded absolute file name.

If only one match exists and @var{filename} matches it exactly, the
function returns @code{t}.  The function returns @code{nil} if directory
@var{directory} contains no name starting with @var{filename}.

In the following example, suppose that the current default directory
has five files whose names begin with @samp{f}: @file{foo},
@file{file~}, @file{file.c}, @file{file.c.~1~}, and
@file{file.c.~2~}.

@example
@group
(file-name-completion "fi" "")
     @result{} "file"
@end group

@group
(file-name-completion "file.c.~1" "")
     @result{} "file.c.~1~"
@end group

@group
(file-name-completion "file.c.~1~" "")
     @result{} t
@end group

@group
(file-name-completion "file.c.~3" "")
     @result{} nil
@end group
@end example
@end defun

@defopt completion-ignored-extensions
@code{file-name-completion} usually ignores file names that end in any
string in this list.  It does not ignore them when all the possible
completions end in one of these suffixes.  This variable has no effect
on @code{file-name-all-completions}.

A typical value might look like this:

@example
@group
completion-ignored-extensions
     @result{} (".o" ".elc" "~" ".dvi")
@end group
@end example

If an element of @code{completion-ignored-extensions} ends in a slash
@samp{/}, it signals a directory.  The elements which do @emph{not} end
in a slash will never match a directory; thus, the above value will not
filter out a directory named @file{foo.elc}.
@end defopt

@node Standard File Names
@subsection Standard File Names

  Sometimes, an Emacs Lisp program needs to specify a standard file
name for a particular use---typically, to hold configuration data
specified by the current user.  Usually, such files should be located
in the directory specified by @code{user-emacs-directory}, which is
@file{~/.emacs.d} by default (@pxref{Init File}).  For example, abbrev
definitions are stored by default in @file{~/.emacs.d/abbrev_defs}.
The easiest way to specify such a file name is to use the function
@code{locate-user-emacs-file}.

@defun locate-user-emacs-file base-name &optional old-name
This function returns an absolute file name for an Emacs-specific
configuration or data file.  The argument @file{base-name} should be a
relative file name.  The return value is the absolute name of a file
in the directory specified by @code{user-emacs-directory}; if that
directory does not exist, this function creates it.

If the optional argument @var{old-name} is не-@code{nil}, it
specifies a file in the user's home directory,
@file{~/@var{old-name}}.  If such a file exists, the return value is
the absolute name of that file, instead of the file specified by
@var{base-name}.  This argument is intended to be used by Emacs
packages to provide backward compatibility.  For instance, prior to
the introduction of @code{user-emacs-directory}, the abbrev file was
located in @file{~/.abbrev_defs}.  Here is the definition of
@code{abbrev-file-name}:

@example
(defcustom abbrev-file-name
  (locate-user-emacs-file "abbrev_defs" ".abbrev_defs")
  "Default name of file from which to read abbrevs."
  @dots{}
  :type 'file)
@end example
@end defun

  A lower-level function for standardizing file names, which
@code{locate-user-emacs-file} uses as a subroutine, is
@code{convert-standard-filename}.

@defun convert-standard-filename filename
This function returns a file name based on @var{filename}, which fits
the conventions of the current operating system.

On GNU and other POSIX-like systems, this simply returns @var{filename}.
On other operating systems, it may enforce system-specific file name
conventions; for example, on MS-DOS this function performs a variety
of changes to enforce MS-DOS file name limitations, including
converting any leading @samp{.} to @samp{_} and truncating to three
characters after the @samp{.}.

The recommended way to use this function is to specify a name which
fits the conventions of GNU and Unix systems, and pass it to
@code{convert-standard-filename}.
@end defun

@node Contents of Directories
@section Contents of Directories
@cindex directory-oriented functions
@cindex file names in directory

  A directory is a kind of file that contains other files entered under
various names.  Directories are a feature of the file system.

  Emacs can list the names of the files in a directory as a Lisp list,
or display the names in a buffer using the @code{ls} shell command.  In
the latter case, it can optionally display information about each file,
depending on the options passed to the @code{ls} command.

@defun directory-files directory &optional full-name match-regexp nosort
This function returns a list of the names of the files in the directory
@var{directory}.  By default, the list is in alphabetical order.

If @var{full-name} is не-@code{nil}, the function returns the files'
absolute file names.  Otherwise, it returns the names relative to
the specified directory.

If @var{match-regexp} is не-@code{nil}, this function returns only
those file names that contain a match for that regular expression---the
other file names are excluded from the list.  On case-insensitive
filesystems, the regular expression matching is case-insensitive.

@c Emacs 19 feature
If @var{nosort} is не-@code{nil}, @code{directory-files} does not sort
the list, so you get the file names in no particular order.  Use this if
you want the utmost possible speed and don't care what order the files
are processed in.  If the order of processing is visible to the user,
then the user will probably be happier if you do sort the names.

@example
@group
(directory-files "~lewis")
     @result{} ("#foo#" "#foo.el#" "." ".."
         "dired-mods.el" "files.texi"
         "files.texi.~1~")
@end group
@end example

An error is signaled if @var{directory} is not the name of a directory
that can be read.
@end defun

@defun directory-files-recursively directory regexp &optional include-directories
Return all files under @var{directory} whose names match @var{regexp}.
This function searches the specified @var{directory} and its
sub-directories, recursively, for files whose basenames (i.e., without
the leading directories) match the specified @var{regexp}, and returns
a list of the absolute file names of the matching files
(@pxref{Relative File Names, absolute file names}).  The file names
are returned in depth-first order, meaning that files in some
sub-directory are returned before the files in its parent directory.
In addition, matching files found in each subdirectory are sorted
alphabetically by their basenames.  By default, directories whose
names match @var{regexp} are omitted from the list, but if the
optional argument @var{include-directories} is не-@code{nil}, they
are included.
@end defun

@defun directory-files-and-attributes directory &optional full-name match-regexp nosort id-format
This is similar to @code{directory-files} in deciding which files
to report on and how to report their names.  However, instead
of returning a list of file names, it returns for each file a
list @code{(@var{filename} @var{attributes})}, where @var{attributes}
is what @code{file-attributes} returns for that file.
The optional argument @var{id-format} has the same meaning as the
corresponding argument to @code{file-attributes} (@pxref{Definition
of file-attributes}).
@end defun

@defun file-expand-wildcards pattern &optional full
This function expands the wildcard pattern @var{pattern}, returning
a list of file names that match it.

If @var{pattern} is written as an absolute file name,
the values are absolute also.

If @var{pattern} is written as a relative file name, it is interpreted
relative to the current default directory.  The file names returned are
normally also relative to the current default directory.  However, if
@var{full} is не-@code{nil}, they are absolute.
@end defun

@defun insert-directory file switches &optional wildcard full-directory-p
This function inserts (in the current buffer) a directory listing for
directory @var{file}, formatted with @code{ls} according to
@var{switches}.  It leaves point after the inserted text.
@var{switches} may be a string of options, or a list of strings
representing individual options.

The argument @var{file} may be either a directory or a file
specification including wildcard characters.  If @var{wildcard} is
не-@code{nil}, that means treat @var{file} as a file specification with
wildcards.

If @var{full-directory-p} is не-@code{nil}, that means the directory
listing is expected to show the full contents of a directory.  You
should specify @code{t} when @var{file} is a directory and switches do
not contain @samp{-d}.  (The @samp{-d} option to @code{ls} says to
describe a directory itself as a file, rather than showing its
contents.)

On most systems, this function works by running a directory listing
program whose name is in the variable @code{insert-directory-program}.
If @var{wildcard} is не-@code{nil}, it also runs the shell specified by
@code{shell-file-name}, to expand the wildcards.

MS-DOS and MS-Windows systems usually lack the standard Unix program
@code{ls}, so this function emulates the standard Unix program @code{ls}
with Lisp code.

As a technical detail, when @var{switches} contains the long
@samp{--dired} option, @code{insert-directory} treats it specially,
for the sake of dired.  However, the normally equivalent short
@samp{-D} option is just passed on to @code{insert-directory-program},
as any other option.
@end defun

@defvar insert-directory-program
This variable's value is the program to run to generate a directory listing
for the function @code{insert-directory}.  It is ignored on systems
which generate the listing with Lisp code.
@end defvar

@node Create/Delete Dirs
@section Creating, Copying and Deleting Directories
@cindex creating, copying and deleting directories
@c Emacs 19 features

  Most Emacs Lisp file-manipulation functions get errors when used on
files that are directories.  For example, you cannot delete a directory
with @code{delete-file}.  These special functions exist to create and
delete directories.

@findex mkdir
@deffn Command make-directory dirname &optional parents
This command creates a directory named @var{dirname}.  If
@var{parents} is не-@code{nil}, as is always the case in an
interactive call, that means to create the parent directories first,
if they don't already exist.

@code{mkdir} is an alias for this.
@end deffn

@deffn Command copy-directory dirname newname &optional keep-time parents copy-contents
This command copies the directory named @var{dirname} to
@var{newname}.  If @var{newname} is a directory name,
@var{dirname} will be copied to a subdirectory there.
@xref{Directory Names}.

It always sets the file modes of the copied files to match the
corresponding original file.

The third argument @var{keep-time} не-@code{nil} means to preserve the
modification time of the copied files.  A prefix arg makes
@var{keep-time} не-@code{nil}.

The fourth argument @var{parents} says whether to
create parent directories if they don't exist.  Interactively,
this happens by default.

The fifth argument @var{copy-contents}, if не-@code{nil}, means to
copy the contents of @var{dirname} directly into @var{newname} if the
latter is a directory name, instead of copying @var{dirname} into
it as a subdirectory.
@end deffn

@cindex trash
@vindex delete-by-moving-to-trash
@deffn Command delete-directory dirname &optional recursive trash
This command deletes the directory named @var{dirname}.  The function
@code{delete-file} does not work for files that are directories; you
must use @code{delete-directory} for them.  If @var{recursive} is
@code{nil}, and the directory contains any files,
@code{delete-directory} signals an error.
If recursive is не-@code{nil}, there is no error merely because the
directory or its files are deleted by some other process before
@code{delete-directory} gets to them.

@code{delete-directory} only follows symbolic links at the level of
parent directories.

If the optional argument @var{trash} is не-@code{nil} and the
variable @code{delete-by-moving-to-trash} is не-@code{nil}, this
command moves the file into the system Trash instead of deleting it.
@xref{Misc File Ops,,Miscellaneous File Operations, emacs, The GNU
Emacs Manual}.  When called interactively, @var{trash} is @code{t} if
no prefix argument is given, and @code{nil} otherwise.
@end deffn

@node Magic File Names
@section Making Certain File Names ``Magic''
@cindex magic file names

  You can implement special handling for certain file names.  This is
called making those names @dfn{magic}.  The principal use for this
feature is in implementing access to remote files (@pxref{Remote Files,,
Remote Files, emacs, The GNU Emacs Manual}).

  To define a kind of magic file name, you must supply a regular
expression to define the class of names (all those that match the
regular expression), plus a handler that implements all the primitive
Emacs file operations for file names that match.

@cindex file handler
@vindex file-name-handler-alist
  The variable @code{file-name-handler-alist} holds a list of handlers,
together with regular expressions that determine when to apply each
handler.  Each element has this form:

@example
(@var{regexp} . @var{handler})
@end example

@noindent
All the Emacs primitives for file access and file name transformation
check the given file name against @code{file-name-handler-alist}.  If
the file name matches @var{regexp}, the primitives handle that file by
calling @var{handler}.

  The first argument given to @var{handler} is the name of the
primitive, as a symbol; the remaining arguments are the arguments that
were passed to that primitive.  (The first of these arguments is most
often the file name itself.)  For example, if you do this:

@example
(file-exists-p @var{filename})
@end example

@noindent
and @var{filename} has handler @var{handler}, then @var{handler} is
called like this:

@example
(funcall @var{handler} 'file-exists-p @var{filename})
@end example

  When a function takes two or more arguments that must be file names,
it checks each of those names for a handler.  For example, if you do
this:

@example
(expand-file-name @var{filename} @var{dirname})
@end example

@noindent
then it checks for a handler for @var{filename} and then for a handler
for @var{dirname}.  In either case, the @var{handler} is called like
this:

@example
(funcall @var{handler} 'expand-file-name @var{filename} @var{dirname})
@end example

@noindent
The @var{handler} then needs to figure out whether to handle
@var{filename} or @var{dirname}.

  If the specified file name matches more than one handler, the one
whose match starts last in the file name gets precedence.  This rule
is chosen so that handlers for jobs such as uncompression are handled
first, before handlers for jobs such as remote file access.

  Here are the operations that a magic file name handler gets to handle:

@ifnottex
@noindent
@code{access-file}, @code{add-name-to-file},
@code{byte-compiler-base-file-name},@*
@code{copy-directory}, @code{copy-file},
@code{delete-directory}, @code{delete-file},
@code{diff-latest-backup-file},
@code{directory-file-name},
@code{directory-files},
@code{directory-files-and-attributes},
@code{dired-compress-file}, @code{dired-uncache},@*
@code{expand-file-name},
@code{file-accessible-directory-p},
@code{file-acl},
@code{file-attributes},
@code{file-directory-p},
@code{file-equal-p},
@code{file-executable-p}, @code{file-exists-p},
@code{file-in-directory-p},
@code{file-local-copy},
@code{file-modes}, @code{file-name-all-completions},
@code{file-name-as-directory},
@code{file-name-case-insensitive-p},
@code{file-name-completion},
@code{file-name-directory},
@code{file-name-nondirectory},
@code{file-name-sans-versions}, @code{file-newer-than-file-p},
@code{file-notify-add-watch}, @code{file-notify-rm-watch},
@code{file-notify-valid-p},
@code{file-ownership-preserved-p},
@code{file-readable-p}, @code{file-regular-p},
@code{file-remote-p}, @code{file-selinux-context},
@code{file-symlink-p}, @code{file-truename}, @code{file-writable-p},
@code{find-backup-file-name},@*
@code{get-file-buffer},
@code{insert-directory},
@code{insert-file-contents},@*
@code{load},
@code{make-auto-save-file-name},
@code{make-directory},
@code{make-directory-internal},
@code{make-nearby-temp-file},
@code{make-symbolic-link},@*
@code{process-file},
@code{rename-file}, @code{set-file-acl}, @code{set-file-modes},
@code{set-file-selinux-context}, @code{set-file-times},
@code{set-visited-file-modtime}, @code{shell-command},
@code{start-file-process},
@code{substitute-in-file-name},@*
@code{temporary-file-directory},
@code{unhandled-file-name-directory},
@code{vc-registered},
@code{verify-visited-file-modtime},@*
@code{write-region}.
@end ifnottex
@iftex
@noindent
@flushleft
@code{access-file}, @code{add-name-to-file},
@code{byte-com@discretionary{}{}{}piler-base-file-name},
@code{copy-directory}, @code{copy-file},
@code{delete-directory}, @code{delete-file},
@code{diff-latest-backup-file},
@code{directory-file-name},
@code{directory-files},
@code{directory-files-and-at@discretionary{}{}{}tributes},
@code{dired-compress-file}, @code{dired-uncache},
@code{expand-file-name},
@code{file-accessible-direc@discretionary{}{}{}tory-p},
@code{file-acl},
@code{file-attributes},
@code{file-direc@discretionary{}{}{}tory-p},
@code{file-equal-p},
@code{file-executable-p}, @code{file-exists-p},
@code{file-in-directory-p},
@code{file-local-copy},
@code{file-modes}, @code{file-name-all-completions},
@code{file-name-as-directory},
@code{file-name-case-insensitive-p},
@code{file-name-completion},
@code{file-name-directory},
@code{file-name-nondirec@discretionary{}{}{}tory},
@code{file-name-sans-versions}, @code{file-newer-than-file-p},
@code{file-notify-add-watch}, @code{file-notify-rm-watch},
@code{file-notify-valid-p},
@code{file-ownership-pre@discretionary{}{}{}served-p},
@code{file-readable-p}, @code{file-regular-p},
@code{file-remote-p}, @code{file-selinux-context},
@code{file-symlink-p}, @code{file-truename}, @code{file-writable-p},
@code{find-backup-file-name},
@code{get-file-buffer},
@code{insert-directory},
@code{insert-file-contents},
@code{load},
@code{make-auto-save-file-name},
@code{make-direc@discretionary{}{}{}tory},
@code{make-direc@discretionary{}{}{}tory-internal},
@code{make-symbolic-link},
@code{process-file},
@code{rename-file}, @code{set-file-acl}, @code{set-file-modes},
@code{set-file-selinux-context}, @code{set-file-times},
@code{set-visited-file-modtime}, @code{shell-command},
@code{start-file-process},
@code{substitute-in-file-name},
@code{unhandled-file-name-directory},
@code{vc-regis@discretionary{}{}{}tered},
@code{verify-visited-file-modtime},
@code{write-region}.
@end flushleft
@end iftex

  Handlers for @code{insert-file-contents} typically need to clear the
buffer's modified flag, with @code{(set-buffer-modified-p nil)}, if the
@var{visit} argument is не-@code{nil}.  This also has the effect of
unlocking the buffer if it is locked.

  The handler function must handle all of the above operations, and
possibly others to be added in the future.  It need not implement all
these operations itself---when it has nothing special to do for a
certain operation, it can reinvoke the primitive, to handle the
operation in the usual way.  It should always reinvoke the primitive
for an operation it does not recognize.  Here's one way to do this:

@smallexample
(defun my-file-handler (operation &rest args)
  ;; @r{First check for the specific operations}
  ;; @r{that we have special handling for.}
  (cond ((eq operation 'insert-file-contents) @dots{})
        ((eq operation 'write-region) @dots{})
        @dots{}
        ;; @r{Handle any operation we don't know about.}
        (t (let ((inhibit-file-name-handlers
                  (cons 'my-file-handler
                        (and (eq inhibit-file-name-operation operation)
                             inhibit-file-name-handlers)))
                 (inhibit-file-name-operation operation))
             (apply operation args)))))
@end smallexample

  When a handler function decides to call the ordinary Emacs primitive for
the operation at hand, it needs to prevent the primitive from calling
the same handler once again, thus leading to an infinite recursion.  The
example above shows how to do this, with the variables
@code{inhibit-file-name-handlers} and
@code{inhibit-file-name-operation}.  Be careful to use them exactly as
shown above; the details are crucial for proper behavior in the case of
multiple handlers, and for operations that have two file names that may
each have handlers.

@kindex safe-magic @r{(property)}
  Handlers that don't really do anything special for actual access to the
file---such as the ones that implement completion of host names for
remote file names---should have a не-@code{nil} @code{safe-magic}
property.  For instance, Emacs normally protects directory names
it finds in @code{PATH} from becoming magic, if they look like magic
file names, by prefixing them with @samp{/:}.  But if the handler that
would be used for them has a не-@code{nil} @code{safe-magic}
property, the @samp{/:} is not added.

@kindex operations @r{(property)}
  A file name handler can have an @code{operations} property to
declare which operations it handles in a nontrivial way.  If this
property has a не-@code{nil} value, it should be a list of
operations; then only those operations will call the handler.  This
avoids inefficiency, but its main purpose is for autoloaded handler
functions, so that they won't be loaded except when they have real
work to do.

  Simply deferring all operations to the usual primitives does not
work.  For instance, if the file name handler applies to
@code{file-exists-p}, then it must handle @code{load} itself, because
the usual @code{load} code won't work properly in that case.  However,
if the handler uses the @code{operations} property to say it doesn't
handle @code{file-exists-p}, then it need not handle @code{load}
nontrivially.

@defvar inhibit-file-name-handlers
This variable holds a list of handlers whose use is presently inhibited
for a certain operation.
@end defvar

@defvar inhibit-file-name-operation
The operation for which certain handlers are presently inhibited.
@end defvar

@defun find-file-name-handler file operation
This function returns the handler function for file name @var{file},
or @code{nil} if there is none.  The argument @var{operation} should
be the operation to be performed on the file---the value you will pass
to the handler as its first argument when you call it.  If
@var{operation} equals @code{inhibit-file-name-operation}, or if it is
not found in the @code{operations} property of the handler, this
function returns @code{nil}.
@end defun

@defun file-local-copy filename
This function copies file @var{filename} to an ordinary non-magic file
on the local machine, if it isn't on the local machine already.  Magic
file names should handle the @code{file-local-copy} operation if they
refer to files on other machines.  A magic file name that is used for
other purposes than remote file access should not handle
@code{file-local-copy}; then this function will treat the file as
local.

If @var{filename} is local, whether magic or not, this function does
nothing and returns @code{nil}.  Otherwise it returns the file name
of the local copy file.
@end defun

@defun file-remote-p filename &optional identification connected
This function tests whether @var{filename} is a remote file.  If
@var{filename} is local (not remote), the return value is @code{nil}.
If @var{filename} is indeed remote, the return value is a string that
identifies the remote system.

This identifier string can include a host name and a user name, as
well as characters designating the method used to access the remote
system.  For example, the remote identifier string for the filename
@code{/sudo::/some/file} is @code{/sudo:root@@localhost:}.

If @code{file-remote-p} returns the same identifier for two different
filenames, that means they are stored on the same file system and can
be accessed locally with respect to each other.  This means, for
example, that it is possible to start a remote process accessing both
files at the same time.  Implementers of file handlers need to ensure
this principle is valid.

@var{identification} specifies which part of the identifier shall be
returned as string.  @var{identification} can be the symbol
@code{method}, @code{user} or @code{host}; any other value is handled
like @code{nil} and means to return the complete identifier string.
In the example above, the remote @code{user} identifier string would
be @code{root}.

If @var{connected} is не-@code{nil}, this function returns @code{nil}
even if @var{filename} is remote, if Emacs has no network connection
to its host.  This is useful when you want to avoid the delay of
making connections when they don't exist.
@end defun

@defun unhandled-file-name-directory filename
This function returns the name of a directory that is not magic.  For
a non-magic @var{filename} it returns the corresponding directory name
(@pxref{Directory Names}).  For a magic @var{filename}, it invokes the
file name handler, which therefore decides what value to return.  If
@var{filename} is not accessible from a local process, then the file
name handler should indicate that by returning @code{nil}.

This is useful for running a subprocess; every subprocess must have a
non-magic directory to serve as its current directory, and this function
is a good way to come up with one.
@end defun

@cindex local part of remote file name
@defun file-local-name filename
This function returns the @dfn{local part} of @var{filename}.  This is
the part of the file's name that identifies it on the remote host, and
is typically obtained by removing from the remote file name the parts
that specify the remote host and the method of accessing it.  For
example:

@smallexample
(file-local-name "/ssh:@var{user}@@@var{host}:/foo/bar")
     @result{} "/foo/bar"
@end smallexample

For a remote @var{filename}, this function returns a file name which
could be used directly as an argument of a remote process
(@pxref{Asynchronous Processes}, and @pxref{Synchronous Processes}),
and as the program to run on the remote host.  If @var{filename} is
local, this function returns it unchanged.
@end defun

@defopt remote-file-name-inhibit-cache
The attributes of remote files can be cached for better performance.  If
they are changed outside of Emacs's control, the cached values become
invalid, and must be reread.

When this variable is set to @code{nil}, cached values are never
expired.  Use this setting with caution, only if you are sure nothing
other than Emacs ever changes the remote files.  If it is set to
@code{t}, cached values are never used.  This is the safest value, but
could result in performance degradation.

A compromise is to set it to a positive number.  This means that
cached values are used for that amount of seconds since they were
cached.  If a remote file is checked regularly, it might be a good
idea to let-bind this variable to a value less than the time period
between consecutive checks.  For example:

@example
(defun display-time-file-nonempty-p (file)
  (let ((remote-file-name-inhibit-cache
         (- display-time-interval 5)))
    (and (file-exists-p file)
         (< 0 (nth 7 (file-attributes
                       (file-chase-links file)))))))
@end example
@end defopt

@node Format Conversion
@section File Format Conversion

@cindex file format conversion
@cindex encoding file formats
@cindex decoding file formats
@cindex text properties in files
@cindex saving text properties
  Emacs performs several steps to convert the data in a buffer (text,
text properties, and possibly other information) to and from a
representation suitable for storing into a file.  This section describes
the fundamental functions that perform this @dfn{format conversion},
namely @code{insert-file-contents} for reading a file into a buffer,
and @code{write-region} for writing a buffer into a file.

@menu
* Overview: Format Conversion Overview.     @code{insert-file-contents} and @code{write-region}.
* Round-Trip: Format Conversion Round-Trip. Using @code{format-alist}.
* Piecemeal: Format Conversion Piecemeal.   Specifying non-paired conversion.
@end menu

@node Format Conversion Overview
@subsection Overview
@noindent
The function @code{insert-file-contents}:

@itemize
@item initially, inserts bytes from the file into the buffer;
@item decodes bytes to characters as appropriate;
@item processes formats as defined by entries in @code{format-alist}; and
@item calls functions in @code{after-insert-file-functions}.
@end itemize

@noindent
The function @code{write-region}:

@itemize
@item initially, calls functions in @code{write-region-annotate-functions};
@item processes formats as defined by entries in @code{format-alist};
@item encodes characters to bytes as appropriate; and
@item modifies the file with the bytes.
@end itemize

  This shows the symmetry of the lowest-level operations; reading and
writing handle things in opposite order.  The rest of this section
describes the two facilities surrounding the three variables named
above, as well as some related functions.  @ref{Coding Systems}, for
details on character encoding and decoding.

@node Format Conversion Round-Trip
@subsection Round-Trip Specification

  The most general of the two facilities is controlled by the variable
@code{format-alist}, a list of @dfn{file format} specifications, which
describe textual representations used in files for the data in an Emacs
buffer.  The descriptions for reading and writing are paired, which is
why we call this ``round-trip'' specification
(@pxref{Format Conversion Piecemeal}, for non-paired specification).

@defvar format-alist
This list contains one format definition for each defined file format.
Each format definition is a list of this form:

@example
(@var{name} @var{doc-string} @var{regexp} @var{from-fn} @var{to-fn} @var{modify} @var{mode-fn} @var{preserve})
@end example
@end defvar

@cindex format definition
@noindent
Here is what the elements in a format definition mean:

@table @var
@item name
The name of this format.

@item doc-string
A documentation string for the format.

@item regexp
A regular expression which is used to recognize files represented in
this format.  If @code{nil}, the format is never applied automatically.

@item from-fn
A shell command or function to decode data in this format (to convert
file data into the usual Emacs data representation).

A shell command is represented as a string; Emacs runs the command as a
filter to perform the conversion.

If @var{from-fn} is a function, it is called with two arguments, @var{begin}
and @var{end}, which specify the part of the buffer it should convert.
It should convert the text by editing it in place.  Since this can
change the length of the text, @var{from-fn} should return the modified
end position.

One responsibility of @var{from-fn} is to make sure that the beginning
of the file no longer matches @var{regexp}.  Otherwise it is likely to
get called again.  Also, @var{from-fn} must not involve buffers or
files other than the one being decoded, otherwise the internal buffer
used for formatting might be overwritten.

@item to-fn
A shell command or function to encode data in this format---that is, to
convert the usual Emacs data representation into this format.

If @var{to-fn} is a string, it is a shell command; Emacs runs the
command as a filter to perform the conversion.

If @var{to-fn} is a function, it is called with three arguments:
@var{begin} and @var{end}, which specify the part of the buffer it
should convert, and @var{buffer}, which specifies which buffer.  There
are two ways it can do the conversion:

@itemize @bullet
@item
By editing the buffer in place.  In this case, @var{to-fn} should
return the end-position of the range of text, as modified.

@item
By returning a list of annotations.  This is a list of elements of the
form @code{(@var{position} . @var{string})}, where @var{position} is an
integer specifying the relative position in the text to be written, and
@var{string} is the annotation to add there.  The list must be sorted in
order of position when @var{to-fn} returns it.

When @code{write-region} actually writes the text from the buffer to the
file, it intermixes the specified annotations at the corresponding
positions.  All this takes place without modifying the buffer.
@end itemize

@var{to-fn} must not involve buffers or files other than the one being
encoded, otherwise the internal buffer used for formatting might be
overwritten.

@item modify
A flag, @code{t} if the encoding function modifies the buffer, and
@code{nil} if it works by returning a list of annotations.

@item mode-fn
A minor-mode function to call after visiting a file converted from this
format.  The function is called with one argument, the integer 1;
that tells a minor-mode function to enable the mode.

@item preserve
A flag, @code{t} if @code{format-write-file} should not remove this format
from @code{buffer-file-format}.
@end table

The function @code{insert-file-contents} automatically recognizes file
formats when it reads the specified file.  It checks the text of the
beginning of the file against the regular expressions of the format
definitions, and if it finds a match, it calls the decoding function for
that format.  Then it checks all the known formats over again.
It keeps checking them until none of them is applicable.

Visiting a file, with @code{find-file-noselect} or the commands that use
it, performs conversion likewise (because it calls
@code{insert-file-contents}); it also calls the mode function for each
format that it decodes.  It stores a list of the format names in the
buffer-local variable @code{buffer-file-format}.

@defvar buffer-file-format
This variable states the format of the visited file.  More precisely,
this is a list of the file format names that were decoded in the course
of visiting the current buffer's file.  It is always buffer-local in all
buffers.
@end defvar

When @code{write-region} writes data into a file, it first calls the
encoding functions for the formats listed in @code{buffer-file-format},
in the order of appearance in the list.

@deffn Command format-write-file file format &optional confirm
This command writes the current buffer contents into the file @var{file}
in a format based on @var{format}, which is a list of format names.  It
constructs the actual format starting from @var{format}, then appending
any elements from the value of @code{buffer-file-format} with a
не-@code{nil} @var{preserve} flag (see above), if they are not already
present in @var{format}.  It then updates @code{buffer-file-format} with
this format, making it the default for future saves.  Except for the
@var{format} argument, this command is similar to @code{write-file}.  In
particular, @var{confirm} has the same meaning and interactive treatment
as the corresponding argument to @code{write-file}.  @xref{Definition of
write-file}.
@end deffn

@deffn Command format-find-file file format
This command finds the file @var{file}, converting it according to
format @var{format}.  It also makes @var{format} the default if the
buffer is saved later.

The argument @var{format} is a list of format names.  If @var{format} is
@code{nil}, no conversion takes place.  Interactively, typing just
@key{RET} for @var{format} specifies @code{nil}.
@end deffn

@deffn Command format-insert-file file format &optional beg end
This command inserts the contents of file @var{file}, converting it
according to format @var{format}.  If @var{beg} and @var{end} are
не-@code{nil}, they specify which part of the file to read, as in
@code{insert-file-contents} (@pxref{Reading from Files}).

The return value is like what @code{insert-file-contents} returns: a
list of the absolute file name and the length of the data inserted
(after conversion).

The argument @var{format} is a list of format names.  If @var{format} is
@code{nil}, no conversion takes place.  Interactively, typing just
@key{RET} for @var{format} specifies @code{nil}.
@end deffn

@defvar buffer-auto-save-file-format
This variable specifies the format to use for auto-saving.  Its value is
a list of format names, just like the value of
@code{buffer-file-format}; however, it is used instead of
@code{buffer-file-format} for writing auto-save files.  If the value
is @code{t}, the default, auto-saving uses the same format as a
regular save in the same buffer.  This variable is always buffer-local
in all buffers.
@end defvar

@node Format Conversion Piecemeal
@subsection Piecemeal Specification

  In contrast to the round-trip specification described in the previous
subsection (@pxref{Format Conversion Round-Trip}), you can use the variables
@code{after-insert-file-functions} and @code{write-region-annotate-functions}
to separately control the respective reading and writing conversions.

  Conversion starts with one representation and produces another
representation.  When there is only one conversion to do, there is no
conflict about what to start with.  However, when there are multiple
conversions involved, conflict may arise when two conversions need to
start with the same data.

  This situation is best understood in the context of converting text
properties during @code{write-region}.  For example, the character at
position 42 in a buffer is @samp{X} with a text property @code{foo}.  If
the conversion for @code{foo} is done by inserting into the buffer, say,
@samp{FOO:}, then that changes the character at position 42 from
@samp{X} to @samp{F}.  The next conversion will start with the wrong
data straight away.

  To avoid conflict, cooperative conversions do not modify the buffer,
but instead specify @dfn{annotations}, a list of elements of the form
@code{(@var{position} . @var{string})}, sorted in order of increasing
@var{position}.

  If there is more than one conversion, @code{write-region} merges their
annotations destructively into one sorted list.  Later, when the text
from the buffer is actually written to the file, it intermixes the
specified annotations at the corresponding positions.  All this takes
place without modifying the buffer.

@c ??? What about "overriding" conversions like those allowed
@c ??? for 'write-region-annotate-functions', below?  --ttn

  In contrast, when reading, the annotations intermixed with the text
are handled immediately.  @code{insert-file-contents} sets point to
the beginning of some text to be converted, then calls the conversion
functions with the length of that text.  These functions should always
return with point at the beginning of the inserted text.  This
approach makes sense for reading because annotations removed by the
first converter can't be mistakenly processed by a later converter.
Each conversion function should scan for the annotations it
recognizes, remove the annotation, modify the buffer text (to set a
text property, for example), and return the updated length of the
text, as it stands after those changes.  The value returned by one
function becomes the argument to the next function.

@defvar write-region-annotate-functions
A list of functions for @code{write-region} to call.  Each function in
the list is called with two arguments: the start and end of the region
to be written.  These functions should not alter the contents of the
buffer.  Instead, they should return annotations.

As a special case, a function may return with a different buffer
current.  Emacs takes this to mean that the current buffer contains
altered text to be output.  It therefore changes the @var{start} and
@var{end} arguments of the @code{write-region} call, giving them the
values of @code{point-min} and @code{point-max} in the new buffer,
respectively.  It also discards all previous annotations, because they
should have been dealt with by this function.
@end defvar

@defvar write-region-post-annotation-function
The value of this variable, if не-@code{nil}, should be a function.
This function is called, with no arguments, after @code{write-region}
has completed.

If any function in @code{write-region-annotate-functions} returns with
a different buffer current, Emacs calls
@code{write-region-post-annotation-function} more than once.  Emacs
calls it with the last buffer that was current, and again with the
buffer before that, and so on back to the original buffer.

Thus, a function in @code{write-region-annotate-functions} can create
a buffer, give this variable the local value of @code{kill-buffer} in
that buffer, set up the buffer with altered text, and make the buffer
current.  The buffer will be killed after @code{write-region} is done.
@end defvar

@defvar after-insert-file-functions
Each function in this list is called by @code{insert-file-contents}
with one argument, the number of characters inserted, and with point
at the beginning of the inserted text.  Each function should leave
point unchanged, and return the new character count describing the
inserted text as modified by the function.
@c ??? The docstring mentions a handler from 'file-name-handler-alist'
@c     "intercepting" 'insert-file-contents'.  Hmmm.  --ttn
@end defvar

  We invite users to write Lisp programs to store and retrieve text
properties in files, using these hooks, and thus to experiment with
various data formats and find good ones.  Eventually we hope users
will produce good, general extensions we can install in Emacs.

  We suggest not trying to handle arbitrary Lisp objects as text property
names or values---because a program that general is probably difficult
to write, and slow.  Instead, choose a set of possible data types that
are reasonably flexible, and not too hard to encode.
