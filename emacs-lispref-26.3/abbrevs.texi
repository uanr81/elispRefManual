@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1994, 1999, 2001-2019 Free Software Foundation,
@c Inc.
@c See the file elisp.texi for copying conditions.
@node Abbrevs
@chapter Сокращения и Расширение Аббревиатуры
@cindex abbrev
@c  @cindex таблица сокращений Избыточная с "abbrev".

  Аббревиатура или @dfn{сокращение} - это строка символов, которая
может быть расширена до более длинной строки.  Пользователь может
вставить строку аббревиатуры и обнаружить, что она автоматически
заменяется расширением аббревиатуры.  Это экономит набор текста.

  Набор действующих сокращений записывается в файл @dfn{таблиц сокращений}.
Каждый буфер имеет локальную таблицу сокращений, но обычно все буферы в
одном основном режиме используют одну таблицу сокращений.  Также существует
глобальная таблица сокращений.  Обычно используются обе.

  Таблица сокращений представлена в виде массива.  @xref{Creating Symbols},
для информации о obarrays.  Каждая аббревиатура представлена символом в
массиве.  Название символа - это аббревиатура; его оценка - расширение;
его определение функции - это функция-перехватчик для выполнения раскрытия
(@pxref{Defining Abbrevs}); а его ячейка со списком свойств содержит
различные дополнительные свойства, включая счетчик использования и
количество раз, когда сокращение было расширено (@pxref{Abbrev Properties}).

@cindex system abbrev
  Некоторые сокращения, называемые @dfn{системные сокращения},
определяются основным режимом, а не пользователем.  Системное сокращение
идентифицируется своим свойством @code{:system} в не-@code{nil}
(@pxref{Abbrev Properties}).  При сохранении сокращений в файл сокращений
системные сокращения опускаются.  @xref{Abbrev Files}.

  Поскольку символы, используемые для сокращений, не помещаются в обычный
obarray, они никогда не появятся в результате чтения выражения Lisp;
фактически, обычно они никогда не используются, кроме кода, который
обрабатывает сокращения.  Поэтому использовать их нестандартным
способом безопасно.

  Если включен второстепенный режим - режим сокращений включен,
локальная в буфере переменная @code{abbrev-mode} имеет значение не-@code{nil},
и сокращения автоматически расширяются в буфере.  Для команд уровня
пользователя для сокращений, смотреть
@ref{Abbrevs,, Abbrev Mode, emacs, The GNU Emacs Manual}.

@menu
* Tables: Abbrev Tables.        Создание и работа с таблицами сокращений.
* Defining Abbrevs::            Указание сокращений и их расширения.
* Files: Abbrev Files.          Сохранение сокращений в файлах.
* Expansion: Abbrev Expansion.  Контроль за расширением; подпрограммы расширения.
* Standard Abbrev Tables::      Таблицы сокращений, используемые в различных основных режимах.
* Abbrev Properties::           Как читать и устанавливать свойства сокращения.
                                Какие свойства имеют какой эффект.
* Abbrev Table Properties::     Как читать и устанавливать свойства таблицы сокращений.
                                Какие свойства имеют какой эффект.
@end menu

@node Abbrev Tables
@section Таблицы Сокращений
@cindex abbrev tables

  В этом разделе описывается, как создавать таблицы сокращений и управлять ими.

@defun make-abbrev-table &optional props
Функция создает и возвращает новую пустую таблицу сокращений --- массив
без символов.  Это вектор, заполненный нулями.  @var{props} - это список
свойств, который применяется к новой таблице (@pxref{Abbrev Table Properties}).
@end defun

@defun abbrev-table-p object
Функция возвращает значение не-@code{nil}, если @var{object} - это
таблица сокращений.
@end defun

@defun clear-abbrev-table abbrev-table
Функция отменяет определение всех сокращений в @var{abbrev-table},
оставляя его пустым.
@c Не понимаю, почему это нужно сказать.
@c Всегда возвращает @code{nil}.
@end defun

@defun copy-abbrev-table abbrev-table
Функция возвращает копию @var{abbrev-table} --- новую таблицу сокращений,
содержащую те же определения сокращений. @emph{Не} копирует ни какие
списки свойств; только имена, значения и функции.
@end defun

@defun define-abbrev-table tabname definitions &optional docstring &rest props
Функция определяет @var{tabname} (символ) как имя таблицы сокращений,
то есть как переменную, значение которой является таблицей сокращений.
Определяет сокращения в таблице в соответствии с @var{definitions},
списком элементов вида
@code{(@var{abbrevname} @var{expansion} [@var{hook}] [@var{props}...])}.
Эти элементы передаются в качестве аргументов в @code{define-abbrev}.
@c Возвращаемое значение всегда @code{nil}.

Необязательная строка @var{docstring} - это строка документации
переменной @var{tabname}.  Список свойств @var{props} применяется
к таблице сокращений (@pxref{Abbrev Table Properties}).

Если функция вызывается более одного раза для одной и той же
@var{tabname}, последующие вызовы добавляют определения из
@var{definitions} к @var{tabname}, а не перезаписывают все
исходное содержимое.  (Последующий вызов заменяет только
сокращения, явно переопределенные или неопределенные в
@var{definitions}.)
@end defun

@defvar abbrev-table-name-list
Это список символов, значения которых представляют собой таблицы
сокращений.  @code{define-abbrev-table} добавляет в этот список
новое имя таблицы сокращений.
@end defvar

@defun insert-abbrev-table-description name &optional human
Функция вставляет перед точкой описание таблицы сокращений
с именем @var{name}.  Аргумент @var{name} - это символ,
значением которого является таблица сокращений.
@c Возвращаемое значение всегда @code{nil}.

Если @var{human} равно не-@code{nil}, описание ориентировано
на человека.  Системные сокращения перечислены и обозначены
как таковые.  В противном случае описание будет выражением Lisp -
вызовом @code{define-abbrev-table}, определяется @var{name} в том
виде, в каком определено в данный момент, но без системных
сокращений.  (Предполагается, что режим или пакет, использующие
@var{name}, добавят их в @var{name} отдельно.)
@end defun

@node Defining Abbrevs
@section Определение Сокращений
@cindex defining abbrevs

  @code{define-abbrev} - это базовая функция нижнего уровня для
определения сокращения в таблице сокращений.

  Когда основной режим определяет системное сокращение, требуется
вызов @code{define-abbrev} и указание @code{t} для свойства
@code{:system}.  Иметь в виду, что любые сохраненные несистемные
сокращения восстанавливаются при запуске, то есть перед загрузкой
некоторых основных режимов.  Следовательно, основные режимы не
должны предполагать, что их таблицы сокращений при первой загрузке
пусты.

@defun define-abbrev abbrev-table name expansion &optional hook &rest props
Функция определяет сокращение с именем @var{name} в @var{abbrev-table}
для расширения до @var{expansion} и вызова @var{hook} со свойствами
@var{props} (@pxref{Abbrev Properties}).  Возвращаемое значение -
@var{name}.  Свойство @code{:system} в @var{props} здесь обрабатывается
особым образом: если оно имеет значение @code{force}, оно перезапишет
существующее определение даже для несистемного сокращения с тем же именем.

@var{name} должно быть строкой.  Аргумент @var{expansion} обычно
является желаемым расширением (строкой) или @code{nil} для отмены
определения сокращения.  Если это что-то, кроме строки или @code{nil},
тогда сокращение расширяется только путем запуска @var{hook}.

Аргумент @var{hook} - это функция или @code{nil}.  Если @var{hook}
равно не-@code{nil}, то вызывается без аргументов после замены
сокращения на @var{expansion}; точка находится в конце
@var{expansion} при вызове @var{hook}.

@cindex @code{no-self-insert} property
Если @var{hook} - это символ не-@code{nil}, свойство
@code{no-self-insert} которого равно не-@code{nil}, @var{hook}
может явно контролировать, нужно ли вставлять самовставляющийся
входной символ, который запускал раскрытие.  Если в этом случае
@var{hook} возвращает не-@code{nil}, это запрещает вставку символа.
Напротив, если @var{hook} возвращает @code{nil}, @code{expand-abbrev}
(или @code{abbrev-insert}) также возвращает @code{nil}, как если
бы расширения на самом деле не было.

Обычно @code{define-abbrev} устанавливает переменную
@code{abbrevs-changed} в @code{t}, если действительно меняется
сокращение.  Это сделано для того, чтобы некоторые команды предлагали
сохранить сокращения.  Это не относится к системным сокращениям,
поскольку они все равно не сохраняются.
@end defun

@defopt only-global-abbrevs
Если эта переменная - не-@code{nil}, это означает, что пользователь
планирует использовать только глобальные сокращения.  Это указывает
командам, определяющим сокращения для конкретных режимов, вместо них
определять глобальные.  Эта переменная не изменяет поведение функций
в этом разделе; это проверяется их абонентами.
@end defopt

@node Abbrev Files
@section Сохранение Cокращений в Файлах
@cindex save abbrevs in files

  Файл сохраненных определений сокращений на самом деле является
файлом кода Lisp.  Сокращения сохраняются в форме программы на Lisp
для определения тех же таблиц сокращений с тем же содержанием.
Следовательно, можно загрузить файл с @code{load}
(@pxref{How Programs Do Loading}).  Однако функция
@code{quietly-read-abbrev-file} предоставляется как более удобный
интерфейс.  Emacs автоматически вызывает эту функцию при запуске.

  Средства пользовательского уровня, такие как @code{save-some-buffers},
могут автоматически сохранять сокращения в файл под управлением
переменных, описанных здесь.

@defopt abbrev-file-name
Это имя файла по умолчанию для чтения и сохранения сокращений.
По умолчанию Emacs будет искать @file{~/.emacs.d/abbrev_defs} и,
если не найден, @file{~/.abbrev_defs}; если ни один файл не
существует, Emacs создаст @file{~/.emacs.d/abbrev_defs}.
@end defopt

@defun quietly-read-abbrev-file &optional filename
Функция считывает определения сокращений из файла с именем
@var{filename}, ранее записанного с помощью @code{write-abbrev-file}.
Если @var{filename} не указан или @code{nil}, используется файл,
указанный в @code{abbrev-file-name}.

Как следует из названия, эта функция не отображает никаких сообщений.
@c Возвращает @code{nil}.
@end defun

@defopt save-abbrevs
Значение не-@code{nil} для @code{save-abbrevs} означает, что Emacs
должен предлагать сохранять сокращения (если они изменились) при
сохранении файлов.  Если значение равно @code{silently}, Emacs
сохраняет сокращения, не спрашивая пользователя.
@code{abbrev-file-name} указывает файл для сохранения сокращений.
Значение по умолчанию - @code{t}.
@end defopt

@defvar abbrevs-changed
Эта переменная устанавливается не-@code{nil} путем определения
или изменения любых сокращений (кроме системных сокращений).
Это служит флагом для различных команд Emacs, предлагающих
сохранить ваши сокращения.
@end defvar

@deffn Command write-abbrev-file &optional filename
Сохраните все определения сокращений (кроме системных сокращений)
для всех таблиц сокращений, перечисленных в
@code{abbrev-table-name-list}, в файле @var{filename} в форме
программы на Lisp, которая при загрузке будет определять те же
сокращения.  Если @var{filename} равен @code{nil} или опущен,
используется @code{abbrev-file-name}.  Эта функция возвращает
@code{nil}.
@end deffn

@node Abbrev Expansion
@section Поиск и Раскрытие Сокращений
@cindex looking up abbrevs
@cindex expanding abbrevs
@cindex abbrevs, looking up and expanding

  Сокращения обычно расширяются некоторыми интерактивными командами,
включая @code{self-insert-command}.  В этом разделе описаны подпрограммы,
используемые при написании таких команд, а также переменные,
которые они используют для связи.

@defun abbrev-symbol abbrev &optional table
Функция возвращает символ, представляющий сокращение с именем
@var{abbrev}.  Возвращается @code{nil}, если это сокращение не
определено.  Необязательный второй аргумент @var{table} - это
таблица сокращений, в которой его можно найти.  Если @var{table}
равно @code{nil}, эта функция сначала пробует локальную таблицу
сокращений текущего буфера, а затем глобальную таблицу сокращений.
@end defun

@defun abbrev-expansion abbrev &optional table
Функция возвращает строку, в которую @var{abbrev} расширится
(как определено в таблицах сокращений, используемых для текущего
буфера).  Возвращается @code{nil}, если @var{abbrev} не является
допустимым сокращением.  Необязательный аргумент @var{table}
указывает используемую таблицу сокращений, как в @code{abbrev-symbol}.
@end defun

@deffn Command expand-abbrev
Команда расширяет аббревиатуру перед точкой, если таковая имеется.
Если точка не следует за аббревиатурой, эта команда ничего не делает.
Чтобы выполнить расширение, вызывается функция, которая является
значением переменной @code{abbrev-expand-function}, без аргументов,
и возвращается все, что делает эта функция.

Функция расширения по умолчанию возвращает символ сокращения,
если она выполняла расширение, и @code{nil} в противном случае.
Если у символа сокращения есть функция-перехватчик, которая
является символом, свойство @code{no-self-insert} которого имеет
значение не-@code{nil}, и если функция-перехватчик возвращает
@code{nil} в качестве своего значения, то функция расширения по
умолчанию возвращает @code{nil}, даже если расширение
действительно имело место.
@end deffn

@defun abbrev-insert abbrev &optional name start end
Функция вставляет аббревиатуру @code{abbrev}, заменяя текст
между @code{start} и @code{end}.  Если @code{start} опущено, по
умолчанию используется точка.  @code{name}, если не-@code{nil},
должно быть именем, по которому было найдено это сокращение
(строка); это используется, чтобы выяснить, следует ли
корректировать регистр расширения.  Функция возвращает
@code{abbrev}, если сокращение было успешно вставлено, в
противном случае возвращается @code{nil}.
@end defun

@deffn Command abbrev-prefix-mark &optional arg
Команда отмечает текущее местоположение точки как начало аббревиатуры.
Следующий вызов @code{expand-abbrev} будет использовать текст отсюда
до точки (где он находится тогда) в качестве сокращения для расширения,
вместо того, чтобы использовать предыдущее слово, как обычно.

Во-первых, эта команда расширяет любое сокращение перед точкой,
если только @var{arg} не не-@code{nil}.  (В интерактивном режиме
@var{arg} является префиксным аргументом.)  Затем вставляется дефис
перед точкой, чтобы указать начало следующего сокращения, которое
нужно раскрыть.  Фактическое расширение удаляет дефис.
@end deffn

@defopt abbrev-all-caps
Когда установлено не-@code{nil}, аббревиатура, введенная
полностью в верхнем регистре, раскрывается полностью в верхнем
регистре.  В противном случае сокращение, введенное полностью в
верхнем регистре, раскрывается с заглавной буквы в каждом слове расширения.
@end defopt

@defvar abbrev-start-location
Значение этой переменной представляет собой позицию в буфере
(целое число или маркер) для @code{expand-abbrev}, чтобы
использовать его в качестве начала следующего сокращения,
которое нужно раскрыть.  Значение также может быть @code{nil},
что означает использование слова перед точкой.
@code{abbrev-start-location} устанавливается в @code{nil} каждый раз,
когда вызывается @code{expand-abbrev}.  Эта переменная также
устанавливается @code{abbrev-prefix-mark}.
@end defvar

@defvar abbrev-start-location-buffer
Значение этой переменной - буфер, для которого установлено
@code{abbrev-start-location}.  Попытка расширить аббревиатуру в
любом другом буфере очищает @code{abbrev-start-location}.  Эта
переменная устанавливается @code{abbrev-prefix-mark}.
@end defvar

@defvar last-abbrev
Это @code{abbrev-symbol} последнего расширенного сокращения.
Эта информация оставлена @code{expand-abbrev} для команды
@code{unexpand-abbrev} (@pxref{Expanding Abbrevs,, Expanding
Abbrevs, emacs, The GNU Emacs Manual}).
@end defvar

@defvar last-abbrev-location
Это расположение последнего расширенного сокращения.  Содержит
информацию, оставленную @code{expand-abbrev} для команды
@code{unexpand-abbrev}.
@end defvar

@defvar last-abbrev-text
Это точный текст раскрытия последнего сокращения после преобразования
регистра (если есть).  Его значение - @code{nil}, если сокращение
ещё не раскрыто.  Содержит информацию, оставленную @code{expand-abbrev}
для команды @code{unexpand-abbrev}.
@end defvar

@defvar abbrev-expand-function
Значение этой переменной - это функция, которую @code{expand-abbrev}
будет вызывать без аргументов для выполнения раскрытия.  Функция может
делать все, что угодно, до и после выполнения раскрытия.  Должен вернуться
символ сокращения, если расширение имело место.
@end defvar

  В следующем примере кода показано простое использование
@code{abbrev-expand-function}.  Предполагается, что @code{foo-mode} -
это режим редактирования определенных файлов, в которых строки,
начинающиеся с @samp{#}, являются комментариями.  Требуется
использовать сокращения в текстовом режиме для этих строк.
Обычная локальная таблица сокращений @code{foo-mode-abbrev-table}
подходит для всех остальных строк.  @xref{Standard Abbrev Tables},
для определений @code{local-abbrev-table} и @code{text-mode-abbrev-table}.
@xref{Advising Functions}, подробности об @code{add-function}.

@smallexample
(defun foo-mode-abbrev-expand-function (expand)
  (if (not (save-excursion (forward-line 0) (eq (char-after) ?#)))
      ;; Выполняется нормальное расширение.
      (funcall expand)
    ;; Сейчас внутри комментария: использовать сокращения текстового режима.
    (let ((local-abbrev-table text-mode-abbrev-table))
      (funcall expand))))

(add-hook 'foo-mode-hook
          #'(lambda ()
              (add-function :around (local 'abbrev-expand-function)
                            #'foo-mode-abbrev-expand-function)))
@end smallexample

@node Standard Abbrev Tables
@section Стандартные Таблицы Сокращений
@cindex standard abbrev tables

  Здесь перечисляются переменные, которые содержат таблицы
сокращений для предварительно загруженных основных режимов Emacs.

@defvar global-abbrev-table
Это таблица сокращений для сокращений, не зависящих от режима.
Определенные в нем сокращения применяются ко всем буферам.  Каждый буфер
может также иметь локальную таблицу сокращений, определения сокращений
которой имеют приоритет над определениями в глобальной таблице.
@end defvar

@defvar local-abbrev-table
Значение этой локальной переменной буфера представляет собой
(зависящую от режима) таблицу сокращений текущего буфера.
Также это может быть список таких таблиц.
@end defvar

@defvar abbrev-minor-mode-table-alist
Значение этой переменной представляет собой список элементов
вида @code{(@var{mode} . @var{abbrev-table})}, где @var{mode} -
имя переменной: если переменная привязана к значению не-@code{nil},
то @var{abbrev-table} активна, в противном случае это игнорируется.
@var{abbrev-table} также может быть списком таблиц сокращений.
@end defvar

@defvar fundamental-mode-abbrev-table
Локальная таблица сокращений, используемая в основном режиме;
другими словами, это локальная таблица сокращений во всех буферах
в основном режиме.
@end defvar

@defvar text-mode-abbrev-table
Локальная таблица сокращений, используемая в текстовом режиме.
@end defvar

@defvar lisp-mode-abbrev-table
Локальная таблица сокращений, используемая в режиме Lisp.
Это родительский элемент локальной таблицы сокращений,
используемой в режиме Emacs Lisp.  @xref{Abbrev Table Properties}.
@end defvar

@node Abbrev Properties
@section Свойства Сокращения
@cindex abbrev properties

У сокращений есть свойства, некоторые из которых влияют на то,
как они работают.  Можно предоставить их в качестве аргументов
@code{define-abbrev} и управлять ими с помощью следующих функций:

@defun abbrev-put abbrev prop val
Установить для свойства @var{prop} объекта @var{abbrev} значение @var{val}.
@end defun

@defun abbrev-get abbrev prop
Вернуть свойство @var{prop} для @var{abbrev} или @code{nil}, если
у аббревиатуры нет такого свойства.
@end defun

Следующие свойства имеют особое значение:

@table @code
@item :count
Свойство подсчитывает, сколько раз сокращение было расширено.
Если не установлен явно, инициализируется значением 0 с
помощью @code{define-abbrev}.

@item :system
Если не-@code{nil}, это свойство отмечает аббревиатуру как
системную.  Такие сокращения не сохраняются (@pxref{Abbrev Files}).

@item :enable-function
Если не-@code{nil}, это свойство должно быть функцией без аргументов,
которая возвращает @code{nil}, если сокращение не следует использовать,
и @code{t} в противном случае.

@item :case-fixed
Если не-@code{nil}, это свойство указывает, что регистр имени
аббревиатуры имеет значение и должен соответствовать только тексту
с таким же шаблоном использования заглавных букв.  Также отключается код,
который изменяет регистр в раскрытии.
@end table

@node Abbrev Table Properties
@section Свойства Таблицы Сокращений
@cindex abbrev table properties

Как и сокращения, таблицы сокращений имеют свойства, некоторые из
которых влияют на способ их работы.  Можно предоставить их в качестве
аргументов @code{define-abbrev-table} и управлять ими с помощью функций:

@defun abbrev-table-put table prop val
Задать для свойства @var{prop} таблицы сокращений @var{table} значение @var{val}.
@end defun

@defun abbrev-table-get table prop
Вернуть свойство @var{prop} таблицы сокращений @var{table} или
@code{nil}, если @var{table} не имеет такого свойства.
@end defun

Следующие свойства имеют особое значение:

@table @code
@item :enable-function
Это похоже на свойство abbrev @code{:enable-function}, за
исключением того, что оно применяется ко всем сокращениям в
таблице.  Используется даже перед попыткой найти сокращение
перед точкой, поэтому может динамически изменять таблицу сокращений.

@item :case-fixed
Это похоже на свойство abbrev @code{:case-fixed}, за исключением
того, что применяется ко всем сокращениям в таблице.

@item :regexp
Если не-@code{nil}, это свойство является регулярным выражением,
которое указывает, как извлечь имя сокращения перед точкой,
прежде чем искать его в таблице.  Когда регулярное выражение
совпадает перед точкой, предполагается, что сокращенное имя будет
в подсоответствии 1.  Если это свойство - @code{nil}, по умолчанию
для поиска имени используется @code{backward-word} и @code{forward-word}.
Это свойство позволяет использовать аббревиатуры, имя которых
содержит символы несловесного синтаксиса.

@item :parents
Свойство содержит список таблиц, от которых наследуются другие сокращения.

@item :abbrev-table-modiff
Свойство содержит счетчик, увеличивающийся каждый раз, когда в
таблицу добавляется новое сокращение.

@end table
