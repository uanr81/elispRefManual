@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1997-2019 Free Software Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Customization
@chapter Персональные Настройки

@cindex customization item
  Пользователи Emacs могут настроить переменные и отображение текста
  без написания кода Lisp, с помощью интерфейса Настройки.
  @xref{Easy Customization,,, emacs, The GNU Emacs Manual}.  В этой главе
  описывается, как определить @dfn{элементы настройки}, с помощью которых
  пользователи смогут взаимодействовать с настройкой, используя интерфейс
  Настройки.

  Элементы персонализации включают настраиваемые переменные, которые
  определяются с помощью
@ifinfo
@code{defcustom} макроса (@pxref{Variable Definitions});
@end ifinfo
@ifnotinfo
@code{defcustom} макроса;
@end ifnotinfo
настраиваемое отображение текста, которые определено с @code{defface}
(описаны отдельно в @ref{Defining Faces}) и @dfn{групп настройки},
определяется
@ifinfo
@code{defgroup} (@pxref{Group Definitions}),
@end ifinfo
@ifnotinfo
@code{defgroup},
@end ifnotinfo
которые действуют как контейнеры для групп связанных элементов настройки.

@menu
* Common Keywords::         Ключевые слова общих аргументов для всех видов
                            объявления настройки.
* Group Definitions::       Написание определений групп настройки.
* Variable Definitions::    Объявление параметров пользователя.
* Customization Types::     Определение типа пользовательского параметра.
* Applying Customizations:: Функции для применения параметров настройки.
* Custom Themes::           Написание пользовательских тем.
@end menu

@node Common Keywords
@section Common Item Keywords

@cindex customization keywords
  Создание настройки, которое описывается в следующих разделах ---
  @code{defcustom}, @code{defgroup} и так далее.  Принимаются ключевые слова
  в аргументах (@pxref{Constant Variables}) для указания различной
  информации.  В этом разделе описываются ключевые слова, которые относятся
  ко всем типам определений настройки.

  Все эти ключевые слова, за исключением @code{:tag}, можно использовать
  более чем один раз в определённом элементе.  Каждое использование ключевого
  слова имеет независимый эффект.  Ключевое слово @code{:tag} является
  исключением, потому что любой конкретный элемент может отображать только
  одно имя.

@table @code
@item :tag @var{label}
@kindex tag@r{, customization keyword}
Использует тег @var{label}, строку, вместо имени элемента, для отметки
элемента пункта меню настройки и буферах.   @strong{Не используйте тег,
который существенно отличается от реального имени элемента; это может
вызвать путаницу.}

@kindex group@r{, customization keyword}
@item :group @var{group}
Помещает этот элемент настройки в группе @var{group}.  Если это ключевое
слово отсутствует в элементе настройки, оно будет помещено в ту же группу,
которая была определена последней (в текущем файле).

При использовании @code{:group} в @code{defgroup}, новая группа становится
подгруппой группы @var{group}.

Если использовать это ключевое слово более чем один раз, можно поместить
один элемент в более чем одну группу.  Отображение любой из этих групп будет
показывать этот элемент.  Пожалуйста, не переусердствуйте, так как результат
будет раздражать.

@item :link @var{link-data}
@kindex link@r{, customization keyword}
Включает внешнюю ссылку после строки документации для элемента.  Это
предложение, содержит ссылку для перехода на некоторую другую документацию.

Есть несколько вариантов, которые можно использовать для @var{link-data}:

@table @code
@item (custom-manual @var{info-node})
Ссылка на узел Info; @var{info-node} является строкой, которая определяет
имя узла, как и в @code{"(emacs)Top"}.  Ссылка выглядит как @samp{[Manual]} в
буфере настройки и запускает встроенную программу справки Info, ноду
@var{info-node}.

@item (info-link @var{info-node})
Как @code{custom-manual} за исключением того, что ссылка появляется в
настройках буфера с именем узла Info.

@item (url-link @var{url})
Ссылка на веб-страницу; @var{url} является строкой, которая определяет
@acronym{URL}.  Отображается ссылка в настройках буфера как @var{url} и
вызывает WWW-браузер, указанный в @code{browse-url-browser-function}.

@item (emacs-commentary-link @var{library})
Ссылка на раздел комментариев библиотеки; @var{library} является строкой,
которая определяет имя библиотеки.  @xref{Library Headers}.

@item (emacs-library-link @var{library})
Ссылка на файл библиотеки Emacs Lisp; @var{library} является строкой, которая
определяет имя библиотеки.

@item (file-link @var{file})
Ссылка на файл; @var{file} является строкой, которая определяет имя файла
для посещения с использованием @code{find-file}, когда пользователь вызывает
эту ссылку.

@item (function-link @var{function})
Ссылка на документацию функции; @var{function} является строкой, которая
определяет имя функции, чтобы использовать с @code{describe-function}, когда
пользователь кликает эту ссылку.

@item (variable-link @var{variable})
Ссылка на документацию переменной; @var{variable} является строкой, которая
определяет имя переменной, чтобы использовать с @code{describe-variable},
когда пользователь кликает эту ссылку.

@item (custom-group-link @var{group})
Ссылка на другую группу настройки.  Вызов создает новый буфер настройки
@var{group}.
@end table

Можно задать текст для использования в буфере настройки путем добавления
@code{:tag @var{name}} после первого элемента @var{link-data}; например,
@code{(info-link :tag "foo" "(emacs)Top")} создаёт ссылку на руководство
Emacs, которое появляется в буфере с именем @samp{foo}.

Можно использовать это ключевое слово более чем один раз, чтобы добавить
несколько ссылок.

@item :load @var{file}
@kindex load@r{, customization keyword}
Загрузить файл @var{file} (строку) перед отображением этого элемента
настройки (@pxref{Loading}).  Загрузка выполняется используя @code{load}, и
только если файл ещё не был загружен.

@item :require @var{feature}
@kindex require@r{, customization keyword}
Выполнить @code{(require '@var{feature})} чтобы применить сохраненные
настройки значения этого элемента. @var{feature} должен быть символом.
(ВопросCustomize152)

Наиболее распространенная причина использования @code{:require}, когда
переменная включает функцию, такую как второстепенный режим, и простая
установка переменной не будет иметь никакого эффекта, если не загружен код,
который реализуется загружаемым режимом.

@item :version @var{version}
@kindex version@r{, customization keyword}
Это ключевое слово указывает, что элемент был впервые введен в Emacs в
версии @var{version}, или его значение по умолчанию было изменено в
указанной версии.  Значение @var{version} должно быть строкой.

@item :package-version '(@var{package} . @var{version})
@kindex package-version@r{, customization keyword}
Это ключевое слово указывает, что элемент был впервые введен в пакете
@var{package} с версией @var{version}, или что его значение или значение по
умолчанию было изменено в этой версии.  Это ключевое слово имеет приоритет
над @code{:version}.

@var{package} должно быть официальным названием пакета, как символ
(такой как, @code{MH-E}).  @var{version} должно быть строкой.  Если пакет
@var{package} выпущен как часть Emacs, @var{package} и @var{version} должны
появиться в значении @code{customize-package-emacs-version-alist}.
@end table

Пакеты распространяемые как часть Emacs, использующие ключевое слово
@code{:package-version} длжны также обновлять переменную
@code{customize-package-emacs-version-alist}.

@defvar customize-package-emacs-version-alist
Ассоциативный список обеспечивает отображение связи версий Emacs с версиями
пакета, указанной в @code{:package-version} ключевом слове. Ее элементы:

@example
(@var{package} (@var{pversion} . @var{eversion})@dots{})
@end example

Для каждого пакета @var{package}, который является символом, есть один или
несколько элементов, которые содержат версии пакета @var{pversion} с
соответствующей версии Emacs @var{eversion}.  Эти версии являются строками.
Например, MH-E пакет обновляет этот ассоциативный список с нижеследующим:

@c Должен быть маленьким, а этот еще слишком широк.
@c Исправте: Очевидно, что это устаревший (в коде).
@smallexample
(add-to-list 'customize-package-emacs-version-alist
             '(MH-E ("6.0" . "22.1") ("6.1" . "22.1") ("7.0" . "22.1")
                    ("7.1" . "22.1") ("7.2" . "22.1") ("7.3" . "22.1")
                    ("7.4" . "22.1") ("8.0" . "22.1")))
@end smallexample

Значение @var{package} должно быть уникальным, и должно соответствовать
значению @var{package} появляющегося в  ключевом слове
@code{:package-version}.  Так как пользователь может увидеть в сообщении об
ошибке это значение, хороший выбор официальное название пакета, такое как
MH-E или Gnus.
@end defvar

@node Group Definitions
@section Определение Групп Настройки
@cindex define customization group
@cindex customization groups, defining

  Каждый пакет Emacs Lisp должен иметь одну основную группу настройки,
  которая содержит все варианты, текстовое отображение и другие группы в
  пакете.  Если пакет имеет небольшое количество опций и отображений текста,
  лучше использовать только одну группу и разместить все в ней.  При наличии
  более чем двадцати вариантов и отображений текста, лучше разделить их на
  подгруппы, и поставить подгруппы под основной настройки группы пакета.  Это
  применимо, чтобы расположить некоторые из вариантов и отображений текста
  на одном уровне с основной группой программ пакета вместе с подгруппами.

  Основная или единственная группа пакета должна быть членом одной или
  нескольких стандартных групп настройки.  (Чтобы отобразить полный список,
  используется @kbd{M-x customize}.)  Выберается один или несколько из них
  (но не слишком много), и добавляется группа к каждому из них с помощью
  @code{:group} ключевого слова.

  Способ объявить новые группы настройки с помощью @code{defgroup}.

@defmac defgroup group members doc [keyword value]@dots{}
Объявляет @var{group} в качестве группы настройки, содержащей @var{members}.
Не указывайте символ @var{group}.  Аргумент @var{doc} указывает строку
документации для группы.  (ВопросCustomize236)

Аргумент @var{members} представляет собой список с указанием исходного
набора элементов членов группы настройки.  Тем не менее, чаще всего
@var{members} установлен в @code{nil}, а указываются участники группы,
используя ключевое слово @code{:group} при их определении.

Если требуется указать член группы через @var{members}, каждый элемент должен
иметь вид @code{(@var{name} @var{widget})}.  Здесь @var{name} является
символом, а @var{widget} виджетом типа для редактирования этого символа.
Полезные виджеты для переменных @code{custom-variable}, @code{custom-face}
для отображения текста, и @code{custom-group} для группы.

Когда вводится новая группа настроек в Emacs, используется ключевое слово
@code{:version} в @code{defgroup}; его не нужно использовать для отдельных
членов группы.

В дополнении к (@pxref{Common Keywords}) общим ключевым словам, также можно
использовать это ключевое слово в @code{defgroup}:

@table @code
@item :prefix @var{prefix}
@kindex prefix@r{, @code{defgroup} keyword}
Если имя элемента в группе начинается с @var{prefix} и настраиваемая
переменная @code{custom-unlispify-remove-prefixes} установленна в
не-@code{nil}, тег элемента будет опускать @var{prefix}.  Группа может иметь
любое количество префиксов.
@end table

@cindex @code{custom-group} property
Переменные и подгруппы группы сохраняются в @code{custom-group} свойстве
символа группы.  @xref{Symbol Plists}.  Значение этого свойства представляет
собой список пар, где @code{car} является символом переменной или подгруппы,
а @code{cdr} это либо @code{custom-variable} либо @code{custom-group}.
@end defmac

@defopt custom-unlispify-remove-prefixes
Если эта переменная установленна в не-@code{nil}, префиксы, указанные
ключевым словом @code{:prefix} какой-либо группы опускаются в именах тегов,
когда пользователь настраивает группу.

Значение по умолчанию @code{nil}, т.е. функция отбрасывания префикса имени
отключена.  Это происходит потому, что отбрасывание префикса часто приводит к
запутанным имена опций и отображениям текста.
@end defopt

@node Variable Definitions
@section Определение Переменных Настройки
@cindex define customization options
@cindex customizable variables, how to define
@cindex user options, how to define

  @dfn{Настраиваемые переменные}, называемый также
  @dfn{опциями пользователя}, являются глобальными Lisp переменными,значения
  которых могут быть установлены через интерфейс Настройки.  В отличие от
  других глобальных переменных, которые определяются с использованием
  @code{defvar} (@pxref{Defining Variables}), настраиваемые переменные
  определяются с помощью @code{defcustom} макроса.  Помимо вызова
  @code{defvar} в качестве подпрограммы, @code{defcustom} устанавливает, как
  переменная должна отображаться в интерфейсе Настройка, какие значения
  допускается ей принимать и так далее.

@defmac defcustom option standard doc [keyword value]@dots{}
Макрос объявляет @var{option} в качестве опции пользователя (то есть,
настраиваемый переменной).  Не нужно цитировать @var{option}.

Аргумент @var{standard} содержит выражение, которое задает стандартное
значение для @var{option}.  Оценивая форму @code{defcustom} оценивает
@var{standard}, но не обязательно привязывать опцию к этому значению.  Если
@var{option} уже имеет значение по умолчанию, оно остается неизменным.  Если
пользователь уже сохранил настройки для @var{option}, индивидуальные значения
пользователя устанавливается в качестве значения по умолчанию.  В противном
случае, результат вычисления @var{standard} устанавливается в качестве
значения по умолчанию.

Как и макрос @code{defvar}, этот макрос отмечает @code{option} в качестве
специальной переменной, а это означает, что она должен всегда быть
динамически связана.  Если @var{option} уже лексически связана, то
лексическое связывания остается в силе до выхода из конструкции связывания.
@xref{Variable Scoping}.  (ВопросCustomize315)

Выражение @var{standard} может быть оценено в различных других случаях, очень
часто, когда при настройки объекта необходимо знать @var{option}'s
стандартное значение.  Поэтому обязательно нужно использовать выражение,
которое безвредно для оценки в любое время.  (ВопросCustomize320)

Аргумент @var{doc} указывает строку документации для переменной.

Если @code{defcustom} не определяет @code{:group}, последняя группа,
определенная с использованием @code{defgroup} в том же файле, будет
использована.  Таким образом, в большинстве случаев в @code{defcustom} не
нужно явно задавать @code{:group}.

@cindex @code{eval-defun}, and @code{defcustom} forms
Когда оценивается форма @code{defcustom} с использованием @kbd{C-M-x} в Emacs
Lisp режиме (@code{eval-defun}), специальная функция @code{eval-defun}
безоговорочно установит переменную, не проверяя, является ли её значение
действительным.  (Та же функция применимп км@code{defvar},
@pxref{Defining Variables}.).  Использование @code{eval-defun} в форме
defcustom, с переменной которая уже определена, вызывает функцию @code{:set}
(смотрим ниже).  (ВопросCustomize336)

Если установить @code{defcustom} в предварительно загружаемый Emacs Lisp файл
(@pxref{Building Emacs}), стандартное значение устанавливаемое во время
дампа может быть неправильным, например, потому что другая переменная,
которая влияет на установку, не получила ещё правильное значение.  В этом
случае рекомендуется использовать @code{custom-reevaluate-setting}, описанно
ниже, чтобы повторно оценивать стандартное значение после того, как Emacs
запустится.
@end defmac

  В дополнение к ключевым словам, перечисленных в @ref{Common Keywords},
  этот макрос принимает следующие ключевые слова:

@table @code
@item :type @var{type}
Назначает тип @var{type} как тип данных для этой опции.  Определяет, какие
значения являются допустимыми, и как отображать это значение
(@pxref{Customization Types}).  При каждом использовании @code{defcustom}
требуется указывать значение для этого ключевого слова.

@item :options @var{value-list}
@kindex options@r{, @code{defcustom} keyword}
Указывает список подходящих значений для использования в этой опции.
Пользователь не ограничивается использованием только этих значений, но они
предлагаются в качестве удобных альтернатив.

Это имеет смысл только для определенных типов, в настоящее время в их числе
@code{hook}, @code{plist} и @code{alist}.  Смотреть определение описания
отдельных типов с использованием @code{:options}.

@item :set @var{setfunction}
@kindex set@r{, @code{defcustom} keyword}
Указывает функцию @var{setfunction} используемую для изменения значения этого
параметра при использовании интерфейса Настройки.  Функция @var{setfunction}
должна принимать два аргумента, символ (имя параметра) и новое значение,
также должна сделать все необходимое, чтобы обновить допустимое значение
для этой опции (которое не может означать просто установку параметра в
качестве переменной Lisp); предпочтительно не изменяя свое значение аргумента
деструктивно.  По умолчанию @var{setfunction} установлено в
@code{set-default}.

Если указать это ключевое слово, строка документации переменной должна
описать, как сделать эту же работу самостоятельно написанном коде Lisp.

@item :get @var{getfunction}
@kindex get@r{, @code{defcustom} keyword}
Указывает функцию @var{getfunction} как способ извлечь значение этого
параметра.  Функция @var{getfunction} должна принимать один аргумент, символ,
и должна вернуть все настройки, которые следует использовать в качестве
текущего значения этого символа (которое не обязательно должно быть значением
Lisp символа). По умолчанию @code{default-value}.  (ВопросCustomize387)

Требуется действительно понять работу Настройки, для правильного
использования @code{:get}.  Оно предназначено для значений, которые
рассматриваются в Настройке как переменные, но на самом деле не хранятся в
Lisp как переменные.  Это почти наверняка приведёт к ошибке, указать
@var{getfunction} для значения, которое на самом деле хранится в переменной
Lisp.

@item :initialize @var{function}
@kindex initialize@r{, @code{defcustom} keyword}
@var{function} должно быть функцией, которая используется для инициализации
переменной, когда @code{defcustom} оценивается.  Должна принимать два
аргумента, имя параметра (символ) и значение.  Вот некоторые предопределенные
функции, предназначенные для использования таким образом:

@table @code
@item custom-initialize-set
Используйте функцию @code{:set} для инициализации переменной, но не для
повторной инициализации, если переменная уже не недействительна.

@item custom-initialize-default
Как и @code{custom-initialize-set}, но использует функцию @code{set-default}
для установки переменной, вместо функции @code{:set}.  Это обычный выбор для
переменной, @code{:set} функция включает или выключает второстепенный режим;
если определять переменную таким образом не будет вызываться функция
второстепенного режима, в отличии от настройки переменной.

@item custom-initialize-reset
Всегда используется функция @code{:set} для инициализации переменной.  Если
переменная уже не недействительна, сбросит её с помощью вызова функции
@code{:set} с использованием текущего значения (возвращаемое методом
@code{:get}).  Функция @code{:initialize} по умолчанию.

@item custom-initialize-changed
Используется функция @code{:set} для инициализации переменной, если она уже
установлена или настроена; в противном случае, просто используется
@code{set-default}.

@item custom-initialize-delay
Функция ведет себя как и @code{custom-initialize-set}, но задерживает
фактическую инициализацию до начала следующего запуска Emacs. Это должно быть
использовано в файлах, которые являются предварительно загруженными (или для
автозагружаемых переменных), так что их инициализация выполняется в время
выполнения контекста, а не в контексте времени выполнения.  Это также имеет
побочный эффект, такой как (задержка) выполнение инициализации с помощью
функции @code{:set}.  @xref{Building Emacs}.
@end table

@item :risky @var{value}
@kindex risky@r{, @code{defcustom} keyword}
Установка свойство переменной @code{risky-local-variable} в значение
@var{value} (@pxref{File Local Variables}).

@item :safe @var{function}
@kindex safe@r{, @code{defcustom} keyword}
Установка свойства переменной @code{safe-local-variable} в значение
@var{function} (@pxref{File Local Variables}).

@item :set-after @var{variables}
@kindex set-after@r{, @code{defcustom} keyword}
Установка переменных в соответствии с сохраненными настройками, убедиться,
что переменные @var{variables} уже установлены перед этой; то есть отложить
настройку этой переменной до тех пор, пока не будут обработаны другие.
Использовать @code{:set-after}, если установка этой переменной не зависит от
установленных значений других переменных.
@end table

  Полезно указать ключевое слово @code{:require} для опции, в которой
  установлено определение функции.  Это приводит к тому, что Emacs загрузит
  эту функцию, если она еще не загружена, когда этот параметр будет
  устанавливаться. @xref{Common Keywords}. Вот пример:

@example
(defcustom frobnicate-automatically nil
  "Не-nil значение устанавливает автомотическое сохранение для всех буферов."
  :type 'boolean
  :require 'frobnicate-mode
  :group 'frobnicate)
@end example

Если элемент настройки имеет тип, такой как @code{hook} или @code{alist} и
поддерживает @code{:options}, можно добавить дополнительные значения в список
за пределами объявления @code{defcustom} вызвав функцию
@code{custom-add-frequent-value}.  Например, если определить функцию
@code{my-lisp-mode-initialization} предназначенную для вызова из
@code{emacs-lisp-mode-hook}, можно добавить в список подходящих значений
@code{emacs-lisp-mode-hook}, без редактирования её определения.  Можно
сделать это следующим образом:

@example
(custom-add-frequent-value 'emacs-lisp-mode-hook
   'my-lisp-mode-initialization)
@end example

@defun custom-add-frequent-value symbol value
Опция настройки @var{symbol}, добавление значения @var{value} в список
рекомендуемых значений.

Точный эффект добавления значения зависит от типа настройки @var{symbol}.
@end defun

Внутри @code{defcustom} используется свойство символа @code{standard-value}
записывается выражение для стандартного значения, @code{saved-value}
записывает значение, сохраненное пользователем с помощью буфера настройки, и
@code{customized-value} записывает установленное значение пользователя с
помощью буфера настройки, но без сохранения.  @xref{Symbol Properties}.  Эти
свойства являются списками, @code{car}, которых является выражением,
определяющее значение.

@defun custom-reevaluate-setting symbol
Функция повторно вычисляет стандартное значение @var{symbol}, которое должно
быть объявлено ​​по желанию пользователя с помощью @code{defcustom}.  Если
переменная была настроена, то эта функция переоценивает сохраненное значение.
Затем устанавливается параметр пользователя к этому значению (используя
свойство опции @code{:set}, если это определено).

Это полезно для настраиваемых опций, которые определяются, прежде чем их
значения могут быть вычислены правильно.  Например, во время запуска, Emacs
вызывает эту функцию для некоторых пользовательских параметров, которые были
определены в предварительно загруженных Emacs Lisp файлах, но чьи
первоначальные значения зависят от информации, доступной только во время
выполнения.
@end defun

@defun custom-variable-p arg
Функция возвращает не-@code{nil} если @var{arg} это настраиваемая переменная.
Настраиваемая переменная это переменная, которая имеет свойство
@code{standard-value} или @code{custom-autoload} (как правило, означает, что
она была объявлена ​​с @code{defcustom}) или псевдонимом для другой
настраиваемой переменной.
@end defun

@node Customization Types
@section Настройка Типы

@cindex customization types
  При определении параметра пользователя с использованием @code{defcustom},
  необходимо указать его @dfn{тип настройки}.  То есть:  (1) объект Lisp,
  который описывает допустимые значения и (2) как отображать значение в
  буфере для редактирования настройки.

@kindex type@r{, @code{defcustom} keyword}
  Необходимо указать тип настройки в @code{defcustom} свойству с ключевым
  словом @code{:type}.  Аргумент @code{:type} оценивается один раз, когда
  выполняется @code{defcustom}, так что это не полезно для изменения
  значений.  Обычно используется цитируемая константа. Например:

@example
(defcustom diff-command "diff"
  "Команда, используемая для запуска diff."
  :type '(string)
  :group 'diff)
@end example

  В общем, тип настройки представляет собой список, первый элементом которого
  является символ, одного из имен типов настройки, определенных в следующих
  разделах.  После этого символа следует ряд аргументов, в зависимости от
  указанного символа.  Между символом типа и его аргументами, можно при
  желании написать ключевые пары слово-значение (@pxref{Type Keywords}).

  Некоторые символы типа, не используют аргументы; они называются
  @dfn{простыми типами}.  Для простого типа, если не используется какие-либо
  ключевые пары слово-значение, можно опустить скобки вокруг символа типа.
  Например просто @code{string} как тип настройки эквивалентно
  @code{(string)}.

  Все типы настроек реализованы в виде виджетов; смотреть @ref{Top, ,
Introduction, widget, The Emacs Widget Library}, для деталей.

@menu
* Simple Types::            Простые типы настройки: sexp, integer и т.д..
* Composite Types::         Создание новых типов из других типов или данных.
* Splicing into Lists::     Сращивание элементов в список с @code{:inline}.
* Type Keywords::           Ключевые пары слово-аргумент в типе настройки.
* Defining New Types::      Задайте вашему типу имя.
@end menu

@node Simple Types
@subsection Простые Типы

  В этом разделе описаны все простые типы настройки.  Для некоторых из этих
  типов настройки, настройки виджета обеспечивает встроенное завершение с
  использованием @kbd{C-M-i} или @kbd{M-@key{TAB}}.

@table @code
@item sexp
Значение может быть любым Lisp объект, который можно вывести и прочитать
обратно.  Можно использовать @code{sexp} как запасной вариант для любого
варианта, если нет желания тратить время, чтобы разработать более конкретный
тип для использования.

@item integer
Значение должно быть целым числом.

@item number
Значение должно быть числом (с плавающей точкой или целым числом).

@item float
Значение должно быть с плавающей точкой.

@item string
Значение должно быть строкой. В буфере настройки показывает строку без
цитирования разделительных символов @samp{"} или @samp{\}.
(ВопросCustomize590)

@item regexp
Как и @code{string} за исключением того, что строка должна быть регулярным
выражением.

@item character
Значение должно быть кодом символа.  Код символа на самом деле является целым
числом, и этот тип показывает значение путем вставки символа в буфер, а не
путем вставки числа.

@item file
Значение должно быть именем файла. Виджет обеспечивает завершение.

@item (file :must-match t)
Значение должно быть именем существующего файла.  Виджет обеспечивает
завершение.

@item directory
The value must be a directory.  The widget provides completion.

@item hook
Значение должно быть списком функций.  Этот тип настройки используется для
переменных ловушек.  Можно также использовать ключевое слово @code{:options}
в переменной ловушке в @code{defcustom}, чтобы определить список функций,
рекомендованный для использования в ловушке; @xref{Variable Definitions}.

@item symbol
Значение должно быть символом.  Оно появляется в буфере настройки в качестве
имени символа.  Виджет обеспечивает завершение.

@item function
Значение должно быть либо лямбда-выражением или именем функции.  Виджет
обеспечивает завершение для имён функций.

@item variable
Значение должно быть именем переменной.  Виджет обеспечивает завершение.

@item face
Значение должно быть символом, которое является именем отображения текста.
Виджет обеспечивает завершение.

@item boolean
Булево значение --- либо @code{nil} или @code{t}.  Обратите внимание, что
при использовании @code{choice} и @code{const} вместе (смотрите следующий
раздел), можно указать, что значение должно быть @code{nil} или @code{t}, а
также указать текст для описания каждого значения таким образом, при
выборе конкретного значения альтернативы.  (ВопросCustomize638)

@item key-sequence
Значение представляет собой последовательность клавиш.  Буфер настройки
показывает ключевую последовательность, используя тот же синтаксис, что и
функция @kbd{kbd}.  @xref{Key Sequences}.

@item coding-system
The value must be a coding-system name, and you can do completion with
@kbd{M-@key{TAB}}.

@item color
The value must be a valid color name.  The widget provides completion
for color names, as well as a sample and a button for selecting a
color name from a list of color names shown in a @file{*Colors*}
buffer.
@end table

@node Composite Types
@subsection Composite Types
@cindex composite types (customization)

  When none of the simple types is appropriate, you can use composite
types, which build new types from other types or from specified data.
The specified types or data are called the @dfn{arguments} of the
composite type.  The composite type normally looks like this:

@example
(@var{constructor} @var{arguments}@dots{})
@end example

@noindent
but you can also add keyword-value pairs before the arguments, like
this:

@example
(@var{constructor} @r{@{}@var{keyword} @var{value}@r{@}}@dots{} @var{arguments}@dots{})
@end example

  Here is a table of constructors and how to use them to write
composite types:

@table @code
@item (cons @var{car-type} @var{cdr-type})
The value must be a cons cell, its @sc{car} must fit @var{car-type}, and
its @sc{cdr} must fit @var{cdr-type}.  For example, @code{(cons string
symbol)} is a customization type which matches values such as
@code{("foo" . foo)}.

In the customization buffer, the @sc{car} and @sc{cdr} are displayed
and edited separately, each according to their specified type.

@item (list @var{element-types}@dots{})
The value must be a list with exactly as many elements as the
@var{element-types} given; and each element must fit the
corresponding @var{element-type}.

For example, @code{(list integer string function)} describes a list of
three elements; the first element must be an integer, the second a
string, and the third a function.

In the customization buffer, each element is displayed and edited
separately, according to the type specified for it.

@item (group @var{element-types}@dots{})
This works like @code{list} except for the formatting
of text in the Custom buffer.  @code{list} labels each
element value with its tag; @code{group} does not.

@item (vector @var{element-types}@dots{})
Like @code{list} except that the value must be a vector instead of a
list.  The elements work the same as in @code{list}.

@item (alist :key-type @var{key-type} :value-type @var{value-type})
The value must be a list of cons-cells, the @sc{car} of each cell
representing a key of customization type @var{key-type}, and the
@sc{cdr} of the same cell representing a value of customization type
@var{value-type}.  The user can add and delete key/value pairs, and
edit both the key and the value of each pair.

If omitted, @var{key-type} and @var{value-type} default to
@code{sexp}.

The user can add any key matching the specified key type, but you can
give some keys a preferential treatment by specifying them with the
@code{:options} (see @ref{Variable Definitions}).  The specified keys
will always be shown in the customize buffer (together with a suitable
value), with a checkbox to include or exclude or disable the key/value
pair from the alist.  The user will not be able to edit the keys
specified by the @code{:options} keyword argument.

The argument to the @code{:options} keywords should be a list of
specifications for reasonable keys in the alist.  Ordinarily, they are
simply atoms, which stand for themselves.  For example:

@example
:options '("foo" "bar" "baz")
@end example

@noindent
specifies that there are three known keys, namely @code{"foo"},
@code{"bar"} and @code{"baz"}, which will always be shown first.

You may want to restrict the value type for specific keys, for
example, the value associated with the @code{"bar"} key can only be an
integer.  You can specify this by using a list instead of an atom in
the list.  The first element will specify the key, like before, while
the second element will specify the value type.  For example:

@example
:options '("foo" ("bar" integer) "baz")
@end example

Finally, you may want to change how the key is presented.  By default,
the key is simply shown as a @code{const}, since the user cannot change
the special keys specified with the @code{:options} keyword.  However,
you may want to use a more specialized type for presenting the key, like
@code{function-item} if you know it is a symbol with a function binding.
This is done by using a customization type specification instead of a
symbol for the key.

@example
:options '("foo"
           ((function-item some-function) integer)
           "baz")
@end example

Many alists use lists with two elements, instead of cons cells.  For
example,

@example
(defcustom list-alist
  '(("foo" 1) ("bar" 2) ("baz" 3))
  "Each element is a list of the form (KEY VALUE).")
@end example

@noindent
instead of

@example
(defcustom cons-alist
  '(("foo" . 1) ("bar" . 2) ("baz" . 3))
  "Each element is a cons-cell (KEY . VALUE).")
@end example

Because of the way lists are implemented on top of cons cells, you can
treat @code{list-alist} in the example above as a cons cell alist, where
the value type is a list with a single element containing the real
value.

@example
(defcustom list-alist '(("foo" 1) ("bar" 2) ("baz" 3))
  "Each element is a list of the form (KEY VALUE)."
  :type '(alist :value-type (group integer)))
@end example

The @code{group} widget is used here instead of @code{list} only because
the formatting is better suited for the purpose.

Similarly, you can have alists with more values associated with each
key, using variations of this trick:

@example
(defcustom person-data '(("brian"  50 t)
                         ("dorith" 55 nil)
                         ("ken"    52 t))
  "Alist of basic info about people.
Each element has the form (NAME AGE MALE-FLAG)."
  :type '(alist :value-type (group integer boolean)))
@end example

@item (plist :key-type @var{key-type} :value-type @var{value-type})
This customization type is similar to @code{alist} (see above), except
that (i) the information is stored as a property list,
(@pxref{Property Lists}), and (ii) @var{key-type}, if omitted,
defaults to @code{symbol} rather than @code{sexp}.

@item (choice @var{alternative-types}@dots{})
The value must fit one of @var{alternative-types}.  For example,
@code{(choice integer string)} allows either an integer or a string.

In the customization buffer, the user selects an alternative
using a menu, and can then edit the value in the usual way for that
alternative.

Normally the strings in this menu are determined automatically from the
choices; however, you can specify different strings for the menu by
including the @code{:tag} keyword in the alternatives.  For example, if
an integer stands for a number of spaces, while a string is text to use
verbatim, you might write the customization type this way,

@example
(choice (integer :tag "Number of spaces")
        (string :tag "Literal text"))
@end example

@noindent
so that the menu offers @samp{Number of spaces} and @samp{Literal text}.

In any alternative for which @code{nil} is not a valid value, other than
a @code{const}, you should specify a valid default for that alternative
using the @code{:value} keyword.  @xref{Type Keywords}.

If some values are covered by more than one of the alternatives,
customize will choose the first alternative that the value fits.  This
means you should always list the most specific types first, and the
most general last.  Here's an example of proper usage:

@example
(choice (const :tag "Off" nil)
        symbol (sexp :tag "Other"))
@end example

@noindent
This way, the special value @code{nil} is not treated like other
symbols, and symbols are not treated like other Lisp expressions.

@cindex radio, customization types
@item (radio @var{element-types}@dots{})
This is similar to @code{choice}, except that the choices are displayed
using radio buttons rather than a menu.  This has the advantage of
displaying documentation for the choices when applicable and so is often
a good choice for a choice between constant functions
(@code{function-item} customization types).

@item (const @var{value})
The value must be @var{value}---nothing else is allowed.

The main use of @code{const} is inside of @code{choice}.  For example,
@code{(choice integer (const nil))} allows either an integer or
@code{nil}.

@code{:tag} is often used with @code{const}, inside of @code{choice}.
For example,

@example
(choice (const :tag "Yes" t)
        (const :tag "No" nil)
        (const :tag "Ask" foo))
@end example

@noindent
describes a variable for which @code{t} means yes, @code{nil} means no,
and @code{foo} means ``ask''.

@item (other @var{value})
This alternative can match any Lisp value, but if the user chooses this
alternative, that selects the value @var{value}.

The main use of @code{other} is as the last element of @code{choice}.
For example,

@example
(choice (const :tag "Yes" t)
        (const :tag "No" nil)
        (other :tag "Ask" foo))
@end example

@noindent
describes a variable for which @code{t} means yes, @code{nil} means no,
and anything else means ``ask''.  If the user chooses @samp{Ask} from
the menu of alternatives, that specifies the value @code{foo}; but any
other value (not @code{t}, @code{nil} or @code{foo}) displays as
@samp{Ask}, just like @code{foo}.

@item (function-item @var{function})
Like @code{const}, but used for values which are functions.  This
displays the documentation string as well as the function name.
The documentation string is either the one you specify with
@code{:doc}, or @var{function}'s own documentation string.

@item (variable-item @var{variable})
Like @code{const}, but used for values which are variable names.  This
displays the documentation string as well as the variable name.  The
documentation string is either the one you specify with @code{:doc}, or
@var{variable}'s own documentation string.

@item (set @var{types}@dots{})
The value must be a list, and each element of the list must match one of
the @var{types} specified.

This appears in the customization buffer as a checklist, so that each of
@var{types} may have either one corresponding element or none.  It is
not possible to specify two different elements that match the same one
of @var{types}.  For example, @code{(set integer symbol)} allows one
integer and/or one symbol in the list; it does not allow multiple
integers or multiple symbols.  As a result, it is rare to use
nonspecific types such as @code{integer} in a @code{set}.

Most often, the @var{types} in a @code{set} are @code{const} types, as
shown here:

@example
(set (const :bold) (const :italic))
@end example

Sometimes they describe possible elements in an alist:

@example
(set (cons :tag "Height" (const height) integer)
     (cons :tag "Width" (const width) integer))
@end example

@noindent
That lets the user specify a height value optionally
and a width value optionally.

@item (repeat @var{element-type})
The value must be a list and each element of the list must fit the type
@var{element-type}.  This appears in the customization buffer as a
list of elements, with @samp{[INS]} and @samp{[DEL]} buttons for adding
more elements or removing elements.

@cindex restricted-sexp, customization types
@item (restricted-sexp :match-alternatives @var{criteria})
This is the most general composite type construct.  The value may be
any Lisp object that satisfies one of @var{criteria}.  @var{criteria}
should be a list, and each element should be one of these
possibilities:

@itemize @bullet
@item
A predicate---that is, a function of one argument that returns either
@code{nil} or non-@code{nil} according to the argument.  Using a
predicate in the list says that objects for which the predicate
returns non-@code{nil} are acceptable.

@item
A quoted constant---that is, @code{'@var{object}}.  This sort of element
in the list says that @var{object} itself is an acceptable value.
@end itemize

For example,

@example
(restricted-sexp :match-alternatives
                 (integerp 't 'nil))
@end example

@noindent
allows integers, @code{t} and @code{nil} as legitimate values.

The customization buffer shows all legitimate values using their read
syntax, and the user edits them textually.
@end table

  Here is a table of the keywords you can use in keyword-value pairs
in a composite type:

@table @code
@item :tag @var{tag}
Use @var{tag} as the name of this alternative, for user communication
purposes.  This is useful for a type that appears inside of a
@code{choice}.

@item :match-alternatives @var{criteria}
@kindex match-alternatives@r{, customization keyword}
Use @var{criteria} to match possible values.  This is used only in
@code{restricted-sexp}.

@item :args @var{argument-list}
@kindex args@r{, customization keyword}
Use the elements of @var{argument-list} as the arguments of the type
construct.  For instance, @code{(const :args (foo))} is equivalent to
@code{(const foo)}.  You rarely need to write @code{:args} explicitly,
because normally the arguments are recognized automatically as
whatever follows the last keyword-value pair.
@end table

@node Splicing into Lists
@subsection Splicing into Lists

  The @code{:inline} feature lets you splice a variable number of
elements into the middle of a @code{list} or @code{vector}
customization type.  You use it by adding @code{:inline t} to a type
specification which is contained in a @code{list} or @code{vector}
specification.

  Normally, each entry in a @code{list} or @code{vector} type
specification describes a single element type.  But when an entry
contains @code{:inline t}, the value it matches is merged directly
into the containing sequence.  For example, if the entry matches a
list with three elements, those become three elements of the overall
sequence.  This is analogous to @samp{,@@} in a backquote construct
(@pxref{Backquote}).

  For example, to specify a list whose first element must be @code{baz}
and whose remaining arguments should be zero or more of @code{foo} and
@code{bar}, use this customization type:

@example
(list (const baz) (set :inline t (const foo) (const bar)))
@end example

@noindent
This matches values such as @code{(baz)}, @code{(baz foo)}, @code{(baz bar)}
and @code{(baz foo bar)}.

@cindex choice, customization types
  When the element-type is a @code{choice}, you use @code{:inline} not
in the @code{choice} itself, but in (some of) the alternatives of the
@code{choice}.  For example, to match a list which must start with a
file name, followed either by the symbol @code{t} or two strings, use
this customization type:

@example
(list file
      (choice (const t)
              (list :inline t string string)))
@end example

@noindent
If the user chooses the first alternative in the choice, then the
overall list has two elements and the second element is @code{t}.  If
the user chooses the second alternative, then the overall list has three
elements and the second and third must be strings.

@node Type Keywords
@subsection Type Keywords

You can specify keyword-argument pairs in a customization type after the
type name symbol.  Here are the keywords you can use, and their
meanings:

@table @code
@item :value @var{default}
Provide a default value.

If @code{nil} is not a valid value for the alternative, then it is
essential to specify a valid default with @code{:value}.

If you use this for a type that appears as an alternative inside of
@code{choice}; it specifies the default value to use, at first, if and
when the user selects this alternative with the menu in the
customization buffer.

Of course, if the actual value of the option fits this alternative, it
will appear showing the actual value, not @var{default}.

@item :format @var{format-string}
@kindex format@r{, customization keyword}
This string will be inserted in the buffer to represent the value
corresponding to the type.  The following @samp{%} escapes are available
for use in @var{format-string}:

@table @samp
@item %[@var{button}%]
Display the text @var{button} marked as a button.  The @code{:action}
attribute specifies what the button will do if the user invokes it;
its value is a function which takes two arguments---the widget which
the button appears in, and the event.

There is no way to specify two different buttons with different
actions.

@item %@{@var{sample}%@}
Show @var{sample} in a special face specified by @code{:sample-face}.

@item %v
Substitute the item's value.  How the value is represented depends on
the kind of item, and (for variables) on the customization type.

@item %d
Substitute the item's documentation string.

@item %h
Like @samp{%d}, but if the documentation string is more than one line,
add a button to control whether to show all of it or just the first line.

@item %t
Substitute the tag here.  You specify the tag with the @code{:tag}
keyword.

@item %%
Display a literal @samp{%}.
@end table

@item :action @var{action}
@kindex action@r{, customization keyword}
Perform @var{action} if the user clicks on a button.

@item :button-face @var{face}
@kindex button-face@r{, customization keyword}
Use the face @var{face} (a face name or a list of face names) for button
text displayed with @samp{%[@dots{}%]}.

@item :button-prefix @var{prefix}
@itemx :button-suffix @var{suffix}
@kindex button-prefix@r{, customization keyword}
@kindex button-suffix@r{, customization keyword}
These specify the text to display before and after a button.
Each can be:

@table @asis
@item @code{nil}
No text is inserted.

@item a string
The string is inserted literally.

@item a symbol
The symbol's value is used.
@end table

@item :tag @var{tag}
Use @var{tag} (a string) as the tag for the value (or part of the value)
that corresponds to this type.

@item :doc @var{doc}
@kindex doc@r{, customization keyword}
Use @var{doc} as the documentation string for this value (or part of the
value) that corresponds to this type.  In order for this to work, you
must specify a value for @code{:format}, and use @samp{%d} or @samp{%h}
in that value.

The usual reason to specify a documentation string for a type is to
provide more information about the meanings of alternatives inside a
@code{:choice} type or the parts of some other composite type.

@item :help-echo @var{motion-doc}
@kindex help-echo@r{, customization keyword}
When you move to this item with @code{widget-forward} or
@code{widget-backward}, it will display the string @var{motion-doc} in
the echo area.  In addition, @var{motion-doc} is used as the mouse
@code{help-echo} string and may actually be a function or form evaluated
to yield a help string.  If it is a function, it is called with one
argument, the widget.

@item :match @var{function}
@kindex match@r{, customization keyword}
Specify how to decide whether a value matches the type.  The
corresponding value, @var{function}, should be a function that accepts
two arguments, a widget and a value; it should return non-@code{nil} if
the value is acceptable.

@item :validate @var{function}
Specify a validation function for input.  @var{function} takes a
widget as an argument, and should return @code{nil} if the widget's
current value is valid for the widget.  Otherwise, it should return
the widget containing the invalid data, and set that widget's
@code{:error} property to a string explaining the error.

@ignore
@item :indent @var{columns}
Indent this item by @var{columns} columns.  The indentation is used for
@samp{%n}, and automatically for group names, for checklists and radio
buttons, and for editable lists.  It affects the whole of the
item except for the first line.

@item :offset @var{extra}
Indent the subitems of this item @var{extra} columns more than this
item itself.  By default, subitems are indented the same as their
parent.

@item :extra-offset @var{n}
Add @var{n} extra spaces to this item's indentation, compared to its
parent's indentation.

@item :notify @var{function}
Call @var{function} each time the item or a subitem is changed.  The
function gets two or three arguments.  The first argument is the item
itself, the second argument is the item that was changed, and the
third argument is the event leading to the change, if any.

@item :menu-tag @var{tag-string}
Use @var{tag-string} in the menu when the widget is used as an option
in a @code{menu-choice} widget.

@item :menu-tag-get
A function used for finding the tag when the widget is used as an option
in a @code{menu-choice} widget.  By default, the tag used will be either the
@code{:menu-tag} or @code{:tag} property if present, or the @code{princ}
representation of the @code{:value} property if not.

@item :tab-order
Specify the order in which widgets are traversed with
@code{widget-forward} or @code{widget-backward}.  This is only partially
implemented.

@enumerate a
@item
Widgets with tabbing order @code{-1} are ignored.

@item
(Unimplemented) When on a widget with tabbing order @var{n}, go to the
next widget in the buffer with tabbing order @var{n+1} or @code{nil},
whichever comes first.

@item
When on a widget with no tabbing order specified, go to the next widget
in the buffer with a positive tabbing order, or @code{nil}
@end enumerate

@item :parent
The parent of a nested widget (e.g., a @code{menu-choice} item or an
element of a @code{editable-list} widget).

@item :sibling-args
This keyword is only used for members of a @code{radio-button-choice} or
@code{checklist}.  The value should be a list of extra keyword
arguments, which will be used when creating the @code{radio-button} or
@code{checkbox} associated with this item.
@end ignore
@end table

@node Defining New Types
@subsection Defining New Types
@cindex customization types, define new
@cindex define new customization types

In the previous sections we have described how to construct elaborate
type specifications for @code{defcustom}.  In some cases you may want
to give such a type specification a name.  The obvious case is when
you are using the same type for many user options: rather than repeat
the specification for each option, you can give the type specification
a name, and use that name each @code{defcustom}.  The other case is
when a user option's value is a recursive data structure.  To make it
possible for a datatype to refer to itself, it needs to have a name.

Since custom types are implemented as widgets, the way to define a new
customize type is to define a new widget.  We are not going to describe
the widget interface here in details, see @ref{Top, , Introduction,
widget, The Emacs Widget Library}, for that.  Instead we are going to
demonstrate the minimal functionality needed for defining new customize
types by a simple example.

@example
(define-widget 'binary-tree-of-string 'lazy
  "A binary tree made of cons-cells and strings."
  :offset 4
  :tag "Node"
  :type '(choice (string :tag "Leaf" :value "")
                 (cons :tag "Interior"
                       :value ("" . "")
                       binary-tree-of-string
                       binary-tree-of-string)))

(defcustom foo-bar ""
  "Sample variable holding a binary tree of strings."
  :type 'binary-tree-of-string)
@end example

The function to define a new widget is called @code{define-widget}.  The
first argument is the symbol we want to make a new widget type.  The
second argument is a symbol representing an existing widget, the new
widget is going to be defined in terms of difference from the existing
widget.  For the purpose of defining new customization types, the
@code{lazy} widget is perfect, because it accepts a @code{:type} keyword
argument with the same syntax as the keyword argument to
@code{defcustom} with the same name.  The third argument is a
documentation string for the new widget.  You will be able to see that
string with the @kbd{M-x widget-browse @key{RET} binary-tree-of-string
@key{RET}} command.

After these mandatory arguments follow the keyword arguments.  The most
important is @code{:type}, which describes the data type we want to match
with this widget.  Here a @code{binary-tree-of-string} is described as
being either a string, or a cons-cell whose car and cdr are themselves
both @code{binary-tree-of-string}.  Note the reference to the widget
type we are currently in the process of defining.  The @code{:tag}
attribute is a string to name the widget in the user interface, and the
@code{:offset} argument is there to ensure that child nodes are
indented four spaces relative to the parent node, making the tree
structure apparent in the customization buffer.

The @code{defcustom} shows how the new widget can be used as an ordinary
customization type.

The reason for the name @code{lazy} is that the other composite
widgets convert their inferior widgets to internal form when the
widget is instantiated in a buffer.  This conversion is recursive, so
the inferior widgets will convert @emph{their} inferior widgets.  If
the data structure is itself recursive, this conversion is an infinite
recursion.  The @code{lazy} widget prevents the recursion: it convert
its @code{:type} argument only when needed.

@node Applying Customizations
@section Applying Customizations
@cindex applying customizations

The following functions are responsible for installing the user's
customization settings for variables and faces, respectively.  When
the user invokes @samp{Save for future sessions} in the Customize
interface, that takes effect by writing a @code{custom-set-variables}
and/or a @code{custom-set-faces} form into the custom file, to be
evaluated the next time Emacs starts.

@defun custom-set-variables &rest args
This function installs the variable customizations specified by
@var{args}.  Each argument in @var{args} should have the form

@example
(@var{var} @var{expression} [@var{now} [@var{request} [@var{comment}]]])
@end example

@noindent
@var{var} is a variable name (a symbol), and @var{expression} is an
expression which evaluates to the desired customized value.

If the @code{defcustom} form for @var{var} has been evaluated prior to
this @code{custom-set-variables} call, @var{expression} is immediately
evaluated, and the variable's value is set to the result.  Otherwise,
@var{expression} is stored into the variable's @code{saved-value}
property, to be evaluated when the relevant @code{defcustom} is called
(usually when the library defining that variable is loaded into
Emacs).

The @var{now}, @var{request}, and @var{comment} entries are for
internal use only, and may be omitted.  @var{now}, if non-@code{nil},
means to set the variable's value now, even if the variable's
@code{defcustom} form has not been evaluated.  @var{request} is a list
of features to be loaded immediately (@pxref{Named Features}).
@var{comment} is a string describing the customization.
@end defun

@defun custom-set-faces &rest args
This function installs the face customizations specified by
@var{args}.  Each argument in @var{args} should have the form

@example
(@var{face} @var{spec} [@var{now} [@var{comment}]])
@end example

@noindent
@var{face} is a face name (a symbol), and @var{spec} is the customized
face specification for that face (@pxref{Defining Faces}).

The @var{now} and @var{comment} entries are for internal use only, and
may be omitted.  @var{now}, if non-@code{nil}, means to install the
face specification now, even if the @code{defface} form has not been
evaluated.  @var{comment} is a string describing the customization.
@end defun

@node Custom Themes
@section Custom Themes

@cindex custom themes
  @dfn{Custom themes} are collections of settings that can be enabled
or disabled as a unit.  @xref{Custom Themes,,, emacs, The GNU Emacs
Manual}.  Each Custom theme is defined by an Emacs Lisp source file,
which should follow the conventions described in this section.
(Instead of writing a Custom theme by hand, you can also create one
using a Customize-like interface; @pxref{Creating Custom Themes,,,
emacs, The GNU Emacs Manual}.)

  A Custom theme file should be named @file{@var{foo}-theme.el}, where
@var{foo} is the theme name.  The first Lisp form in the file should
be a call to @code{deftheme}, and the last form should be a call to
@code{provide-theme}.

@defmac deftheme theme &optional doc
This macro declares @var{theme} (a symbol) as the name of a Custom
theme.  The optional argument @var{doc} should be a string describing
the theme; this is the description shown when the user invokes the
@code{describe-theme} command or types @kbd{?} in the @samp{*Custom
Themes*} buffer.

Two special theme names are disallowed (using them causes an error):
@code{user} is a dummy theme that stores the user's direct
customization settings, and @code{changed} is a dummy theme that
stores changes made outside of the Customize system.
@end defmac

@defmac provide-theme theme
This macro declares that the theme named @var{theme} has been fully
specified.
@end defmac

  In between @code{deftheme} and @code{provide-theme} are Lisp forms
specifying the theme settings: usually a call to
@code{custom-theme-set-variables} and/or a call to
@code{custom-theme-set-faces}.

@defun custom-theme-set-variables theme &rest args
This function specifies the Custom theme @var{theme}'s variable
settings.  @var{theme} should be a symbol.  Each argument in
@var{args} should be a list of the form

@example
(@var{var} @var{expression} [@var{now} [@var{request} [@var{comment}]]])
@end example

@noindent
where the list entries have the same meanings as in
@code{custom-set-variables}.  @xref{Applying Customizations}.
@end defun

@defun custom-theme-set-faces theme &rest args
This function specifies the Custom theme @var{theme}'s face settings.
@var{theme} should be a symbol.  Each argument in @var{args} should be
a list of the form

@example
(@var{face} @var{spec} [@var{now} [@var{comment}]])
@end example

@noindent
where the list entries have the same meanings as in
@code{custom-set-faces}.  @xref{Applying Customizations}.
@end defun

  In theory, a theme file can also contain other Lisp forms, which
would be evaluated when loading the theme, but that is bad form.
To protect against loading themes containing malicious code, Emacs
displays the source file and asks for confirmation from the user
before loading any non-built-in theme for the first time.  As
such, themes are not ordinarily byte-compiled, and source files
always take precedence when Emacs is looking for a theme to load.

  The following functions are useful for programmatically enabling and
disabling themes:

@defun custom-theme-p theme
This function return a non-@code{nil} value if @var{theme} (a symbol)
is the name of a Custom theme (i.e., a Custom theme which has been
loaded into Emacs, whether or not the theme is enabled).  Otherwise,
it returns @code{nil}.
@end defun

@defvar custom-known-themes
The value of this variable is a list of themes loaded into Emacs.
Each theme is represented by a Lisp symbol (the theme name).  The
default value of this variable is a list containing two dummy
themes: @code{(user changed)}.  The @code{changed} theme stores
settings made before any Custom themes are applied (e.g., variables
set outside of Customize).  The @code{user} theme stores settings the
user has customized and saved.  Any additional themes declared with
the @code{deftheme} macro are added to the front of this list.
@end defvar

@deffn Command load-theme theme &optional no-confirm no-enable
This function loads the Custom theme named @var{theme} from its source
file, looking for the source file in the directories specified by the
variable @code{custom-theme-load-path}.  @xref{Custom Themes,,, emacs,
The GNU Emacs Manual}.  It also @dfn{enables} the theme (unless the
optional argument @var{no-enable} is non-@code{nil}), causing its
variable and face settings to take effect.  It prompts the user for
confirmation before loading the theme, unless the optional argument
@var{no-confirm} is non-@code{nil}.
@end deffn

@deffn Command enable-theme theme
This function enables the Custom theme named @var{theme}.  It signals
an error if no such theme has been loaded.
@end deffn

@deffn Command disable-theme theme
This function disables the Custom theme named @var{theme}.  The theme
remains loaded, so that a subsequent call to @code{enable-theme} will
re-enable it.
@end deffn
