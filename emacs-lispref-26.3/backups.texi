@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1999, 2001-2019 Free Software Foundation,
@c Inc.
@c See the file elisp.texi for copying conditions.
@node Backups and Auto-Saving
@chapter Резервные Копии и Автосохранение
@cindex backups and auto-saving

  Файлы резервного копирования и файлы автосохранения - это два метода, с
помощью которых Emacs пытается защитить пользователя от последствий сбоев
или собственных ошибок пользователя.  Автосохранение сохраняет текст,
сделанный ранее в текущем сеансе редактирования; файлы резервных копий
сохраняют содержимое файла до текущего сеанса.

@menu
* Backup Files::   Как создаются резервные копии файлов; как выбираются
                       их имена.
* Auto-Saving::    Как создаются файлы автосохранения; как выбираются
                       их имена.
* Reverting::      @code{revert-buffer}, и как настроить то, что оно делает.
@end menu

@node Backup Files
@section Резервные Файлы
@cindex backup file

  @dfn{Резервный файл} - это копия старого содержимого файла, который
редактируется.  Emacs создает файл резервной копии, когда в первый раз
сохраняется буфер в посещенный файл.  Таким образом, обычно файл резервной
копии содержит содержимое файла, которое было до текущего сеанса
редактирования.  Содержимое файла резервной копии обычно остается неизменным
после того, как он создан.

  Резервное копирование обычно выполняется путем переименования посещенного
файла в новое имя.  При желании можно указать, что файлы резервных копий
должны создаваться путем копирования посещенного файла.  Этот выбор имеет
значение для файлов с несколькими именами; это также может повлиять на то,
останется ли отредактированный файл принадлежащим первоначальному владельцу
или станет владельцем редактирующего его пользователя.

  По умолчанию Emacs создает отдельный файл резервной копии для каждого
редактируемого файла.  Также можно запросить нумерованные резервные копии;
тогда каждый новый файл резервной копии получает новое имя.  Можно удалить
старые пронумерованные резервные копии, если они больше не нужны, или Emacs
может удалить их автоматически.

  Для повышения производительности операционная система может не записывать
содержимое файла резервной копии во вторичное хранилище сразу или может
связывать данные резервной копии с оригиналом до тех пор, пока одно или
другое не будет изменено позже.  @xref{Files and Storage}.

@menu
* Making Backups::     Как Emacs создает резервные копии файлов и когда.
* Rename or Copy::     Две альтернативы: переименование старого файла или
                          его копирование.
* Numbered Backups::   Хранение нескольких резервных копий для
                          каждого исходного файла.
* Backup Names::       Как вычисляются имена файлов резервных копий;
                          настройка.
@end menu

@node Making Backups
@subsection Создание Резервных Файлов
@cindex making backup files

@defun backup-buffer
  Функция при необходимости делает резервную копию файла, который посещает
текущий буфер.  Вызывается @code{save-buffer} перед первым сохранением
буфера.

Если резервная копия была сделана путем переименования, возвращаемое
значение - это cons-ячейка вида
(@var{modes} @var{extra-alist} @var{backupname}), где @var{mode} - биты
режима исходного файла, а возвращаемый @code{file-modes}
(@pxref{Testing Accessibility}), @var{extra-alist} - это список, описывающий
расширенные атрибуты исходного файла, как @code{file-extended-attributes}
(@pxref{Extended Attributes}), и @var{backupname} возвращает имя резервной
копии.

Во всех остальных случаях (то есть если резервная копия была сделана путем
копирования или если резервная копия не была сделана), функция возвращает
@code{nil}.
@end defun

@defvar buffer-backed-up
  Эта локальная в буфере переменная сообщает, было ли выполнено резервное
копирование файла этого буфера с учетом этого буфера.  Если это
не-@code{nil}, файл резервной копии был записан.  В противном случае при
следующем сохранении файла следует создать резервную копию (если резервное
копирование включено).  Это постоянная локальная переменная;
@code{kill-all-local-variables} не изменяет @tie{}.
@end defvar

@defopt make-backup-files
Эта переменная определяет, нужно ли создавать резервные копии файлов.  Если
это не-@code{nil}, то Emacs создает резервную копию каждого файла при его
первом сохранении - при условии, что @code{backup-inhibited} равен
@code{nil} (смотреть ниже).

В следующем примере показано, как изменить переменную
@code{make-backup-files} только в буферах Rmail, а не где-либо еще.
Установка @code{nil} останавливает Emacs от создания резервных копий этих
файлов, что может сэкономить место на диске.  (Потребуется поместить этот
код в свой файл инициализации.)

@smallexample
@group
(add-hook 'rmail-mode-hook
          (lambda () (setq-local make-backup-files nil)))
@end group
@end smallexample
@end defopt

@defvar backup-enable-predicate
Значение этой переменной - это функция, которая вызывается в определенных
случаях, чтобы решить, должен ли файл иметь файлы резервных копий.  Функция
получает один аргумент - абсолютное имя файла для рассмотрения.  Если
функция возвращает @code{nil}, резервное копирование для этого файла
отключено.  В противном случае другие переменные в этом разделе говорят,
нужно ли и как делать резервные копии.

@findex normal-backup-enable-predicate
Значение по умолчанию - @code{normal-backup-enable-predicate}, которое
проверяет файлы в @code{temporary-file-directory} и
@code{small-temporary-file-directory}.
@end defvar

@defvar backup-inhibited
Если эта переменная - не-@code{nil}, резервное копирование запрещено.
Записывает результат тестирования @code{backup-enable-predicate} по имени
посещенного файла.  Её также могут согласованно использовать другие
механизмы, запрещающие резервное копирование в зависимости от того, какой
файл посещается.  Например, VC устанавливает эту переменную в не-@code{nil}
для предотвращения резервного копирования файлов, управляемых системой
контроля версий.

Это постоянный локальный режим, поэтому изменение основного режима не теряет
своего значения.  Основные режимы не должны устанавливать эту переменную -
вместо этого они должны устанавливать @code{make-backup-files}.
@end defvar

@defopt backup-directory-alist
Значение этой переменной представляет собой список шаблонов имен файлов и
каталогов резервных копий.  Каждый элемент выглядит как
@smallexample
(@var{regexp} . @var{directory})
@end smallexample

@noindent
Резервные копии файлов с именами, соответствующими @var{regexp}, будут
производиться в @var{directory}.  @var{directory} может быть относительным
или абсолютным значением.  Если это абсолютное значение, так что все
совпадающие файлы копируются в один и тот же каталог, имена файлов в этом
каталоге будут полным именем файла, для которого создана резервная копия,
со всеми разделителями каталогов, измененными на @samp{!} для предотвращения
конфликтов.  Это не будет работать правильно, если ваша файловая система
усекает полученное имя.

В общем случае, когда все резервные копии идут в один каталог, список должен
содержать единственную пару элементов @samp{"."} с соответствующим
каталогом.

Если эта переменная - @code{nil} (по умолчанию) или имя файла не совпадает,
резервная копия создается в каталоге исходного файла.

В файловых системах MS-DOS без длинных имен эта переменная всегда
игнорируется.
@end defopt

@defopt make-backup-file-name-function
Значение этой переменной - это функция, которая используется для создания
имен файлов резервных копий.  Её вызывает функция
@code{make-backup-file-name}.  @xref{Backup Names,, Naming Backup Files}.

Это может быть локальный буфер, чтобы делать что-то особенное для
определенных файлов.  Если его изменить, может потребоваться также изменить
@code{backup-file-name-p} и @code{file-name-sans-versions}.
@end defopt


@node Rename or Copy
@subsection Резервное Копирование Путем Переименования или Копирование?
@cindex backup files, rename or copy

  Emacs может сделать файл резервной копии двумя способами.:

@itemize @bullet
@item
Emacs может переименовать исходный файл, чтобы он стал файлом резервной
копии, а затем записать сохраняемый буфер в новый файл.  После этой
процедуры любые другие имена (то есть жесткие ссылки) исходного файла теперь
относятся к файлу резервной копии.  Новый файл принадлежит пользователю,
выполняющему редактирование, и его группа по умолчанию используется для
новых файлов, записанных пользователем в этом каталоге.

@item
Emacs может скопировать исходный файл в файл резервной копии, а затем
перезаписать исходный файл новым содержимым.  После этой процедуры любые
другие имена (то есть жесткие ссылки) исходного файла продолжают ссылаться
на текущую (обновленную) версию файла. Владелец и группа файла не изменятся.
@end itemize

  По умолчанию используется первый метод - переименование.

  Переменная @code{backup-by-copying}, если не-@code{nil}, говорит об
использовании второго метода, который заключается в копировании исходного
файла и перезаписи его новым содержимым буфера.  Переменная
@code{file-precious-flag}, если не-@code{nil}, также имеет этот эффект (как
побочный эффект от ее основного значения).  @xref{Saving Buffers}.

@defopt backup-by-copying
Если эта переменная - не-@code{nil}, Emacs всегда создает резервные копии
файлов путем копирования.  По умолчанию @code{nil}.
@end defopt

  Следующие три переменные, когда не-@code{nil}, вызывают использование
второго метода в определенных особых случаях.  Они не влияют на обработку
файлов, не относящихся к особым случаям.

@defopt backup-by-copying-when-linked
Если эта переменная - не-@code{nil}, Emacs создает резервные копии, копируя
файлы с несколькими именами (жесткие ссылки).  По умолчанию @code{nil}.

Эта переменная имеет значение, только если @code{backup-by-copying} -
@code{nil}, поскольку всегда используется копирование, если эта переменная -
не-@code{nil}.
@end defopt

@defopt backup-by-copying-when-mismatch
Если эта переменная - не-@code{nil} (по умолчанию), Emacs создает резервные
копии путем копирования в тех случаях, когда переименование изменило бы
владельца или группу файла.

Значение не влияет, если переименование не изменит владельца или группу
файла; то есть для файлов, которые принадлежат пользователю и чья группа
совпадает со значением по умолчанию для нового файла, созданного там
пользователем.

Переменная имеет значение, только если @code{backup-by-copying} -
@code{nil}, поскольку всегда используется копирование, если эта переменная -
не-@code{nil}.
@end defopt

@defopt backup-by-copying-when-privileged-mismatch
Переменная, если не-@code{nil}, задает то же поведение, что и
@code{backup-by-copying-when-mismatch}, но только для определенных значений
идентификатора пользователя: а именно, тех, которые меньше или равны
определенному числу.  Устанавливается эта переменная в это число.

Таким образом, если установить
@code{backup-by-copying-when-privileged-mismatch} равным 0, резервное
копирование будет выполняться только для суперпользователя, когда это
необходимо для предотвращения смены владельца файла.

По умолчанию 200.
@end defopt

@node Numbered Backups
@subsection Создание и Удаление Пронумерованных Файлов Резервных Копий
@cindex numbered backups

  Если имя файла - @file{foo}, то имена его пронумерованных версий резервной
копии - @file{foo.~@var{v}~}, для различных целых чисел @var{v}, например:
@file{foo.~1~}, @file{foo.~2~}, @file{foo.~3~}, @dots{}, @file{foo.~259~} и
так далее.

@defopt version-control
Эта переменная определяет, следует ли создавать один ненумерованный файл
резервной копии или несколько нумерованных резервных копий.

@table @asis
@item @code{nil}
Сделайте пронумерованные резервные копии, если посещенный файл уже имеет
пронумерованные резервные копии; в противном случае - нет.  Это значение по
умолчанию.

@item @code{never}
Не делайть нумерованные резервные копии.

@item @var{anything else}
Сделать пронумерованные резервные копии.
@end table
@end defopt

  Использование нумерованных резервных копий в конечном итоге приводит к
появлению большого количества версий резервных копий, которые затем
необходимо удалить.  Emacs может сделать это автоматически или может
спросить пользователя, удалить ли их.

@defopt kept-new-versions
Значение этой переменной - это количество последних версий, которые
необходимо сохранить при создании новой пронумерованной резервной копии.
Вновь созданная резервная копия включается в подсчет. Значение по умолчанию
- @tie{}2.
@end defopt

@defopt kept-old-versions
Значение этой переменной - количество самых старых версий, которые
необходимо сохранить при создании новой пронумерованной резервной копии.
Значение по умолчанию - @tie{}2.
@end defopt

  Если есть резервные копии с номером 1, 2, 3, 5 и 7, и обе эти переменные
имеют значение 2, то резервные копии с номерами 1 и 2 сохраняются как старые
версии, а те, что имеют номера 5 и 7, как новые версии; резервная версия 3
избыточна.  Функция @code{find-backup-file-name} (@pxref{Backup Names})
отвечает за определение удаляемых версий резервных копий, но не удаляет их
сама.

@defopt delete-old-versions
Если эта переменная - @code{t}, то при сохранении файла лишние версии
резервной копии автоматически удаляются.  Если @code{nil}, это означает, что
перед удалением лишних резервных копий нужно запрашивать подтверждение.  В
противном случае они вообще не удаляются.
@end defopt

@defopt dired-kept-versions
Эта переменная указывает, сколько новейших версий резервных копий следует
хранить в команде Dired @kbd{.} (@code{dired-clean-directory}).  Это то же
самое, что @code{kept-new-versions} указывает при создании нового файла
резервной копии.  По умолчанию - @tie{}2.
@end defopt

@node Backup Names
@subsection Именование Файлов Резервных Копий
@cindex naming backup files

  Функции в этом разделе документированы главным образом потому, что можно
настроить соглашения об именах для файлов резервных копий, переопределив их.
Если изменить одно, вероятно, придется изменить остальное.

@defun backup-file-name-p filename
Функция возвращает значение не-@code{nil}, если @var{filename} - возможное
имя для файла резервной копии.  Просто проверяет имя, а не существование
файла с именем @var{filename}.

@smallexample
@group
(backup-file-name-p "foo")
     @result{} nil
@end group
@group
(backup-file-name-p "foo~")
     @result{} 3
@end group
@end smallexample

Стандартное определение этой функции следующее:

@smallexample
@group
(defun backup-file-name-p (file)
  "Возвращает ненулевое значение, если FILE является файлом резервной копии \
имя (числовое или нет)..."
  (string-match "~\\'" file))
@end group
@end smallexample

@noindent
Таким образом, функция возвращает значение не-@code{nil}, если имя файла
заканчивается на @samp{~}.  (Используется обратная косая черта, чтобы
разделить первую строку строки документации на две строки в тексте, но
создаеётся только одна строка в самой строке.)

Это простое выражение помещено в отдельную функцию, чтобы его было легко
переопределить для настройки.
@end defun

@defun make-backup-file-name filename
Эта функция возвращает строку, которая представляет собой имя, которое
следует использовать для ненумерованного файла резервной копии для файла
@var{filename}.  В Unix это просто @var{filename} с добавленной тильдой.

Стандартное определение этой функции в большинстве операционных систем
выглядит следующим образом:

@smallexample
@group
(defun make-backup-file-name (file)
  "Создать нечисловое имя файла резервной копии для FILE..."
  (concat file "~"))
@end group
@end smallexample

Можно изменить соглашение об именах файлов резервных копий, переопределив
эту функцию.  В следующем примере @code{make-backup-file-name}
переопределяется для добавления @samp{.} в дополнение к добавлению тильды:

@smallexample
@group
(defun make-backup-file-name (filename)
  (expand-file-name
    (concat "." (file-name-nondirectory filename) "~")
    (file-name-directory filename)))
@end group

@group
(make-backup-file-name "backups.texi")
     @result{} ".backups.texi~"
@end group
@end smallexample

Некоторые части Emacs, включая некоторые команды Dired, предполагают, что
имена файлов резервных копий заканчиваются на @samp{~}.  Если не следовать
этому соглашению, это не вызовет серьезных проблем, но эти команды могут
дать менее желаемые результаты.
@end defun

@defun find-backup-file-name filename
Функция вычисляет имя файла нового файла резервной копии для @var{filename}.
Также может предлагать некоторые существующие файлы резервных копий для
удаления.  @code{find-backup-file-name} возвращает список, в котором
@sc{car} - имя нового файла резервной копии, а @sc{cdr} - список файлов
резервных копий, удаление которых предлагается.  Значение также может быть
@code{nil}, что означает не делать резервную копию.

Две переменные, @code{kept-old-versions} и @code{kept-new-versions},
определяют, какие версии резервной копии следует сохранить.  Эта функция
сохраняет эти версии, исключая их из @sc{cdr} значения.
@xref{Numbered Backups}.

В этом примере значение говорит, что @file{~rms/foo.~5~} - это имя, которое
следует использовать для нового файла резервной копии, а @file{~rms/foo.~3~}
- это избыточная версия, которую вызывающему абоненту следует удалить
сейчас.

@smallexample
@group
(find-backup-file-name "~rms/foo")
     @result{} ("~rms/foo.~5~" "~rms/foo.~3~")
@end group
@end smallexample
@end defun

@c Emacs 19 feature
@defun file-newest-backup filename
Эта функция возвращает имя самого последнего файла резервной копии для
@var{filename} или @code{nil}, если в этом файле нет файлов резервной копии.

Некоторые команды сравнения файлов используют эту функцию для
автоматического сравнения файла с его последней резервной копией.
@end defun

@node Auto-Saving
@section Автосохранение
@c @cindex auto-saving  Здесь много символов, начинающихся с автосохранения.

  Emacs периодически сохраняет все файлы, которые посещаются; это называется
@dfn{автосохранение}.  Автосохранение предотвращает потерю более чем
ограниченного объема работы в случае сбоя системы.  По умолчанию
автосохранение происходит каждые 300 нажатий клавиш или примерно через 30
секунд простоя.  @xref{Auto Save, Auto Save, Auto-Saving: Protection Against Disasters, emacs, The GNU Emacs Manual},
для информации об автосохранении для пользователей.  Здесь описываются
функции, используемые для автоматического сохранения, и переменные, которые
ими управляют.

@defvar buffer-auto-save-file-name
Локальная переменная буфера - это имя файла, используемого для
автосохранения текущего буфера.  @code{nil}, если буфер не должен
сохраняться автоматически.

@example
@group
buffer-auto-save-file-name
     @result{} "/xcssun/users/rms/lewis/#backups.texi#"
@end group
@end example
@end defvar

@deffn Command auto-save-mode arg
Команда режима для режима автосохранения, второстепенного режима локального
буфера.  Когда включен режим автосохранения, в буфере включается
автосохранение.  Соглашение о вызовах такое же, как и для других команд
второстепенного режима (@pxref{Minor Mode Conventions}).

В отличие от большинства второстепенных режимов, здесь нет переменной
@code{auto-save-mode}.  Режим автосохранения включается, если
@code{buffer-auto-save-file-name} установленно в не-@code{nil} и
@code{buffer-saved-size} (смотреть ниже) не не-@code{nil}.
@end deffn

@defun auto-save-file-name-p filename
Aункция возвращает значение не-@code{nil}, если @var{filename} - это строка,
которая может быть именем файла автосохранения.  Предполагает обычное
соглашение об именах для файлов автосохранения: имя, которое начинается и
заканчивается хеш-метками (@samp{#}), является возможным именем файла
автосохранения.  Аргумент @var{filename} не должен содержать часть каталога.

@example
@group
(make-auto-save-file-name)
     @result{} "/xcssun/users/rms/lewis/#backups.texi#"
@end group
@group
(auto-save-file-name-p "#backups.texi#")
     @result{} 0
@end group
@group
(auto-save-file-name-p "backups.texi")
     @result{} nil
@end group
@end example

Стандартное определение этой функции следующее:

@example
@group
(defun auto-save-file-name-p (filename)
  "Вернуть не-nil, если FILENAME можно получить с помощью..."
  (string-match "^#.*#$" filename))
@end group
@end example

Функция существует для того, чтобы иметь возможность настроить ее, если
потребуется изменить соглашение об именах для файлов с автоматическим
сохранением.  Если его переопределить, обязательно переопределяется функция
@code{make-auto-save-file-name} соответственно.
@end defun

@defun make-auto-save-file-name
Функция возвращает имя файла, которое будет использоваться для
автоматического сохранения текущего буфера.  Это просто имя файла с
добавленными к нему хэш-метками (@samp{#}).  Эта функция не смотрит на
переменную @code{auto-save-visited-file-name} (описанную ниже); вызывающие
эту функцию должны сначала проверить эту переменную.

@example
@group
(make-auto-save-file-name)
     @result{} "/xcssun/users/rms/lewis/#backups.texi#"
@end group
@end example

Вот упрощенная версия стандартного определения этой функции:

@example
@group
(defun make-auto-save-file-name ()
  "Вернуть имя файла для автосохранения \
текущего буфера.."
  (if buffer-file-name
@end group
@group
      (concat
       (file-name-directory buffer-file-name)
       "#"
       (file-name-nondirectory buffer-file-name)
       "#")
    (expand-file-name
     (concat "#%" (buffer-name) "#"))))
@end group
@end example

Это существует как отдельная функция, поэтому можно переопределить ее, чтобы
настроить соглашение об именах для файлов с автоматическим сохранением.
Обязательно изменяется @code{auto-save-file-name-p} соответствующим образом.
@end defun

@defopt auto-save-visited-file-name
Если эта переменная - не-@code{nil}, Emacs автоматически сохраняет буферы в
файлах, которые они посещают.  То есть автосохранение выполняется в том же
файле, который редактируется.  Обычно это переменная @code{nil}, поэтому
файлы автосохранения имеют разные имена, создаваемые
@code{make-auto-save-file-name}.

Когда изменяется значение этой переменной, новое значение не вступает в силу
в существующем буфере до тех пор, пока в нем не будет снова включен режим
автосохранения.  Если режим автосохранения уже включен, автосохранение будет
продолжаться с тем же именем файла до тех пор, пока @code{auto-save-mode} не
будет вызван снова.

Обратить внимание, что установка этой переменной в значение не-@code{nil} не
меняет того факта, что автосохранение отличается от сохранения буфера;
например, ловушки, описанные в @ref{Saving Buffers}, @emph{не} запускаются,
когда буфер автоматически сохраняется.
@end defopt

@defun recent-auto-save-p
Функция возвращает @code{t}, если текущий буфер был автоматически сохранен
с момента последнего чтения или сохранения.
@end defun

@defun set-buffer-auto-saved
Функция отмечает текущий буфер как автоматически сохраненный.  Буфер не
будет автоматически сохранен снова, пока текст буфера не будет снова
изменен.  Функция возвращает @code{nil}.
@end defun

@defopt auto-save-interval
Значение этой переменной указывает, как часто должно выполняться
автосохранение с точки зрения количества входных событий.  Каждый раз, когда
считывается такое количество дополнительных входных событий, Emacs выполняет
автосохранение для всех буферов, в которых это разрешено.  Установка этого
значения в ноль отключает автосохранение в зависимости от количества
набранных символов.
@end defopt

@defopt auto-save-timeout
Значение этой переменной - количество секунд простоя, которое должно
вызывать автосохранение.  Каждый раз, когда пользователь делает такую
долгую паузу, Emacs автоматически сохраняет все буферы, в которых это
разрешено.  (Если текущий буфер большой, указанный тайм-аут умножается на
коэффициент, который увеличивается с увеличением размера; для буфера
размером в миллион байт этот коэффициент равен почти 4.)

Если значение равно нулю или @code{nil}, то автосохранение не выполняется в
результате простоя, только после определенного количества событий ввода, как
указано @code{auto-save-interval}.
@end defopt

@defvar auto-save-hook
Этот обычный обработчик запускается всякий раз, когда должно произойти
автосохранение.
@end defvar

@defopt auto-save-default
Если эта переменная - не-@code{nil}, для буферов, обращающихся к файлам, по
умолчанию включено автосохранение.  В противном случае - нет.
@end defopt

@deffn Command do-auto-save &optional no-message current-only
Функция автоматически сохраняет все буферы, которые необходимо автоматически
сохранить.  Сохраняет все буферы, для которых включено автосохранение и
которые были изменены с момента предыдущего автосохранения.

Если какие-либо буферы автоматически сохраняются, @code{do-auto-save} обычно
отображает сообщение @samp{Auto-saving...} в эхо-области, пока происходит
автосохранение.  Однако, если @var{no-message} равен не-@code{nil},
сообщение запрещается.

Если @var{current-only} равен не-@code{nil}, автоматически сохраняется
только текущий буфер.
@end deffn

@defun delete-auto-save-file-if-necessary &optional force
Функция удаляет файл автосохранения текущего буфера, если
@code{delete-auto-save-files} равен не-@code{nil}.  Вызывается каждый раз
при сохранении буфера.

Если @var{force} не не-@code{nil}, эта функция удаляет файл только в том
случае, если он был записан текущим сеансом Emacs с момента последнего
истинного сохранения.
@end defun

@defopt delete-auto-save-files
Переменная используется функцией @code{delete-auto-save-file-if-necessary}.
Если это не-@code{nil}, Emacs удаляет файлы автосохранения, когда
выполняется истинное сохранение (в посещенном файле).  Это экономит место на
диске и убирает загроможденный каталог.
@end defopt

@defun rename-auto-save-file
Функция регулирует имя файла автосохранения текущего буфера, если имя
посещенного файла изменилось.  Также переименовывает существующий файл
автосохранения, если он был создан в текущем сеансе Emacs.  Если имя
посещенного файла не изменилось, эта функция ничего не делает.
@end defun

@defvar buffer-saved-size
Значение этой локальной переменной в буфере - это длина текущего буфера,
когда он был в последний раз считан, сохранен или автоматически сохранен.
Это используется для обнаружения значительного уменьшения размера и
отключения автоматического сохранения в ответ.

Если это @minus{}1, это означает, что автосохранение в этом буфере временно
отключено из-за значительного уменьшения размера.  При явном сохранении
буфера в этой переменной сохраняется положительное значение, таким образом
активируя автосохранение.  Выключение или включение режима автосохранения
также обновляет эту переменную, так что о значительном уменьшении размера
можно забыть.

Если это @minus{}2, означает, что буфер не должен учитывать изменения в
размере буфера; в частности, не должен временно отключать автосохранение
из-за изменений в размере буфера.
@end defvar

@defvar auto-save-list-file-name
Переменная (если не-@code{nil}) определяет файл для записи имен всех файлов
автосохранения.  Каждый раз, когда Emacs выполняет автосохранение, он
записывает в этот файл две строки для каждого буфера, для которого включено
автосохранение.  В первой строке дается имя посещенного файла (оно пусто,
если в буфере его нет), а во второй - имя файла автосохранения.

Когда Emacs завершает работу в обычном режиме, он удаляет этот файл; если
Emacs дает сбой, можно заглянуть в файл, чтобы найти все файлы
автосохранения, которые могут содержать работу, которая в противном случае
была потеряна.  Команда @code{recover-session} использует этот файл для их
поиска.

Имя по умолчанию для этого файла указывает ваш домашний каталог и начинается
с @samp{.saves-}.  Также содержит процесс Emacs @acronym{ID} и имя хоста.
@end defvar

@defopt auto-save-list-file-prefix
После того, как Emacs прочитает ваш файл инициализации, он инициализирует
@code{auto-save-list-file-name} (если еще не установлено в не-@code{nil}) на
основе этого префикса, добавляя имя хоста и идентификатор процесса @.  Если
установить значение @code{nil} в файле инициализации, Emacs не
инициализирует @code{auto-save-list-file-name}.
@end defopt

@node Reverting
@section Возврат
@cindex reverting buffers

  Если внести значительные изменения в файл, а затем передумать, можно
избавиться от них, прочитав предыдущую версию файла с помощью команды
@code{revert-buffer}.
@xref{Reverting, , Reverting a Buffer, emacs, The GNU Emacs Manual}.

@deffn Command revert-buffer &optional ignore-auto noconfirm preserve-modes
Команда заменяет текст буфера текстом посещенного файла на диске.  Это
действие отменяет все изменения с момента посещения или сохранения файла.

По умолчанию, если последний файл автосохранения является более новым, чем
посещенный файл, а аргумент @var{ignore-auto} - @code{nil},
@code{revert-buffer} спрашивает пользователя, использовать ли вместо него
это автосохранение.  Когда вызвать эту команду в интерактивном режиме,
@var{ignore-auto} будет @code{t}, если нет аргумента числового префикса;
таким образом, интерактивная настройка по умолчанию не проверяет файл
автосохранения.

Обычно @code{revert-buffer} запрашивает подтверждение перед изменением
буфера; но если аргумент @var{noconfirm} равен не-@code{nil},
@code{revert-buffer} не запрашивает подтверждения.

Обычно эта команда повторно инициализирует основной и вспомогательный режимы
буфера, используя @code{normal-mode}.  Но если @var{preserve-modes} равен
не-@code{nil}, режимы не меняются.

При возврате выполняется попытка сохранить позиции маркеров в буфере с
помощью функции замены @code{insert-file-contents}.  Если содержимое буфера
и содержимое файла идентичны до операции возврата, при возврате сохраняются
все маркеры.  Если они не идентичны, возврат действительно изменяет буфер; в
этом случае он сохраняет маркеры в неизмененном тексте (если есть) в начале
и конце буфера.  Сохранить любые дополнительные маркеры будет проблематично.
@end deffn

@defvar revert-buffer-in-progress-p
@code{revert-buffer} связывает эту переменную со значением не-@code{nil},
пока она работает.
@end defvar

Можно настроить, как @code{revert-buffer} будет выполнять свою работу,
установив переменные, описанные в оставшейся части этого раздела.

@defopt revert-without-query
Эта переменная содержит список файлов, которые следует восстановить без
запроса.  Значение - это список регулярных выражений.  Если имя посещенного
файла совпадает с одним из этих регулярных выражений, и файл был изменен на
диске, но буфер не изменен, то @code{revert-buffer} возвращает файл, не
запрашивая подтверждения у пользователя.
@end defopt

  Некоторые основные режимы настраивают @code{revert-buffer}, создавая
локальные привязки к буферу для этих переменных:

@defvar revert-buffer-function
@anchor{Definition of revert-buffer-function}
Значение этой переменной - это функция, которая используется для
восстановления этого буфера.  Это должна быть функция с двумя
необязательными аргументами, выполняющая работу по возврату.  Два
необязательных аргумента @var{ignore-auto} и @var{noconfirm} - это
аргументы, полученные @code{revert-buffer}.

Такие режимы, как режим Dired, в котором редактируемый текст не состоит из
содержимого файла, а может быть регенерирован каким-либо другим способом,
могут дать этой переменной локальное в буфере значение, которое является
специальной функцией для восстановления содержимого.
@end defvar

@defvar revert-buffer-insert-file-contents-function
Значение этой переменной указывает функцию, которая будет использоваться для
вставки обновленного содержимого при возврате этого буфера.  Функция
получает два аргумента: первый - имя используемого файла; второе - @code{t},
если пользователь попросил прочитать файл автосохранения.

Причина, по которой режим изменяет эту переменную вместо
@code{revert-buffer-function}, заключается в том, чтобы избежать
дублирования или замены остальной части того, что делает
@code{revert-buffer}: запрос подтверждения, очистка списка отмены, выбор
правильного основного режима и запуск перехватчиков, перечисленных ниже.
@end defvar

@defvar before-revert-hook
Этот нормальный обработчик запускается @code{revert-buffer-function} по
умолчанию перед вставкой измененного содержимого.  Пользовательский
@code{revert-buffer-function} может или не может запускать эту ловушку.
@end defvar

@defvar after-revert-hook
Эта обычная ловушка запускается @code{revert-buffer-function} по умолчанию
после вставки измененного содержимого.  Пользовательская
@code{revert-buffer-function} может или не может запускать эту ловушку.
@end defvar

Emacs может автоматически восстанавливать буферы.  Он делает это по
умолчанию для буферов, посещающих файлы.  Ниже описано, как добавить
поддержку автоматического возврата новых типов буферов.

Во-первых, для таких буферов должны быть определены подходящие
@code{revert-buffer-function} и @code{buffer-stale-function}.

@defvar buffer-stale-function
Значение этой переменной указывает функцию, которую нужно вызвать, чтобы
проверить, требуется ли возврат буфера.  Значение по умолчанию обрабатывает
только буферы, которые обращаются к файлам, проверяя время их изменения.
Для буферов, которые не обращаются к файлам, требуется настраиваемая функция
одного необязательного аргумента @var{noconfirm}.  Функция должна вернуть
не-@code{nil}, если буфер должен быть восстановлен.  Буфер является текущим
при вызове этой функции.

Хотя эта функция в основном предназначена для использования при
автоматическом возврате, ее также можно использовать для других целей.
Например, если автоматический возврат не включен, её можно использовать,
чтобы предупредить пользователя о необходимости возврата к буферу.  Идея
аргумента @var{noconfirm} состоит в том, что он должен быть @code{t}, если
буфер будет возвращен без запроса пользователя, и @code{nil}, если функция
будет использоваться только для предупреждения пользователя о том, что буфер
устарел.  В частности, для использования при автоматическом возврате
@var{noconfirm} - это @code{t}.  Если функция будет использоваться только
для автоматического возврата, можно игнорировать аргумент @var{noconfirm}.

Если просто нужно автоматически возвращаться каждые
@code{auto-revert-interval} секунд (как в меню буфера), использовать:

@example
(setq-local buffer-stale-function
     #'(lambda (&optional noconfirm) 'fast))
@end example

@noindent
в функции режима буфера.

Специальное возвращаемое значение @samp{fast} сообщает вызывающему, что
необходимость возврата не проверялась, но что возврат буфера выполняется
быстро.  Оно также сообщает Auto Revert не печатать никаких сообщений
возврата, даже если @code{auto-revert-verbose} равен не-@code{nil}.  Это
важно, так как получение сообщений об отмене каждые
@code{auto-revert-interval} секунды может быть очень раздражающим.
Информация, предоставленная этим возвращаемым значением, также может быть
полезна, если функция используется для целей, отличных от автоматического
возврата.
@end defvar

Если в буфере есть подходящие @code{revert-buffer-function} и
@code{buffer-stale-function}, обычно остается несколько проблем.

Буфер будет автоматически возвращаться, только если он помечен как
неизмененный.  Следовательно, нужно будет убедиться, что различные функции
помечают буфер измененным тогда и только тогда, когда либо буфер содержит
информацию, которая может быть потеряна при возврате, либо есть основания
полагать, что пользователю может быть неудобен автоматический возврат,
потому что он активно работает над буфером.  Пользователь всегда может
отменить это, вручную настроив измененный статус буфера.  Чтобы поддерживать
это, вызов @code{revert-buffer-function} для буфера, помеченного как
неизмененный, всегда должен сохранять буфер, помеченный как неизмененный.

Важно убедиться, что точка не будет постоянно прыгать из-за автоматического
возврата.  Конечно, перемещение точки может быть неизбежно, если буфер
радикально изменится.

Потребуется убедиться, что @code{revert-buffer-function} не печатает
сообщения, которые без необходимости дублируют собственные сообщения
Auto Revert, отображаемые, если @code{auto-revert-verbose} имеет значение
@code{t}, и эффективно заменяют значение @code{nil} для
@code{auto-revert-verbose}.  Следовательно, адаптация режима автоматического
возврата часто включает в себя избавление от таких сообщений.  Это особенно
важно для буферов, которые автоматически возвращаются каждые
@code{auto-revert-interval} секунд.

Если новый автоматический возврат является частью Emacs, нужно упомянуть это
в строке документации @code{global-auto-revert-non-file-buffers}.

Точно так же потребуется задокументировать дополнения в руководстве Emacs.
