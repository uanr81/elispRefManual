@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-1999, 2001-2019 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Command Loop
@chapter Командный Цикл
@cindex editor command loop
@cindex command loop

  Когда запускается Emacs, он почти сразу же попадает в
@dfn{редактор командного цикла}.  Этот цикл считывает ключевые
последовательности, выполняет их определения и отображает результаты.  В
этой главе описывается, как это делается, и подпрограммы, которые позволяют
программам на Lisp это делать.

@menu
* Command Overview::    Как цикл команд читает команды.
* Defining Commands::   Определение, как функция должна читать аргументы.
* Interactive Call::    Вызов команды для чтения аргументов.
* Distinguish Interactive:: Различие выполнения интерактивного вызова команды.
* Command Loop Info::   Переменные, задаваемые командным циклом, которые можно проверить.
* Adjusting Point::     Управление точкой после команды.
* Input Events::        Как выглядит ввод, когда его читают.
* Reading Input::       Как читать события ввода с клавиатуры или мыши.
* Special Events::      События обрабатываются немедленно и индивидуально.
* Waiting::             Ожидание ввода пользователя или истекание времени.
* Quitting::            Как работает @kbd{C-g}.  Как поймать или отложить выход.
* Prefix Command Arguments::    Как работают команды для установки префиксного аргумента.
* Recursive Editing::   Ввод рекурсивного редактирования и почему обычно
                               этого не следует делать.
* Disabling Commands::  Как цикл команд обрабатывает отключенные команды.
* Command History::     Как настраивается история команд и как к ней можно
                               получить доступ.
* Keyboard Macros::     Как реализованы макросы клавиатуры.
@end menu

@node Command Overview
@section Командный Цикл Обзор

  Первое, что должен сделать командный цикл, - это прочитать
последовательность ключей, которая представляет собой последовательность
событий ввода, которая преобразуется в команду.  Это делается путем вызова
функции @code{read-key-sequence}.  Программы на Lisp также могут вызывать
эту функцию (@pxref{Key Sequence Input}).  Они также могут читать ввод на
более низком уровне с помощью @code{read-key} или @code{read-event}
(@pxref{Reading One Event}) или отклонять ожидающий ввод с помощью
@code{discard-input} (@pxref{Event Input Misc}).

  Последовательность ключей преобразуется в команду через текущие активные
ключевые карты.  @xref{Key Lookup}, чтобы узнать, как это делается.
Результатом должен быть макрос клавиатуры или интерактивно вызываемая
функция.  Если ключ - @kbd{M-x}, он считывает имя другой команды, которую
затем вызывает.  Делается это командой @code{execute-extended-command}
(@pxref{Interactive Call}).

  Перед выполнением команды Emacs запускает @code{undo-boundary} для
создания границы отмены.  @xref{Maintaining Undo}.

  Чтобы выполнить команду, Emacs сначала читает ее аргументы, вызывая
@code{command-execute} (@pxref{Interactive Call}).  Для команд, написанных
на Lisp, спецификация @code{interactive} говорит, как читать аргументы.  Это
может использовать префиксный аргумент (@pxref{Prefix Command Arguments})
или может читаться с подсказкой в минибуфере (@pxref{Minibuffers}).
Например, команда @code{find-file} имеет спецификацию @code{interactive}, в
которой говорится, что имя файла следует читать с помощью минибуфера.  Тело
функции @code{find-file} не использует минибуфер, поэтому, если вызывается
@code{find-file} как функция из кода Lisp, потребуется предоставить строку
имени файла как обычный аргумент функции Lisp.

  Если команда является макросом клавиатуры (т. е. строкой или вектором),
Emacs выполняет ее, используя @code{execute-kbd-macro} (@pxref{Keyboard Macros}).

@defvar pre-command-hook
Этот нормальный перехватчик запускается редактором командного цикла перед
выполнением каждой команды.  В это время @code{this-command} содержит
команду, которая будет запущена, а @code{last-command} описывает предыдущую
команду.  @xref{Command Loop Info}.
@end defvar

@defvar post-command-hook
Эта обычная ловушка запускается редактором командного цикла после выполнения
каждой команды (включая команды, преждевременно завершенные из-за выхода или
из-за ошибок).  В то время @code{this-command} относится к только что
запущенной команде, а @code{last-command} относится к команде до этого.

Эта ловушка также запускается, когда Emacs впервые входит в командный цикл
(в этот момент оба объекта @code{this-command} and @code{last-command} равны
@code{nil}).
@end defvar

  Выход подавляется во время работы @code{pre-command-hook} и
@code{post-command-hook}.  Если при выполнении одной из этих ловушек
возникает ошибка, выполнение ловушки не прекращается; вместо этого ошибка
заглушается, а функция, в которой возникла ошибка, удаляется из ловушки.

  Запрос, поступающий на сервер Emacs
(@pxref{Emacs Server,,, emacs, The GNU Emacs Manual}), запускает эти два
перехватчика так же, как и клавиатурная команда.

@node Defining Commands
@section Определение Команд
@cindex defining commands
@cindex commands, defining
@cindex functions, making them interactive
@cindex interactive function

  Специальная форма @code{interactive} превращает функцию Lisp в команду.
Форма @code{interactive} должна располагаться на верхнем уровне в теле
функции, обычно как первая форма в теле; это относится как к
лямбда-выражением (@pxref{Lambda Expressions}), так и к @code{defun} формам
(@pxref{Defining Functions}).  Эта форма ничего не делает во время
фактического выполнения функции; его присутствие служит флагом, сообщающим
командному циклу Emacs, что функция может быть вызвана интерактивно.
Аргумент формы @code{interactive} указывает, как следует читать аргументы
интерактивного вызова.

@cindex @code{interactive-form} property
  В качестве альтернативы, форма @code{interactive} может быть указана в
свойстве @code{interactive-form} символа функции.  Значение не-@code{nil}
для этого свойства имеет приоритет над любой формой @code{interactive} в
теле функции.  Эта функция используется редко.

@anchor{The interactive-only property}
@cindex @code{interactive-only} property
  Иногда функция предназначена только для интерактивного вызова, а не для
прямого вызова из Lisp.  В этом случае присваивается функции свойство
не-@code{nil} @code{interactive-only} либо напрямую, либо через
@code{declare} (@pxref{Declare Form}).  Это заставляет байт компилятор
предупреждать, если команда вызывается из Lisp.  Вывод
@code{describe-function} будет включать аналогичную информацию.  Значением
свойства может быть: строка, которую байт компилятор будет использовать
непосредственно в своем предупреждении (она должна заканчиваться точкой, и
не начинаться с заглавной буквы, например,
@code{"use (system-name) instead."}); @code{t}; любой другой символ, который
должен быть альтернативой функция для использования в коде Lisp.

Универсальные функции (@pxref{Generic Functions}) нельзя превратить в
команды, добавив к ним форму @code{interactive}.

@menu
* Using Interactive::     Общие правила для @code{interactive}.
* Interactive Codes::     Стандартные буквенные коды для чтения аргументов
                            различными способами.
* Interactive Examples::  Примеры того, как читать интерактивные аргументы.
* Generic Commands::      Выберите среди альтернативных команд.
@end menu

@node Using Interactive
@subsection Использование @code{interactive}
@cindex arguments, interactive entry
@cindex interactive spec, using

  В этом разделе описывается, как написать форму @code{interactive}, которая
делает функцию Lisp интерактивно вызываемой командой, и как исследовать
форму @code{interactive} команды.

@defspec interactive arg-descriptor
Эта специальная форма объявляет, что функция является командой, и поэтому
она может вызываться интерактивно (через @kbd{M-x} или путем ввода связанной
с ней последовательности ключей).  Аргумент @var{arg-descriptor} объявляет,
как вычислять аргументы команды, когда команда вызывается в интерактивном
режиме.

Команду можно вызывать из программ на Lisp, как и любую другую функцию, но
тогда вызывающий предоставляет аргументы, и @var{arg-descriptor} не имеет
никакого эффекта.

@cindex @code{interactive-form}, symbol property
Форма @code{interactive} должна располагаться на верхнем уровне в теле
функции или в свойстве (@pxref{Symbol Properties}) символа функции
(@pxref{Symbol Properties}).  Это имеет свой эффект, потому что командный
цикл ищет его перед вызовом функции (@pxref{Interactive Call}).  После
вызова функции выполняются все ее формы тела; в это время, если форма
@code{interactive} встречается в теле, форма просто возвращает @code{nil},
даже не оценивая свой аргумент.

По соглашению требуется поместить форму @code{interactive} в тело функции
как первую форму верхнего уровня.  Если есть форма @code{interactive} и в
свойстве символа @code{interactive-form}, и в теле функции, первое имеет
приоритет.  Свойство символа @code{interactive-form} можно использовать для
добавления интерактивной формы к существующей функции или изменения способа
интерактивной обработки ее аргументов без переопределения функции.
@end defspec

Есть три возможности для аргумента @var{arg-descriptor}:

@itemize @bullet
@item
Может быть опущено или @code{nil}; тогда команда вызывается без аргументов.
Это быстро приводит к ошибке, если команде требуется один или несколько
аргументов.

@item
Это может быть строка; его содержимое представляет собой последовательность
элементов, разделенных символами новой строки, по одному для каждого
аргумента @footnote{Некоторые элементы фактически предоставляют два
аргумента.}.  Каждый элемент состоит из кодового символа
(@pxref{Interactive Codes}), за которым может следовать подсказка (которую
некоторые символы кода используют, а некоторые игнорируют). Вот пример:

@smallexample
(interactive "P\nbFrobnicate buffer: ")
@end smallexample

@noindent
Кодовая буква @samp{P} устанавливает в качестве первого аргумента команды
необработанный префикс команды (@pxref{Prefix Command Arguments}).
@samp{bFrobnicate buffer: } предлагает пользователю с помощью
@samp{Frobnicate buffer: } ввести имя существующего буфера, которое
становится вторым и последним аргументом.

Строка приглашения может использовать @samp{%} для включения в подсказку
значений предыдущих аргументов (начиная с первого аргумента).  Это делается
с помощью @code{format-message} (@pxref{Formatting Strings}).  Например, вот
как прочитать имя существующего буфера, за которым следует новое имя,
которое нужно дать этому буферу.:

@smallexample
@group
(interactive "bBuffer to rename: \nsRename buffer %s to: ")
@end group
@end smallexample

@cindex @samp{*} in @code{interactive}
@cindex read-only buffers in interactive
Если @samp{*} появляется в начале строки, то выдается сигнал об ошибке, если
буфер доступен только для чтения.

@cindex @samp{@@} in @code{interactive}
Если @samp{@@} появляется в начале строки и если последовательность ключей,
используемая для вызова команды, включает какие-либо события мыши, то перед
запуском команды выбирается окно, связанное с первым из этих событий.

@cindex @samp{^} in @code{interactive}
@cindex shift-selection, and @code{interactive} spec
Если @samp{^} появляется в начале строки, и если команда была вызвана через
@dfn{shift-translation}, устанавливается метка и временно активируется
область или расширяется уже активная область до запуска команды.  Если
команда была вызвана без @dfn{shift-translation}, а область временно
активна, деактивируется область перед выполнением команды.  @dfn{shift-translation} управляется на уровне пользователя с помощью
@code{shift-select-mode}; смотреть
@ref{Shift Selection,,, emacs, The GNU Emacs Manual}.

Можно использовать @samp{*}, @samp{@@}, и @code{^} вместе; порядок не имеет
значения.  Фактическое чтение аргументов контролируется остальной частью
строки приглашения (начиная с первого символа, который не является @samp{*},
@samp{@@}, или @samp{^}).

@item
Это может быть выражение Lisp, которое не является строкой; тогда это должна
быть форма, которая оценивается, чтобы получить список аргументов для
передачи команде.  Обычно эта форма вызывает различные функции для чтения
ввода от пользователя, чаще всего через минибуфер (@pxref{Minibuffers}) или
непосредственно с клавиатуры (@pxref{Reading Input}).

Предоставление точки или метки в качестве значения аргумента также является
обычным явлением, но если делается этот ввод для чтения @emph{и} (независимо
от того, используете ли он минибуфер или нет), следует убедиться, что
получены целые значения точки или метки после чтения.  Текущий буфер может
получать выходные данные подпроцесса; если выходные данные подпроцесса
поступают, пока команда ожидает ввода, это может переместить точку и метку.

Вот пример того, что @emph{не} нужно делать:

@smallexample
(interactive
 (list (region-beginning) (region-end)
       (read-string "Foo: " nil 'my-history)))
@end smallexample

@noindent
Вот как избежать этой проблемы, изучив точку и метку после чтения ввода
с клавиатуры:

@smallexample
(interactive
 (let ((string (read-string "Foo: " nil 'my-history)))
   (list (region-beginning) (region-end) string)))
@end smallexample

@strong{Предупреждение:} значения аргументов не должны включать какие-либо
типы данных, которые нельзя распечатать, а затем прочитать.  Некоторые
средства сохраняют @code{command-history} в файл для чтения в последующих
сессиях; если аргументы команды содержат тип данных, который печатается с
использованием синтаксиса @samp{#<@dots{}>}, эти средства не будут работать.

Однако есть несколько исключений: можно использовать ограниченный набор
выражений, таких как @code{(point)}, @code{(mark)},
@code{(region-beginning)}, и @code{(region-end)}, поскольку Emacs распознает
их специально и помещает выражение (а не его значение) в историю команд.
Чтобы узнать, является ли написанное вами выражение одним из этих
исключений, запустите команду, затем проверьте @code{(car command-history)}.
@end itemize

@cindex examining the @code{interactive} form
@defun interactive-form function
Эта функция возвращает @code{interactive} форму @var{function}.  Если
@var{function} является интерактивно вызываемой функцией
(@pxref{Interactive Call}), значением является команда @code{interactive} в
форме @code{(interactive @var{spec})}, которая указывает, как вычислять ее
аргументы.  В противном случае значение @code{nil}.  Если @var{function} -
это символ, используется определение его функции.
@end defun

@node Interactive Codes
@subsection Кодовые Символы для @code{interactive}
@cindex interactive code description
@cindex description for interactive codes
@cindex codes, interactive, description of
@cindex characters for interactive codes

  Приведенные ниже описания кодовых символов содержат ряд ключевых слов,
определяемых здесь следующим образом:

@table @b
@item Completion
@cindex interactive completion
Обеспечить завершение.  @key{TAB}, @key{SPC}, и @key{RET} выполняет
завершение имени, потому что аргумент читается с использованием
@code{completing-read} (@pxref{Completion}).  @kbd{?} отображает список
возможных доработок.

@item Existing
Требовать имя существующего объекта.  Недействительное имя не принимается;
команды выхода из минибуфера не сработают, если текущий ввод недействителен.

@item Default
@cindex default argument string
Если пользователь не вводит текст в минибуфер, используется какое-то
значение по умолчанию.  Значение по умолчанию зависит от символа кода.

@item No I/O
Эта кодовая буква вычисляет аргумент без чтения ввода.  Следовательно, не
используется строка подсказки, и любая строка подсказки, которая вводится,
игнорируется.

Несмотря на то, что кодовая буква не использует строку приглашения,
потребуется начать за ней с новой строки, если это не последний кодовый
символ в строке.

@item Prompt
Подсказка следует сразу за кодом символа.  Приглашение заканчивается концом
строки или новой строкой.

@item Special
Этот кодовый символ имеет смысл только в начале интерактивной строки и не
ищет подсказку или новую строку.  Это единый, изолированный символ.
@end table

@cindex reading interactive arguments
  Вот описания символов кода для использования с @code{interactive}:

@table @samp
@item *
Сообщается об ошибке, если текущий буфер доступен только для чтения.
Специальный.

@item @@
Выберается окно, упомянутое в первом событии мыши в последовательности
коючей, которое вызвало эту команду.  Специальный.

@item ^
Если команда была вызвана через shift-translation, установить метку и
временно активировать область или расширьте уже активную область перед
выполнением команды.  Если команда была вызвана без shift-translation, а
область временно активна, деактивируется область перед выполнением команды.
Специальный.

@item a
Имя функции (т. е. Символ, удовлетворяющий @code{fboundp}).  Существующий,
Завершение, Подсказка.

@item b
Имя существующего буфера.  По умолчанию используется имя текущего буфера
(@pxref{Buffers}).  Существующий, Завершение, По умолчанию, Запрос.

@item B
Имя буфера.  Буфер может не существовать.  По умолчанию использует имя
недавно использованного буфера, отличное от текущего.  Завершение,
По умолчанию, Подсказка.

@item c
Символ.  Курсор не перемещается в эхо-область.  Незамедлительный.

@item C
Имя команды (т. е. Символ, удовлетворяющий @code{commandp}).  Существующий,
Завершение, Подсказка.

@item d
@cindex position argument
Положение точки в виде целого числа (@pxref{Point}).  Нет ввода/вывода.

@item D
Каталог.  По умолчанию это текущий каталог по умолчанию для текущего буфера,
@code{default-directory} (@pxref{File Name Expansion}).  Существующий,
Завершение, По умолчанию, Запрос.

@item e
Первое или следующее событие, не связанное с клавиатурой, в
последовательности ключей, вызвавшее команду.  Точнее, @samp{e} получает
события в виде списков, поэтому можно просматривать данные в списках.
@xref{Input Events}.  Нет ввода/вывода.

Используется @samp{e} для событий мыши и для специальных системных событий
(@pxref{Misc Events}).  Список событий, который получает команда, зависит от
события.  @xref{Input Events}, который описывает формы списка для каждого
события в соответствующих подразделах.

Можно использовать @samp{e} более одного раза в интерактивной спецификации
одной команды.  Если последовательность ключей, вызвавшая команду, имеет
@var{n} событий, которые являются списками, @var{n} @samp{e} предоставляет
такое событие @var{n}.  События, не входящие в списки, такие как
функциональные ключи и символы @acronym{ASCII}, не учитываются в случае
@samp{e}.

@item f
Имя существующего файла (@pxref{File Names}).  Каталог по умолчанию -
@code{default-directory}.  Существующий, Завершение, По умолчанию, Запрос.

@item F
Имя файла.  Файл не должен существовать.
Завершение, По умолчанию, Подсказка.

@item G
Имя файла.  Файл не должен существовать.  Если пользователь вводит только
имя каталога, тогда значением будет просто имя этого каталога без добавления
имени файла в этом каталоге.  Завершение, По умолчанию, Подсказка.

@item i
Неуместный аргумент.  Этот код всегда предоставляет @code{nil} в качестве
значения аргумента.  Нет ввода/вывода.

@item k
Последовательность ключей (@pxref{Key Sequences}).  Это продолжает считывать
события, пока команда (или неопределенная команда) не будет найдена в
текущих ключевых картах.  Аргумент ключевой последовательности представлен в
виде строки или вектора.  Курсор не перемещается в эхо-область.
Незамедлительный.

Если @samp{k} считывается последовательность ключей, которая заканчивается
событием down, также считывается и отбрасывается следующее событие up.
Можно получить доступ к этому up-событию с помощью символа кода @samp{U}.

Этот тип ввода используется такими командами, как @code{describe-key} и
@code{global-set-key}.

@item K
Ключевая последовательность, определение которой потребовалося изменить.
Это работает как @samp{k}, за исключением того, что подавляется для
последнего события ввода в последовательности ключей преобразования, которые
обычно используются (при необходимости) для преобразования неопределенного
ключа в определенный.

@item m
@cindex marker argument
Положение метки в виде целого числа.  Нет ввода/вывода.

@item M
Произвольный текст, читаемый в минибуфере с использованием метода ввода
текущего буфера и возвращаемый в виде строки
(@pxref{Input Methods,,, emacs, The GNU Emacs Manual}).  Незамедлительный.

@item n
Число, считываемое с помощью минибуфера.  Если введено не число,
пользователь должен повторить попытку.  @samp{n} никогда не использует
аргумент префикса.  Незамедлительный.

@item N
Аргумент числового префикса; но если аргумента префикса нет, считается
число, как с @kbd{n}.  Значение всегда является числом.
@xref{Prefix Command Arguments}.  Незамедлительный.

@item p
@cindex numeric prefix argument usage
Аргумент числового префикса.  (Обратить внимание, что @samp{p} в нижнем
регистре).  Нет ввода-вывода.

@item P
@cindex raw prefix argument usage
Аргумент необработанного префикса.  (Обратить внимание, что @samp{P} в
верхнем регистре).  Нет ввода-вывода.

@item r
@cindex region argument
Точка и метка в виде двух числовых аргументов, наименьший первым.  Это
единственная кодовый символ, который указывает два последовательных
аргумента, а не один.  Сигнализируется об ошибке, если метка не установлена
в буфере, который является текущим при вызове команды.  Нет ввода/вывода.

@item s
Произвольный текст, читается в минибуфере и возвращается в виде строки
(@pxref{Text from Minibuffer}).  Завершается ввод с помощью @kbd{C-j} или
@key{RET}.  (@kbd{C-q} может использоваться для включения любого из этих
символов во входные данные).  Подсказка.

@item S
Интернированный символ, имя которого читается в минибуфере.  Завершите ввод
с помощью @kbd{C-j} или @key{RET}.  Другие символы, которые обычно завершают
символ (например, пробелы, круглые и квадратные скобки), здесь не
используются.  Незамедлительный.

@item U
Последовательность ключей или @code{nil}.  Может использоваться после
аргумента @samp{k} или @samp{K} для получения события up, которое было
отброшено (если оно было) после того, как @samp{k} или @samp{K} прочитано
событие down.  Если ни одно событие up не было отброшено, @samp{U}
предоставляет в качестве аргумента @code{nil}.  Нет ввода/вывода.

@item v
Переменная, объявленная как пользовательская опция (т. е. удовлетворяющая
предикату @code{custom-variable-p}).  Читается переменная с помощью
@code{read-variable}.  @xref{Definition of read-variable}.  Существующий,
Завершение, Подсказка.

@item x
Объект Lisp, заданный синтаксисом чтения, завершается @kbd{C-j} или
@key{RET}.  Объект не оценивается.  @xref{Object from Minibuffer}.
Незамедлительный.

@item X
@cindex evaluated expression argument
Значение формы Lisp.  @samp{X} читает, как @samp{x}, затем оценивает форму,
так что ее значение становится аргументом для команды.  Незамедлительный.

@item z
Название системы кодирования (символ).  Если пользователь вводит пустой
ввод, значение аргумента - @code{nil}.  @xref{Coding Systems}.  Завершение,
Существующее, Подсказка.

@item Z
Имя системы кодирования (символ) --- но только если эта команда имеет
аргумент префикса.  Без аргумента префикса @samp{Z} предоставляет @code{nil}
в качестве значения аргумента.  Завершение, Существующее, Подсказка.
@end table

@node Interactive Examples
@subsection Примеры Использования @code{interactive}
@cindex examples of using @code{interactive}
@cindex @code{interactive}, examples of using

  Вот несколько примеров @code{interactive}:

@example
@group
(defun foo1 ()              ; @r{@code{foo1} не принимает аргументов,}
    (interactive)           ;   @r{просто перемещает вперед на два слова.}
    (forward-word 2))
     @result{} foo1
@end group

@group
(defun foo2 (n)             ; @r{@code{foo2} принимает один аргумент -}
    (interactive "^p")      ;   @r{числовой префикс.}
                            ; @r{по средствам @code{shift-select-mode},}
                            ;   @r{активируется или расширяется регион.}
    (forward-word (* 2 n)))
     @result{} foo2
@end group

@group
(defun foo3 (n)             ; @r{@code{foo3} принимает один аргумент,}
    (interactive "nCount:") ;   @r{ который читается с помощью минибуфера.}
    (forward-word (* 2 n)))
     @result{} foo3
@end group

@group
(defun three-b (b1 b2 b3)
  "Выберите три существующих буфера.
Поместите их в три окна, выбрав последнее."
@end group
    (interactive "bБуфер1:\nbБуфер2:\nbБуфер3:")
    (delete-other-windows)
    (split-window (selected-window) 8)
    (switch-to-buffer b1)
    (other-window 1)
    (split-window (selected-window) 8)
    (switch-to-buffer b2)
    (other-window 1)
    (switch-to-buffer b3))
     @result{} three-b
@group
(three-b "*scratch*" "declarations.texi" "*mail*")
     @result{} nil
@end group
@end example

@node Generic Commands
@subsection Выбор Среди Альтернативных Команд
@cindex generic commands
@cindex alternatives, defining

Макрос @code{define-alternatives} может использоваться для определения
@dfn{generic commands}.  Это интерактивные функции, реализация которых может
быть выбрана из нескольких альтернатив по желанию пользователя.

@defmac define-alternatives command &rest customizations
Определить новую команду @var{command}, символ.

Когда пользователь запускает @kbd{M-x @var{command} @key{RET}} в первый раз,
Emacs запрашивает, какую реальную форму команды использовать, и записывает
выбор с помощью пользовательской переменной.  Использование аргумента
префикса повторяет этот процесс выбора альтернативы.

Переменная @code{@var{command}-alternatives} должна содержать список
альтернативных реализаций @var{command}.  Пока эта переменная не
установлена, @code{define-alternatives} не действует.

Если @var{customizations} установлено в не-@code{nil}, должно состоять из
чередующихся ключевых слов @code{defcustom} (обычно @code{:group} и
@code{:version}) и значений, добавляемых к объявлению
@code{@var{command}-alternatives}.
@end defmac

@node Interactive Call
@section Интерактивный Вызов
@cindex interactive call

  После того, как командный цикл преобразовал последовательность ключей в
команду, вызывается эта команда, используя функцию @code{command-execute}.
Если команда является функцией, @code{command-execute} вызывает
@code{call-interactively}, которой считываются аргументы и вызывается
команда.  Также можете вызвать эти функции самостоятельно.

  Обратить внимание, что термин ``command'' в этом контексте относится к
интерактивно вызываемой функции (или объекту, подобному функции), или
макросу клавиатуры.  Это не относится к последовательности ключей,
используемой для вызова команды (@pxref{Keymaps}).

@defun commandp object &optional for-call-interactively
Эта функция возвращает @code{t}, если @var{object} - команда.  В противном
случае возвращается @code{nil}.

Команды включают строки и векторы (которые рассматриваются как макросы
клавиатуры), лямбда-выражения, содержащие форму @code{interactive} верхнего
уровня (@pxref{Using Interactive}), объекты функций байт кода, созданные из
таких лямбда-выражений, объекты автозагрузки, объявленные как интерактивные
(четвертый аргумент не-@code{nil} для @code{autoload} ) и некоторые
примитивные функции.  Кроме того, символ считается командой, если он имеет
свойство не-@code{nil} @code{interactive-form} или если его определение
функции удовлетворяет @code{commandp}.

Если @var{for-call-interactively} равен не-@code{nil}, тогда @code{commandp}
возвращает @code{t} только для объектов, которые может вызывать
@code{call-interactively} --- таким образом, не для макросов клавиатуры.

Смотреть @code{documentation} в @ref{Accessing Documentation}, для
реалистичного примера использования @code{commandp}.
@end defun

@defun call-interactively command &optional record-flag keys
Функция вызывает интерактивно вызываемую функцию @var{command}, предоставляя
аргументы в соответствии со спецификациями интерактивного вызова.
Возвращается все, что возвращается @var{command}.

Если, например, есть функция со следующей спецификацией:

@example
(defun foo (begin end)
  (interactive "r")
  ...)
@end example

затем производя

@example
(call-interactively 'foo)
@end example

вызовет @code{foo} с регионом (@code{point} и @code{mark}) в качестве
аргументов.

Об ошибке сообщается, если @var{command} не является функцией или если не
может быть вызвана интерактивно (то есть не является командой).  Обратить
внимание, что макросы клавиатуры (строки и векторы) не принимаются, даже
если считаются командами, поскольку не являются функциями.  Если
@var{command} - символ, тогда @code{call-interactively} использует
определение своей функции.

@cindex record command history
Если @var{record-flag} равен не-@code{nil}, то эта команда и ее аргументы
безоговорочно добавляются в список @code{command-history}.  В противном
случае команда добавляется, только если она использует минибуфер для чтения
аргумента.  @xref{Command History}.

Аргумент @var{keys}, если он задан, должен быть вектором, который определяет
последовательность событий, которые необходимо предоставить, если команда
запрашивает, какие события использовались для ее вызова.  Если @var{keys} не
указан или @code{nil}, по умолчанию возвращается значение
@code{this-command-keys-vector}.
@xref{Definition of this-command-keys-vector}.
@end defun

@defun funcall-interactively function &rest arguments
Функция работает как @code{funcall} (@pxref{Calling Functions}), но
делается вызов похожим на интерактивный вызов: вызов
@code{called-interactively-p} внутри @var{function} вернет @code{t}.  Если
@var{function} не является командой, вызывается без сообщения об ошибке.
@end defun

@defun command-execute command &optional record-flag keys special
@cindex keyboard macro execution
Функция выполняет @var{command}.  Аргумент @var{command} должен
удовлетворять предикату @code{commandp}; т.е. это должна быть интерактивно
вызываемая функция или клавиатурный макрос.

Строка или вектор как @var{command} выполняется с @code{execute-kbd-macro}.
Функция передается в @code{call-interactively} (смотреть выше) вместе с
аргументами @var{record-flag} и @var{keys}.

Если @var{command} является символом, вместо него используется определение
его функции.  Символ с определением @code{autoload} считается командой, если
он был объявлен как обозначающий интерактивно вызываемую функцию.  Такое
определение обрабатывается путем загрузки указанной библиотеки и повторной
проверки определения символа.

Аргумент @var{special}, если он задан, означает игнорировать аргумент
префикса и не очищать его.  Используется для выполнения специальных событий
(@pxref{Special Events}).
@end defun

@deffn Command execute-extended-command prefix-argument
@cindex read command name
Функция считывает имя команды из минибуфера с помощью @code{completing-read}
(@pxref{Completion}).  Затем используется @code{command-execute} для вызова
указанной команды.  Все, что возвращает эта команда, становится значением
@code{execute-extended-command}.

@cindex execute with prefix argument
Если команда запрашивает аргумент префикса, получает значение
@var{prefix-argument}.  Если @code{execute-extended-command} вызывается
интерактивно, текущий необработанный аргумент префикса используется для
@var{prefix-argument} и, таким образом, передается любой запущенной команде.

@c !!! Если это будет @kindex?
@cindex @kbd{M-x}
@code{execute-extended-command} - обычное определение @kbd{M-x}, поэтому в
качестве подсказки используется строка @w{@samp{M-x }}.  (Было бы лучше
брать подсказку из событий, используемых для вызова
@code{execute-extended-command}, но это болезненно реализовать).  Описание
значения аргумента префикса, если таковое имеется, также становится частью
подсказки.

@example
@group
(execute-extended-command 3)
---------- Buffer: Minibuffer ----------
3 M-x forward-word @key{RET}
---------- Buffer: Minibuffer ----------
     @result{} t
@end group
@end example
@end deffn

@node Distinguish Interactive
@section Отличия Интерактивных Вызовов
@cindex distinguish interactive calls
@cindex is this call interactive

  Иногда команда должна отображать дополнительную визуальную обратную связь
(например, информативное сообщение в эхо-области) только для интерактивных
вызовов.  Это можно сделать тремя способами.  Рекомендуемый способ
проверить, была ли функция вызвана с помощью @code{call-interactively} -
дать ей необязательный аргумент @code{print-message} и использовать
спецификацию @code{interactive}, чтобы сделать ее не-@code{nil} в
интерактивных вызовах.  Вот пример:

@example
(defun foo (&optional print-message)
  (interactive "p")
  (when print-message
    (message "foo")))
@end example

@noindent
Используется @code{"p"}, потому что аргумент числового префикса никогда не
равен @code{nil}.  Определенная таким образом функция отображает сообщение
при вызове из макроса клавиатуры.

  Вышеупомянутый метод с дополнительным аргументом обычно лучше, потому что
позволяет вызывающим абонентам сказать ``рассматривать этот вызов как
интерактивный''.  Но также можно выполнить эту работу, протестировав
@code{called-interactively-p}.

@defun called-interactively-p kind
Функция возвращает @code{t}, когда вызывающая функция была вызвана с
использованием @code{call-interactively}.

Аргумент @var{kind} должен быть либо символом @code{interactive}, либо
символом @code{any}.  Если это @code{interactive}, то
@code{called-interactively-p} возвращает @code{t} только в том случае, если
вызов был сделан непосредственно пользователем --- например, если
пользователь набрал последовательность ключей, связанную с вызывающей
функцией, но @emph{не} если пользователь запустил макрос клавиатуры, который
вызвал функцию (@pxref{Keyboard Macros}).  Если @var{kind} равен @code{any},
@code{called-interactively-p}, возвращает @code{t} для любого интерактивного
вызова, включая макросы клавиатуры.

В случае сомнений используется @code{any}; единственное известное правильное
использование @code{interactive} - это если требуется решить, отображать ли
полезное сообщение во время работы функции.

Функция никогда не считается вызываемой интерактивно, если она была вызвана
посредством вычисления Lisp (или с помощью @code{apply} или @code{funcall}).
@end defun

@noindent
Вот пример использования @code{called-interactively-p}:

@example
@group
(defun foo ()
  (interactive)
  (when (called-interactively-p 'any)
    (message "Interactive!")
    'foo-called-interactively))
@end group

@group
;; @r{Набрать @kbd{M-x foo}.}
     @print{} Interactive!
@end group

@group
(foo)
     @result{} nil
@end group
@end example

@noindent
Вот еще один пример, который противопоставляет прямые и косвенные вызовы
@code{called-interactively-p}.

@example
@group
(defun bar ()
  (interactive)
  (message "%s" (list (foo) (called-interactively-p 'any))))
@end group

@group
;; @r{Набрать @kbd{M-x bar}.}
     @print{} (nil t)
@end group
@end example

@node Command Loop Info
@section Информация из Командного Цикла
@cindex command loop variables

Редоктор командного цикла устанавливает несколько переменных Lisp для
хранения записей состояния для себя и для выполняемых команд.  За
исключением @code{this-command} и @code{last-command}, обычно плохая идея
изменять любую из этих переменных в программе на Lisp.

@defvar last-command
Переменная записывает имя предыдущей команды, выполненной командным циклом
(той, которая была перед текущей командой).  Обычно значение представляет
собой символ с определением функции, но это не гарантируется.

Значение копируется из @code{this-command}, когда команда возвращается в
командный цикл, за исключением случаев, когда команда задала аргумент
префикса для следующей команды.

Переменная всегда является локальной для текущего терминала и не может быть
локальной для буфера.  @xref{Multiple Terminals}.
@end defvar

@defvar real-last-command
Переменная устанавливается Emacs точно так же, как @code{last-command}, но
никогда не изменяется программами Lisp.
@end defvar

@defvar last-repeatable-command
В переменной хранится последняя выполненная команда, которая не была частью
входного события.  Это команда @code{repeat} попытается повторить,
@xref{Repeating,,, emacs, The GNU Emacs Manual}.
@end defvar

@defvar this-command
@cindex current command
Переменная записывает имя команды, которая теперь выполняется в цикле команд
редактора.  Как и @code{last-command}, это обычно символ с определением
функции.

Цикл команд устанавливает эту переменную непосредственно перед запуском
команды и копирует ее значение в @code{last-command}, когда команда
завершается (если команда не указала аргумент префикса для следующей
команды).

@cindex kill command repetition
Некоторые команды устанавливают эту переменную во время своего выполнения в
качестве флага для следующей команды.  В частности, функции для уничтожения
текста устанавливают @code{this-command} в @code{kill-region}, чтобы любые
команды уничтожения, следующие сразу же, знали, что нужно добавить
уничтоженный текст к предыдущему уничтожению.
@end defvar

Если не требуется, чтобы определенная команда распознавалась как предыдущая
в случае ошибки, потребуется закодировать эту команду, чтобы предотвратить
это.  Один из способов - установить @code{this-command} в @code{t} в начале
команды и вернуть @code{this-command} обратно в правильное значение в конце,
как здеся:

@example
(defun foo (args@dots{})
  (interactive @dots{})
  (let ((old-this-command this-command))
    (setq this-command t)
    @r{@dots{}выполнять работу@dots{}}
    (setq this-command old-this-command)))
@end example

@noindent
Не связывается @code{this-command} с @code{let}, потому что это восстановит
старое значение в случае ошибки - особенность @code{let}, которая в данном
случае делает именно то, чего требуется избежать.

@defvar this-original-command
Имеет то же значение, что и @code{this-command}, за исключением случаев,
когда выполняется переназначение команд (@pxref{Remapping Commands}).  В
этом случае @code{this-command} дает команду, фактически выполняемую
(результат переназначения), а @code{this-original-command} дает команду,
которая была указана для выполнения, но переназначена в другую команду.
@end defvar

@defun this-command-keys
Функция возвращает строку или вектор, содержащий последовательность ключей,
которая вызвала текущую команду, плюс любые предыдущие команды, которые
сгенерировали аргумент префикса для этой команды.  Любые события,
прочитанные командой, использующей @code{read-event}, без тайм-аута,
прикрепляются к концу.

Однако, если команда вызвала @code{read-key-sequence}, возвращается
последняя прочитанная последовательность ключей.  @xref{Key Sequence Input}.
Значение является строкой, если все события в последовательности были
символами, которые помещаются в строку.  @xref{Input Events}.

@example
@group
(this-command-keys)
;; @r{Теперь использовать @kbd{C-u C-x C-e} чтобы оценить это.}
     @result{} "^U^X^E"
@end group
@end example
@end defun

@defun this-command-keys-vector
@anchor{Definition of this-command-keys-vector}
Подобно @code{this-command-keys}, за исключением того, что всегда
возвращается события в векторе, поэтому потребуется иметь дело со
сложностями хранения входных событий в строке (@pxref{Strings of Events}).
@end defun

@defun clear-this-command-keys &optional keep-record
Функцией очищается таблица событий для возврата @code{this-command-keys}.
Если @var{keep-record} не не-@code{nil}, также очищаются записи, которые
функция @code{recent-keys} (@pxref{Recording Input}) впоследствии вернет.
Это полезно после прочтения пароля, чтобы предотвратить случайное эхо пароля
в некоторых случаях как часть следующей команды.
@end defun

@defvar last-nonmenu-event
Переменная содержит последнее входное событие, считанное как часть
последовательности ключей, не считая событий, происходящих из меню мыши.

Одно из применений этой переменной - указать @code{x-popup-menu}, где
открыть всплывающее меню. Также используется внутри @code{y-or-n-p}
(@pxref{Yes-or-No Queries}).
@end defvar

@defvar last-command-event
Переменная устанавливается на последнее событие ввода, которое было
прочитано командным циклом как часть команды.  В основном эта переменная
используется в @code{self-insert-command}, которая использует ее, чтобы
решить, какой символ вставить.

@example
@group
last-command-event
;; @r{Теперь используйте @kbd{C-u C-x C-e}, чтобы оценить это.}
     @result{} 5
@end group
@end example

@noindent
Значение равно 5, потому что это код @acronym{ASCII} для @kbd{C-e}.
@end defvar

@defvar last-event-frame
Переменная записывает, в какой кадр было направлено последнее входное
событие.  Обычно это кадр, который был выбран при создании события, но если
этот кадр перенаправил фокус ввода на другой кадр, значением является кадр,
на который было перенаправлено событие.
@xref{Input Focus}.

Если последнее событие пришло из макроса клавиатуры, значение будет
@code{macro}.
@end defvar

@node Adjusting Point
@section Управление Расположением Точки После Команд
@cindex adjusting point
@cindex invisible/intangible text, and point
@cindex @code{display} property, and point display
@cindex @code{composition} property, and point display

  Emacs не может отображать курсор, когда точка находится в середине
последовательности текста, имеющего свойство @code{display} или
@code{composition}, или когда точка невидима.  Следовательно, после того,
как команда завершается и возвращается в командный цикл, если точка
находится в такой последовательности, командный цикл обычно перемещает точку
к краю последовательности, что делает эту последовательность фактически
неосязаемой.

  Команда может запретить эту функцию, установив переменную
@code{disable-point-adjustment}:

@defvar disable-point-adjustment
Если эта переменная - не-@code{nil}, когда команда возвращается в командный
цикл, то командный цикл не проверяет эти текстовые свойства и не перемещает
точку из последовательности в которой она находится.

Цикл команд устанавливает для этой переменной значение @code{nil} перед
каждой командой, поэтому, если команда устанавливает ее, эффект применяется
только к этой команде.
@end defvar

@defvar global-disable-point-adjustment
Если установить для этой переменной значение не-@code{nil}, функция
перемещения точки из текстовых последовательностей полностью отключится.
@end defvar

@node Input Events
@section Входные События
@cindex events
@cindex input events

Цикл команд Emacs читает последовательность @dfn{входных событий}, которая
представляет активность клавиатуры или мыши или системных событий,
отправленные в Emacs.  Событиями для активности клавиатуры являются клавиши
или символы; другие события всегда списки.  В этом разделе подробно
описывается представление и значение входных событий.

@defun eventp object
Функция возвращает не-@code{nil}, если @var{object} является входным
событием или типом события.

Обратить внимание, что любой символ может использоваться как событие или
тип события.  @code{eventp} не может определить, предназначен ли символ для
использования в коде Lisp в качестве события.  Вместо этого определяется,
действительно ли символ использовался в событии, считанном как ввод в
текущем сеансе Emacs.  Если символ еще не использовался, @code{eventp}
возвращает @code{nil}.
@end defun

@menu
* Keyboard Events::             Обычные символы - клавиши с символами на них.
* Function Keys::               Функциональные клавиши - клавиши с именами, а не символами.
* Mouse Events::                Обзор событий мыши.
* Click Events::                Нажатие и отпускание кнопки мыши.
* Drag Events::                 Перемещение мыши перед отпусканием кнопки.
* Button-Down Events::          Была нажата кнопка, но еще не отпущена.
* Repeat Events::               Два или три щелчка (перетаскивание, вниз).
* Motion Events::               Просто движение мышью, не нажимая кнопку.
* Focus Events::                Перемещение мыши между фреймами.
* Misc Events::                 Другие события, генерируемые системой.
* Event Examples::              Примеры списков событий мыши.
* Classifying Events::          Поиск клавиш-модификаторов в символе события.
                                Типы событий.
* Accessing Mouse::             Функции извлечения информации из событий мыши.
* Accessing Scroll::            Функции для получения информации о событиях полосы прокрутки.
* Strings of Events::           Особые рекомендации по помещению событий символов клавиатуры в строку.
@end menu

@node Keyboard Events
@subsection Keyboard Events
@cindex keyboard events

@cindex character event
There are two kinds of input you can get from the keyboard: ordinary
keys, and function keys.  Ordinary keys correspond to (possibly
modified) characters; the events they generate are represented in Lisp
as characters.  The event type of a @dfn{character event} is the
character itself (an integer), which might have some modifier bits
set; see @ref{Classifying Events}.

@cindex modifier bits (of input character)
@cindex basic code (of input character)
An input character event consists of a @dfn{basic code} between 0 and
524287, plus any or all of these @dfn{modifier bits}:

@table @asis
@item meta
The
@tex
@math{2^{27}}
@end tex
@ifnottex
2**27
@end ifnottex
bit in the character code indicates a character
typed with the meta key held down.

@item control
The
@tex
@math{2^{26}}
@end tex
@ifnottex
2**26
@end ifnottex
bit in the character code indicates a non-@acronym{ASCII}
control character.

@sc{ascii} control characters such as @kbd{C-a} have special basic
codes of their own, so Emacs needs no special bit to indicate them.
Thus, the code for @kbd{C-a} is just 1.

But if you type a control combination not in @acronym{ASCII}, such as
@kbd{%} with the control key, the numeric value you get is the code
for @kbd{%} plus
@tex
@math{2^{26}}
@end tex
@ifnottex
2**26
@end ifnottex
(assuming the terminal supports non-@acronym{ASCII}
control characters), i.e.@: with the 27th bit set.

@item shift
The
@tex
@math{2^{25}}
@end tex
@ifnottex
2**25
@end ifnottex
bit (the 26th bit) in the character event code indicates an
@acronym{ASCII} control character typed with the shift key held down.

For letters, the basic code itself indicates upper versus lower case;
for digits and punctuation, the shift key selects an entirely different
character with a different basic code.  In order to keep within the
@acronym{ASCII} character set whenever possible, Emacs avoids using the
@tex
@math{2^{25}}
@end tex
@ifnottex
2**25
@end ifnottex
bit for those character events.

However, @acronym{ASCII} provides no way to distinguish @kbd{C-A} from
@kbd{C-a}, so Emacs uses the
@tex
@math{2^{25}}
@end tex
@ifnottex
2**25
@end ifnottex
bit in @kbd{C-A} and not in
@kbd{C-a}.

@item hyper
The
@tex
@math{2^{24}}
@end tex
@ifnottex
2**24
@end ifnottex
bit in the character event code indicates a character
typed with the hyper key held down.

@item super
The
@tex
@math{2^{23}}
@end tex
@ifnottex
2**23
@end ifnottex
bit in the character event code indicates a character
typed with the super key held down.

@item alt
The
@tex
@math{2^{22}}
@end tex
@ifnottex
2**22
@end ifnottex
bit in the character event code indicates a character typed with the
alt key held down.  (The key labeled @key{Alt} on most keyboards is
actually treated as the meta key, not this.)
@end table

  It is best to avoid mentioning specific bit numbers in your program.
To test the modifier bits of a character, use the function
@code{event-modifiers} (@pxref{Classifying Events}).  When making key
bindings, you can use the read syntax for characters with modifier bits
(@samp{\C-}, @samp{\M-}, and so on).  For making key bindings with
@code{define-key}, you can use lists such as @code{(control hyper ?x)} to
specify the characters (@pxref{Changing Key Bindings}).  The function
@code{event-convert-list} converts such a list into an event type
(@pxref{Classifying Events}).

@node Function Keys
@subsection Function Keys

@cindex function keys
Most keyboards also have @dfn{function keys}---keys that have names or
symbols that are not characters.  Function keys are represented in
Emacs Lisp as symbols; the symbol's name is the function key's label,
in lower case.  For example, pressing a key labeled @key{F1} generates
an input event represented by the symbol @code{f1}.

The event type of a function key event is the event symbol itself.
@xref{Classifying Events}.

Here are a few special cases in the symbol-naming convention for
function keys:

@table @asis
@item @code{backspace}, @code{tab}, @code{newline}, @code{return}, @code{delete}
These keys correspond to common @acronym{ASCII} control characters that have
special keys on most keyboards.

In @acronym{ASCII}, @kbd{C-i} and @key{TAB} are the same character.  If the
terminal can distinguish between them, Emacs conveys the distinction to
Lisp programs by representing the former as the integer 9, and the
latter as the symbol @code{tab}.

Most of the time, it's not useful to distinguish the two.  So normally
@code{local-function-key-map} (@pxref{Translation Keymaps}) is set up
to map @code{tab} into 9.  Thus, a key binding for character code 9
(the character @kbd{C-i}) also applies to @code{tab}.  Likewise for
the other symbols in this group.  The function @code{read-char}
likewise converts these events into characters.

In @acronym{ASCII}, @key{BS} is really @kbd{C-h}.  But @code{backspace}
converts into the character code 127 (@key{DEL}), not into code 8
(@key{BS}).  This is what most users prefer.

@item @code{left}, @code{up}, @code{right}, @code{down}
Cursor arrow keys
@item @code{kp-add}, @code{kp-decimal}, @code{kp-divide}, @dots{}
Keypad keys (to the right of the regular keyboard).
@item @code{kp-0}, @code{kp-1}, @dots{}
Keypad keys with digits.
@item @code{kp-f1}, @code{kp-f2}, @code{kp-f3}, @code{kp-f4}
Keypad PF keys.
@item @code{kp-home}, @code{kp-left}, @code{kp-up}, @code{kp-right}, @code{kp-down}
Keypad arrow keys.  Emacs normally translates these into the
corresponding non-keypad keys @code{home}, @code{left}, @dots{}
@item @code{kp-prior}, @code{kp-next}, @code{kp-end}, @code{kp-begin}, @code{kp-insert}, @code{kp-delete}
Additional keypad duplicates of keys ordinarily found elsewhere.  Emacs
normally translates these into the like-named non-keypad keys.
@end table

You can use the modifier keys @key{ALT}, @key{CTRL}, @key{HYPER},
@key{META}, @key{SHIFT}, and @key{SUPER} with function keys.  The way to
represent them is with prefixes in the symbol name:

@table @samp
@item A-
The alt modifier.
@item C-
The control modifier.
@item H-
The hyper modifier.
@item M-
The meta modifier.
@item S-
The shift modifier.
@item s-
The super modifier.
@end table

Thus, the symbol for the key @key{F3} with @key{META} held down is
@code{M-f3}.  When you use more than one prefix, we recommend you
write them in alphabetical order; but the order does not matter in
arguments to the key-binding lookup and modification functions.

@node Mouse Events
@subsection Mouse Events

Emacs supports four kinds of mouse events: click events, drag events,
button-down events, and motion events.  All mouse events are represented
as lists.  The @sc{car} of the list is the event type; this says which
mouse button was involved, and which modifier keys were used with it.
The event type can also distinguish double or triple button presses
(@pxref{Repeat Events}).  The rest of the list elements give position
and time information.

For key lookup, only the event type matters: two events of the same type
necessarily run the same command.  The command can access the full
values of these events using the @samp{e} interactive code.
@xref{Interactive Codes}.

A key sequence that starts with a mouse event is read using the keymaps
of the buffer in the window that the mouse was in, not the current
buffer.  This does not imply that clicking in a window selects that
window or its buffer---that is entirely under the control of the command
binding of the key sequence.

@node Click Events
@subsection Click Events
@cindex click event
@cindex mouse click event

When the user presses a mouse button and releases it at the same
location, that generates a @dfn{click} event.  All mouse click event
share the same format:

@example
(@var{event-type} @var{position} @var{click-count})
@end example

@table @asis
@item @var{event-type}
This is a symbol that indicates which mouse button was used.  It is
one of the symbols @code{mouse-1}, @code{mouse-2}, @dots{}, where the
buttons are numbered left to right.

You can also use prefixes @samp{A-}, @samp{C-}, @samp{H-}, @samp{M-},
@samp{S-} and @samp{s-} for modifiers alt, control, hyper, meta, shift
and super, just as you would with function keys.

This symbol also serves as the event type of the event.  Key bindings
describe events by their types; thus, if there is a key binding for
@code{mouse-1}, that binding would apply to all events whose
@var{event-type} is @code{mouse-1}.

@item @var{position}
@cindex mouse position list
This is a @dfn{mouse position list} specifying where the mouse click
occurred; see below for details.

@item @var{click-count}
This is the number of rapid repeated presses so far of the same mouse
button.  @xref{Repeat Events}.
@end table

  To access the contents of a mouse position list in the
@var{position} slot of a click event, you should typically use the
functions documented in @ref{Accessing Mouse}.  The explicit format of
the list depends on where the click occurred.  For clicks in the text
area, mode line, header line, or in the fringe or marginal areas, the
mouse position list has the form

@example
(@var{window} @var{pos-or-area} (@var{x} . @var{y}) @var{timestamp}
 @var{object} @var{text-pos} (@var{col} . @var{row})
 @var{image} (@var{dx} . @var{dy}) (@var{width} . @var{height}))
@end example

@noindent
The meanings of these list elements are as follows:

@table @asis
@item @var{window}
The window in which the click occurred.

@item @var{pos-or-area}
The buffer position of the character clicked on in the text area; or,
if the click was outside the text area, the window area where it
occurred.  It is one of the symbols @code{mode-line},
@code{header-line}, @code{vertical-line}, @code{left-margin},
@code{right-margin}, @code{left-fringe}, or @code{right-fringe}.

In one special case, @var{pos-or-area} is a list containing a symbol
(one of the symbols listed above) instead of just the symbol.  This
happens after the imaginary prefix keys for the event are registered
by Emacs.  @xref{Key Sequence Input}.

@item @var{x}, @var{y}
The relative pixel coordinates of the click.  For clicks in the text
area of a window, the coordinate origin @code{(0 . 0)} is taken to be
the top left corner of the text area.  @xref{Window Sizes}.  For
clicks in a mode line or header line, the coordinate origin is the top
left corner of the window itself.  For fringes, margins, and the
vertical border, @var{x} does not have meaningful data.  For fringes
and margins, @var{y} is relative to the bottom edge of the header
line.  In all cases, the @var{x} and @var{y} coordinates increase
rightward and downward respectively.

@item @var{timestamp}
The time at which the event occurred, as an integer number of
milliseconds since a system-dependent initial time.

@item @var{object}
Either @code{nil}, which means the click occurred on buffer text, or a
cons cell of the form @w{(@var{string} . @var{string-pos})} if there
is a string from a text property or an overlay at the click position.

@table @asis
@item @var{string}
The string which was clicked on, including any properties.

@item @var{string-pos}
The position in the string where the click occurred.
@end table

@item @var{text-pos}
For clicks on a marginal area or on a fringe, this is the buffer
position of the first visible character in the corresponding line in
the window.  For clicks on the mode line or the header line, this is
@code{nil}.  For other events, it is the buffer position closest to
the click.

@item @var{col}, @var{row}
These are the actual column and row coordinate numbers of the glyph
under the @var{x}, @var{y} position.  If @var{x} lies beyond the last
column of actual text on its line, @var{col} is reported by adding
fictional extra columns that have the default character width.  Row 0
is taken to be the header line if the window has one, or the topmost
row of the text area otherwise.  Column 0 is taken to be the leftmost
column of the text area for clicks on a window text area, or the
leftmost mode line or header line column for clicks there.  For clicks
on fringes or vertical borders, these have no meaningful data.  For
clicks on margins, @var{col} is measured from the left edge of the
margin area and @var{row} is measured from the top of the margin area.

@item @var{image}
If there is an image at the click location, this is the image object
as returned by @code{find-image} (@pxref{Defining Images}); otherwise
this is @code{nil}.

@item @var{dx}, @var{dy}
These are the pixel coordinates of the click, relative to the top left
corner of @var{object}, which is @code{(0 . 0)}.  If @var{object} is
@code{nil}, which stands for a buffer, the coordinates are relative to
the top left corner of the character glyph clicked on.

@item @var{width}, @var{height}
These are the pixel width and height of @var{object} or, if this is
@code{nil}, those of the character glyph clicked on.
@end table

For clicks on a scroll bar, @var{position} has this form:

@example
(@var{window} @var{area} (@var{portion} . @var{whole}) @var{timestamp} @var{part})
@end example

@table @asis
@item @var{window}
The window whose scroll bar was clicked on.

@item @var{area}
This is the symbol @code{vertical-scroll-bar}.

@item @var{portion}
The number of pixels from the top of the scroll bar to the click
position.  On some toolkits, including GTK+, Emacs cannot extract this
data, so the value is always @code{0}.

@item @var{whole}
The total length, in pixels, of the scroll bar.  On some toolkits,
including GTK+, Emacs cannot extract this data, so the value is always
@code{0}.

@item @var{timestamp}
The time at which the event occurred, in milliseconds.  On some
toolkits, including GTK+, Emacs cannot extract this data, so the value
is always @code{0}.

@item @var{part}
The part of the scroll bar on which the click occurred.  It is one of
the symbols @code{handle} (the scroll bar handle), @code{above-handle}
(the area above the handle), @code{below-handle} (the area below the
handle), @code{up} (the up arrow at one end of the scroll bar), or
@code{down} (the down arrow at one end of the scroll bar).
@c The 'top', 'bottom', and 'end-scroll' codes don't seem to be used.
@end table


@node Drag Events
@subsection Drag Events
@cindex drag event
@cindex mouse drag event

With Emacs, you can have a drag event without even changing your
clothes.  A @dfn{drag event} happens every time the user presses a mouse
button and then moves the mouse to a different character position before
releasing the button.  Like all mouse events, drag events are
represented in Lisp as lists.  The lists record both the starting mouse
position and the final position, like this:

@example
(@var{event-type}
 (@var{window1} START-POSITION)
 (@var{window2} END-POSITION))
@end example

For a drag event, the name of the symbol @var{event-type} contains the
prefix @samp{drag-}.  For example, dragging the mouse with button 2
held down generates a @code{drag-mouse-2} event.  The second and third
elements of the event give the starting and ending position of the
drag, as mouse position lists (@pxref{Click Events}).  You can access
the second element of any mouse event in the same way.  However, the
drag event may end outside the boundaries of the frame that was
initially selected.  In that case, the third element's position list
contains that frame in place of a window.

The @samp{drag-} prefix follows the modifier key prefixes such as
@samp{C-} and @samp{M-}.

If @code{read-key-sequence} receives a drag event that has no key
binding, and the corresponding click event does have a binding, it
changes the drag event into a click event at the drag's starting
position.  This means that you don't have to distinguish between click
and drag events unless you want to.

@node Button-Down Events
@subsection Button-Down Events
@cindex button-down event

Click and drag events happen when the user releases a mouse button.
They cannot happen earlier, because there is no way to distinguish a
click from a drag until the button is released.

If you want to take action as soon as a button is pressed, you need to
handle @dfn{button-down} events.@footnote{Button-down is the
conservative antithesis of drag.}  These occur as soon as a button is
pressed.  They are represented by lists that look exactly like click
events (@pxref{Click Events}), except that the @var{event-type} symbol
name contains the prefix @samp{down-}.  The @samp{down-} prefix follows
modifier key prefixes such as @samp{C-} and @samp{M-}.

The function @code{read-key-sequence} ignores any button-down events
that don't have command bindings; therefore, the Emacs command loop
ignores them too.  This means that you need not worry about defining
button-down events unless you want them to do something.  The usual
reason to define a button-down event is so that you can track mouse
motion (by reading motion events) until the button is released.
@xref{Motion Events}.

@node Repeat Events
@subsection Repeat Events
@cindex repeat events
@cindex double-click events
@cindex triple-click events
@cindex mouse events, repeated

If you press the same mouse button more than once in quick succession
without moving the mouse, Emacs generates special @dfn{repeat} mouse
events for the second and subsequent presses.

The most common repeat events are @dfn{double-click} events.  Emacs
generates a double-click event when you click a button twice; the event
happens when you release the button (as is normal for all click
events).

The event type of a double-click event contains the prefix
@samp{double-}.  Thus, a double click on the second mouse button with
@key{meta} held down comes to the Lisp program as
@code{M-double-mouse-2}.  If a double-click event has no binding, the
binding of the corresponding ordinary click event is used to execute
it.  Thus, you need not pay attention to the double click feature
unless you really want to.

When the user performs a double click, Emacs generates first an ordinary
click event, and then a double-click event.  Therefore, you must design
the command binding of the double click event to assume that the
single-click command has already run.  It must produce the desired
results of a double click, starting from the results of a single click.

This is convenient, if the meaning of a double click somehow builds
on the meaning of a single click---which is recommended user interface
design practice for double clicks.

If you click a button, then press it down again and start moving the
mouse with the button held down, then you get a @dfn{double-drag} event
when you ultimately release the button.  Its event type contains
@samp{double-drag} instead of just @samp{drag}.  If a double-drag event
has no binding, Emacs looks for an alternate binding as if the event
were an ordinary drag.

Before the double-click or double-drag event, Emacs generates a
@dfn{double-down} event when the user presses the button down for the
second time.  Its event type contains @samp{double-down} instead of just
@samp{down}.  If a double-down event has no binding, Emacs looks for an
alternate binding as if the event were an ordinary button-down event.
If it finds no binding that way either, the double-down event is
ignored.

To summarize, when you click a button and then press it again right
away, Emacs generates a down event and a click event for the first
click, a double-down event when you press the button again, and finally
either a double-click or a double-drag event.

If you click a button twice and then press it again, all in quick
succession, Emacs generates a @dfn{triple-down} event, followed by
either a @dfn{triple-click} or a @dfn{triple-drag}.  The event types of
these events contain @samp{triple} instead of @samp{double}.  If any
triple event has no binding, Emacs uses the binding that it would use
for the corresponding double event.

If you click a button three or more times and then press it again, the
events for the presses beyond the third are all triple events.  Emacs
does not have separate event types for quadruple, quintuple, etc.@:
events.  However, you can look at the event list to find out precisely
how many times the button was pressed.

@defun event-click-count event
This function returns the number of consecutive button presses that led
up to @var{event}.  If @var{event} is a double-down, double-click or
double-drag event, the value is 2.  If @var{event} is a triple event,
the value is 3 or greater.  If @var{event} is an ordinary mouse event
(not a repeat event), the value is 1.
@end defun

@defopt double-click-fuzz
To generate repeat events, successive mouse button presses must be at
approximately the same screen position.  The value of
@code{double-click-fuzz} specifies the maximum number of pixels the
mouse may be moved (horizontally or vertically) between two successive
clicks to make a double-click.

This variable is also the threshold for motion of the mouse to count
as a drag.
@end defopt

@defopt double-click-time
To generate repeat events, the number of milliseconds between
successive button presses must be less than the value of
@code{double-click-time}.  Setting @code{double-click-time} to
@code{nil} disables multi-click detection entirely.  Setting it to
@code{t} removes the time limit; Emacs then detects multi-clicks by
position only.
@end defopt

@node Motion Events
@subsection Motion Events
@cindex motion event
@cindex mouse motion events

Emacs sometimes generates @dfn{mouse motion} events to describe motion
of the mouse without any button activity.  Mouse motion events are
represented by lists that look like this:

@example
(mouse-movement POSITION)
@end example

@noindent
@var{position} is a mouse position list (@pxref{Click Events}),
specifying the current position of the mouse cursor.  As with the
end-position of a drag event, this position list may represent a
location outside the boundaries of the initially selected frame, in
which case the list contains that frame in place of a window.

The special form @code{track-mouse} enables generation of motion
events within its body.  Outside of @code{track-mouse} forms, Emacs
does not generate events for mere motion of the mouse, and these
events do not appear.  @xref{Mouse Tracking}.

@node Focus Events
@subsection Focus Events
@cindex focus event

Window systems provide general ways for the user to control which window
gets keyboard input.  This choice of window is called the @dfn{focus}.
When the user does something to switch between Emacs frames, that
generates a @dfn{focus event}.  The normal definition of a focus event,
in the global keymap, is to select a new frame within Emacs, as the user
would expect.  @xref{Input Focus}, which also describes hooks related
to focus events.

Focus events are represented in Lisp as lists that look like this:

@example
(switch-frame @var{new-frame})
@end example

@noindent
where @var{new-frame} is the frame switched to.

Some X window managers are set up so that just moving the mouse into a
window is enough to set the focus there.  Usually, there is no need
for a Lisp program to know about the focus change until some other
kind of input arrives.  Emacs generates a focus event only when the
user actually types a keyboard key or presses a mouse button in the
new frame; just moving the mouse between frames does not generate a
focus event.

A focus event in the middle of a key sequence would garble the
sequence.  So Emacs never generates a focus event in the middle of a key
sequence.  If the user changes focus in the middle of a key
sequence---that is, after a prefix key---then Emacs reorders the events
so that the focus event comes either before or after the multi-event key
sequence, and not within it.

@node Misc Events
@subsection Miscellaneous System Events

A few other event types represent occurrences within the system.

@table @code
@cindex @code{delete-frame} event
@item (delete-frame (@var{frame}))
This kind of event indicates that the user gave the window manager
a command to delete a particular window, which happens to be an Emacs frame.

The standard definition of the @code{delete-frame} event is to delete @var{frame}.

@cindex @code{iconify-frame} event
@item (iconify-frame (@var{frame}))
This kind of event indicates that the user iconified @var{frame} using
the window manager.  Its standard definition is @code{ignore}; since the
frame has already been iconified, Emacs has no work to do.  The purpose
of this event type is so that you can keep track of such events if you
want to.

@cindex @code{make-frame-visible} event
@item (make-frame-visible (@var{frame}))
This kind of event indicates that the user deiconified @var{frame} using
the window manager.  Its standard definition is @code{ignore}; since the
frame has already been made visible, Emacs has no work to do.

@cindex @code{wheel-up} event
@cindex @code{wheel-down} event
@item (wheel-up @var{position})
@itemx (wheel-down @var{position})
These kinds of event are generated by moving a mouse wheel.  The
@var{position} element is a mouse position list (@pxref{Click
Events}), specifying the position of the mouse cursor when the event
occurred.

@vindex mouse-wheel-up-event
@vindex mouse-wheel-down-event
This kind of event is generated only on some kinds of systems.  On some
systems, @code{mouse-4} and @code{mouse-5} are used instead.  For
portable code, use the variables @code{mouse-wheel-up-event} and
@code{mouse-wheel-down-event} defined in @file{mwheel.el} to determine
what event types to expect for the mouse wheel.

@cindex @code{drag-n-drop} event
@item (drag-n-drop @var{position} @var{files})
This kind of event is generated when a group of files is
selected in an application outside of Emacs, and then dragged and
dropped onto an Emacs frame.

The element @var{position} is a list describing the position of the
event, in the same format as used in a mouse-click event (@pxref{Click
Events}), and @var{files} is the list of file names that were dragged
and dropped.  The usual way to handle this event is by visiting these
files.

This kind of event is generated, at present, only on some kinds of
systems.

@cindex @code{help-echo} event
@item help-echo
This kind of event is generated when a mouse pointer moves onto a
portion of buffer text which has a @code{help-echo} text property.
The generated event has this form:

@example
(help-echo @var{frame} @var{help} @var{window} @var{object} @var{pos})
@end example

@noindent
The precise meaning of the event parameters and the way these
parameters are used to display the help-echo text are described in
@ref{Text help-echo}.

@cindex @code{sigusr1} event
@cindex @code{sigusr2} event
@cindex user signals
@item sigusr1
@itemx sigusr2
These events are generated when the Emacs process receives
the signals @code{SIGUSR1} and @code{SIGUSR2}.  They contain no
additional data because signals do not carry additional information.
They can be useful for debugging (@pxref{Error Debugging}).

To catch a user signal, bind the corresponding event to an interactive
command in the @code{special-event-map} (@pxref{Active Keymaps}).
The command is called with no arguments, and the specific signal event is
available in @code{last-input-event}.  For example:

@smallexample
(defun sigusr-handler ()
  (interactive)
  (message "Caught signal %S" last-input-event))

(define-key special-event-map [sigusr1] 'sigusr-handler)
@end smallexample

To test the signal handler, you can make Emacs send a signal to itself:

@smallexample
(signal-process (emacs-pid) 'sigusr1)
@end smallexample

@cindex @code{language-change} event
@item language-change
This kind of event is generated on MS-Windows when the input language
has changed.  This typically means that the keyboard keys will send to
Emacs characters from a different language.  The generated event has
this form:

@smallexample
(language-change @var{frame} @var{codepage} @var{language-id})
@end smallexample

@noindent
Here @var{frame} is the frame which was current when the input
language changed; @var{codepage} is the new codepage number; and
@var{language-id} is the numerical ID of the new input language.  The
coding-system (@pxref{Coding Systems}) that corresponds to
@var{codepage} is @code{cp@var{codepage}} or
@code{windows-@var{codepage}}.  To convert @var{language-id} to a
string (e.g., to use it for various language-dependent features, such
as @code{set-language-environment}), use the
@code{w32-get-locale-info} function, like this:

@smallexample
;; Get the abbreviated language name, such as "ENU" for English
(w32-get-locale-info language-id)
;; Get the full English name of the language,
;; such as "English (United States)"
(w32-get-locale-info language-id 4097)
;; Get the full localized name of the language
(w32-get-locale-info language-id t)
@end smallexample
@end table

  If one of these events arrives in the middle of a key sequence---that
is, after a prefix key---then Emacs reorders the events so that this
event comes either before or after the multi-event key sequence, not
within it.

@node Event Examples
@subsection Event Examples

If the user presses and releases the left mouse button over the same
location, that generates a sequence of events like this:

@smallexample
(down-mouse-1 (#<window 18 on NEWS> 2613 (0 . 38) -864320))
(mouse-1      (#<window 18 on NEWS> 2613 (0 . 38) -864180))
@end smallexample

While holding the control key down, the user might hold down the
second mouse button, and drag the mouse from one line to the next.
That produces two events, as shown here:

@smallexample
(C-down-mouse-2 (#<window 18 on NEWS> 3440 (0 . 27) -731219))
(C-drag-mouse-2 (#<window 18 on NEWS> 3440 (0 . 27) -731219)
                (#<window 18 on NEWS> 3510 (0 . 28) -729648))
@end smallexample

While holding down the meta and shift keys, the user might press the
second mouse button on the window's mode line, and then drag the mouse
into another window.  That produces a pair of events like these:

@smallexample
(M-S-down-mouse-2 (#<window 18 on NEWS> mode-line (33 . 31) -457844))
(M-S-drag-mouse-2 (#<window 18 on NEWS> mode-line (33 . 31) -457844)
                  (#<window 20 on carlton-sanskrit.tex> 161 (33 . 3)
                   -453816))
@end smallexample

The frame with input focus might not take up the entire screen, and
the user might move the mouse outside the scope of the frame.  Inside
the @code{track-mouse} special form, that produces an event like this:

@smallexample
(mouse-movement (#<frame *ielm* 0x102849a30> nil (563 . 205) 532301936))
@end smallexample

To handle a SIGUSR1 signal, define an interactive function, and
bind it to the @code{signal usr1} event sequence:

@smallexample
(defun usr1-handler ()
  (interactive)
  (message "Got USR1 signal"))
(global-set-key [signal usr1] 'usr1-handler)
@end smallexample

@node Classifying Events
@subsection Classifying Events
@cindex event type
@cindex classifying events

  Every event has an @dfn{event type}, which classifies the event for
key binding purposes.  For a keyboard event, the event type equals the
event value; thus, the event type for a character is the character, and
the event type for a function key symbol is the symbol itself.  For
events that are lists, the event type is the symbol in the @sc{car} of
the list.  Thus, the event type is always a symbol or a character.

  Two events of the same type are equivalent where key bindings are
concerned; thus, they always run the same command.  That does not
necessarily mean they do the same things, however, as some commands look
at the whole event to decide what to do.  For example, some commands use
the location of a mouse event to decide where in the buffer to act.

  Sometimes broader classifications of events are useful.  For example,
you might want to ask whether an event involved the @key{META} key,
regardless of which other key or mouse button was used.

  The functions @code{event-modifiers} and @code{event-basic-type} are
provided to get such information conveniently.

@defun event-modifiers event
This function returns a list of the modifiers that @var{event} has.  The
modifiers are symbols; they include @code{shift}, @code{control},
@code{meta}, @code{alt}, @code{hyper} and @code{super}.  In addition,
the modifiers list of a mouse event symbol always contains one of
@code{click}, @code{drag}, and @code{down}.  For double or triple
events, it also contains @code{double} or @code{triple}.

The argument @var{event} may be an entire event object, or just an
event type.  If @var{event} is a symbol that has never been used in an
event that has been read as input in the current Emacs session, then
@code{event-modifiers} can return @code{nil}, even when @var{event}
actually has modifiers.

Here are some examples:

@example
(event-modifiers ?a)
     @result{} nil
(event-modifiers ?A)
     @result{} (shift)
(event-modifiers ?\C-a)
     @result{} (control)
(event-modifiers ?\C-%)
     @result{} (control)
(event-modifiers ?\C-\S-a)
     @result{} (control shift)
(event-modifiers 'f5)
     @result{} nil
(event-modifiers 's-f5)
     @result{} (super)
(event-modifiers 'M-S-f5)
     @result{} (meta shift)
(event-modifiers 'mouse-1)
     @result{} (click)
(event-modifiers 'down-mouse-1)
     @result{} (down)
@end example

The modifiers list for a click event explicitly contains @code{click},
but the event symbol name itself does not contain @samp{click}.
Similarly, the modifiers list for an @acronym{ASCII} control
character, such as @samp{C-a}, contains @code{control}, even though
reading such an event via @code{read-char} will return the value 1
with the control modifier bit removed.
@end defun

@defun event-basic-type event
This function returns the key or mouse button that @var{event}
describes, with all modifiers removed.  The @var{event} argument is as
in @code{event-modifiers}.  For example:

@example
(event-basic-type ?a)
     @result{} 97
(event-basic-type ?A)
     @result{} 97
(event-basic-type ?\C-a)
     @result{} 97
(event-basic-type ?\C-\S-a)
     @result{} 97
(event-basic-type 'f5)
     @result{} f5
(event-basic-type 's-f5)
     @result{} f5
(event-basic-type 'M-S-f5)
     @result{} f5
(event-basic-type 'down-mouse-1)
     @result{} mouse-1
@end example
@end defun

@defun mouse-movement-p object
This function returns non-@code{nil} if @var{object} is a mouse movement
event.  @xref{Motion Events}.
@end defun

@defun event-convert-list list
This function converts a list of modifier names and a basic event type
to an event type which specifies all of them.  The basic event type
must be the last element of the list.  For example,

@example
(event-convert-list '(control ?a))
     @result{} 1
(event-convert-list '(control meta ?a))
     @result{} -134217727
(event-convert-list '(control super f1))
     @result{} C-s-f1
@end example
@end defun

@node Accessing Mouse
@subsection Accessing Mouse Events
@cindex mouse events, data in
@cindex keyboard events, data in

  This section describes convenient functions for accessing the data in
a mouse button or motion event.  Keyboard event data can be accessed
using the same functions, but data elements that aren't applicable to
keyboard events are zero or @code{nil}.

  The following two functions return a mouse position list
(@pxref{Click Events}), specifying the position of a mouse event.

@defun event-start event
This returns the starting position of @var{event}.

If @var{event} is a click or button-down event, this returns the
location of the event.  If @var{event} is a drag event, this returns the
drag's starting position.
@end defun

@defun event-end event
This returns the ending position of @var{event}.

If @var{event} is a drag event, this returns the position where the user
released the mouse button.  If @var{event} is a click or button-down
event, the value is actually the starting position, which is the only
position such events have.
@end defun

@defun posnp object
This function returns non-@code{nil} if @var{object} is a mouse
position list, in the format documented in @ref{Click Events}); and
@code{nil} otherwise.
@end defun

@cindex mouse position list, accessing
  These functions take a mouse position list as argument, and return
various parts of it:

@defun posn-window position
Return the window that @var{position} is in.  If @var{position}
represents a location outside the frame where the event was initiated,
return that frame instead.
@end defun

@defun posn-area position
Return the window area recorded in @var{position}.  It returns @code{nil}
when the event occurred in the text area of the window; otherwise, it
is a symbol identifying the area in which the event occurred.
@end defun

@defun posn-point position
Return the buffer position in @var{position}.  When the event occurred
in the text area of the window, in a marginal area, or on a fringe,
this is an integer specifying a buffer position.  Otherwise, the value
is undefined.
@end defun

@defun posn-x-y position
Return the pixel-based x and y coordinates in @var{position}, as a
cons cell @w{@code{(@var{x} . @var{y})}}.  These coordinates are
relative to the window given by @code{posn-window}.

This example shows how to convert the window-relative coordinates in
the text area of a window into frame-relative coordinates:

@example
(defun frame-relative-coordinates (position)
  "Return frame-relative coordinates from POSITION.
POSITION is assumed to lie in a window text area."
  (let* ((x-y (posn-x-y position))
         (window (posn-window position))
         (edges (window-inside-pixel-edges window)))
    (cons (+ (car x-y) (car edges))
          (+ (cdr x-y) (cadr edges)))))
@end example
@end defun

@defun posn-col-row position
This function returns a cons cell @w{@code{(@var{col} .  @var{row})}},
containing the estimated column and row corresponding to buffer
position described by @var{position}.  The return value is given in
units of the frame's default character width and default line height
(including spacing), as computed from the @var{x} and @var{y} values
corresponding to @var{position}.  (So, if the actual characters have
non-default sizes, the actual row and column may differ from these
computed values.)

Note that @var{row} is counted from the top of the text area.  If the
window given by @var{position} possesses a header line (@pxref{Header
Lines}), it is @emph{not} included in the @var{row} count.
@end defun

@defun posn-actual-col-row position
Return the actual row and column in @var{position}, as a cons cell
@w{@code{(@var{col} . @var{row})}}.  The values are the actual row and
column numbers in the window given by @var{position}.  @xref{Click
Events}, for details.  The function returns @code{nil} if
@var{position} does not include actual position values; in that case
@code{posn-col-row} can be used to get approximate values.

Note that this function doesn't account for the visual width of
characters on display, like the number of visual columns taken by a
tab character or an image.  If you need the coordinates in canonical
character units, use @code{posn-col-row} instead.
@end defun

@defun posn-string position
Return the string object described by @var{position}, either
@code{nil} (which means @var{position} describes buffer text), or a
cons cell @w{@code{(@var{string} . @var{string-pos})}}.
@end defun

@defun posn-image position
Return the image object in @var{position}, either @code{nil} (if
there's no image at @var{position}), or an image spec @w{@code{(image
@dots{})}}.
@end defun

@defun posn-object position
Return the image or string object described by @var{position}, either
@code{nil} (which means @var{position} describes buffer text), an
image @w{@code{(image @dots{})}}, or a cons cell
@w{@code{(@var{string} . @var{string-pos})}}.
@end defun

@defun posn-object-x-y position
Return the pixel-based x and y coordinates relative to the upper left
corner of the object described by @var{position}, as a cons cell
@w{@code{(@var{dx} . @var{dy})}}.  If the @var{position} describes
buffer text, return the relative coordinates of the buffer-text character
closest to that position.
@end defun

@defun posn-object-width-height position
Return the pixel width and height of the object described by
@var{position}, as a cons cell @code{(@var{width} . @var{height})}.
If the @var{position} describes a buffer position, return the size of
the character at that position.
@end defun

@cindex timestamp of a mouse event
@defun posn-timestamp position
Return the timestamp in @var{position}.  This is the time at which the
event occurred, in milliseconds.
@end defun

  These functions compute a position list given particular buffer
position or screen position.  You can access the data in this position
list with the functions described above.

@defun posn-at-point &optional pos window
This function returns a position list for position @var{pos} in
@var{window}.  @var{pos} defaults to point in @var{window};
@var{window} defaults to the selected window.

@code{posn-at-point} returns @code{nil} if @var{pos} is not visible in
@var{window}.
@end defun

@defun posn-at-x-y x y &optional frame-or-window whole
This function returns position information corresponding to pixel
coordinates @var{x} and @var{y} in a specified frame or window,
@var{frame-or-window}, which defaults to the selected window.
The coordinates @var{x} and @var{y} are relative to the
frame or window used.
If @var{whole} is @code{nil}, the coordinates are relative
to the window text area, otherwise they are relative to
the entire window area including scroll bars, margins and fringes.
@end defun

@node Accessing Scroll
@subsection Accessing Scroll Bar Events
@cindex scroll bar events, data in

  These functions are useful for decoding scroll bar events.

@defun scroll-bar-event-ratio event
This function returns the fractional vertical position of a scroll bar
event within the scroll bar.  The value is a cons cell
@code{(@var{portion} . @var{whole})} containing two integers whose ratio
is the fractional position.
@end defun

@defun scroll-bar-scale ratio total
This function multiplies (in effect) @var{ratio} by @var{total},
rounding the result to an integer.  The argument @var{ratio} is not a
number, but rather a pair @code{(@var{num} . @var{denom})}---typically a
value returned by @code{scroll-bar-event-ratio}.

This function is handy for scaling a position on a scroll bar into a
buffer position.  Here's how to do that:

@example
(+ (point-min)
   (scroll-bar-scale
      (posn-x-y (event-start event))
      (- (point-max) (point-min))))
@end example

Recall that scroll bar events have two integers forming a ratio, in place
of a pair of x and y coordinates.
@end defun

@node Strings of Events
@subsection Putting Keyboard Events in Strings
@cindex keyboard events in strings
@cindex strings with keyboard events

  In most of the places where strings are used, we conceptualize the
string as containing text characters---the same kind of characters found
in buffers or files.  Occasionally Lisp programs use strings that
conceptually contain keyboard characters; for example, they may be key
sequences or keyboard macro definitions.  However, storing keyboard
characters in a string is a complex matter, for reasons of historical
compatibility, and it is not always possible.

  We recommend that new programs avoid dealing with these complexities
by not storing keyboard events in strings.  Here is how to do that:

@itemize @bullet
@item
Use vectors instead of strings for key sequences, when you plan to use
them for anything other than as arguments to @code{lookup-key} and
@code{define-key}.  For example, you can use
@code{read-key-sequence-vector} instead of @code{read-key-sequence}, and
@code{this-command-keys-vector} instead of @code{this-command-keys}.

@item
Use vectors to write key sequence constants containing meta characters,
even when passing them directly to @code{define-key}.

@item
When you have to look at the contents of a key sequence that might be a
string, use @code{listify-key-sequence} (@pxref{Event Input Misc})
first, to convert it to a list.
@end itemize

  The complexities stem from the modifier bits that keyboard input
characters can include.  Aside from the Meta modifier, none of these
modifier bits can be included in a string, and the Meta modifier is
allowed only in special cases.

  The earliest GNU Emacs versions represented meta characters as codes
in the range of 128 to 255.  At that time, the basic character codes
ranged from 0 to 127, so all keyboard character codes did fit in a
string.  Many Lisp programs used @samp{\M-} in string constants to stand
for meta characters, especially in arguments to @code{define-key} and
similar functions, and key sequences and sequences of events were always
represented as strings.

  When we added support for larger basic character codes beyond 127, and
additional modifier bits, we had to change the representation of meta
characters.  Now the flag that represents the Meta modifier in a
character is
@tex
@math{2^{27}}
@end tex
@ifnottex
2**27
@end ifnottex
and such numbers cannot be included in a string.

  To support programs with @samp{\M-} in string constants, there are
special rules for including certain meta characters in a string.
Here are the rules for interpreting a string as a sequence of input
characters:

@itemize @bullet
@item
If the keyboard character value is in the range of 0 to 127, it can go
in the string unchanged.

@item
The meta variants of those characters, with codes in the range of
@tex
@math{2^{27}}
@end tex
@ifnottex
2**27
@end ifnottex
to
@tex
@math{2^{27} + 127},
@end tex
@ifnottex
2**27+127,
@end ifnottex
can also go in the string, but you must change their
numeric values.  You must set the
@tex
@math{2^{7}}
@end tex
@ifnottex
2**7
@end ifnottex
bit instead of the
@tex
@math{2^{27}}
@end tex
@ifnottex
2**27
@end ifnottex
bit, resulting in a value between 128 and 255.  Only a unibyte string
can include these codes.

@item
Non-@acronym{ASCII} characters above 256 can be included in a multibyte string.

@item
Other keyboard character events cannot fit in a string.  This includes
keyboard events in the range of 128 to 255.
@end itemize

  Functions such as @code{read-key-sequence} that construct strings of
keyboard input characters follow these rules: they construct vectors
instead of strings, when the events won't fit in a string.

  When you use the read syntax @samp{\M-} in a string, it produces a
code in the range of 128 to 255---the same code that you get if you
modify the corresponding keyboard event to put it in the string.  Thus,
meta events in strings work consistently regardless of how they get into
the strings.

  However, most programs would do well to avoid these issues by
following the recommendations at the beginning of this section.

@node Reading Input
@section Reading Input
@cindex read input
@cindex keyboard input

  The editor command loop reads key sequences using the function
@code{read-key-sequence}, which uses @code{read-event}.  These and other
functions for event input are also available for use in Lisp programs.
See also @code{momentary-string-display} in @ref{Temporary Displays},
and @code{sit-for} in @ref{Waiting}.  @xref{Terminal Input}, for
functions and variables for controlling terminal input modes and
debugging terminal input.

  For higher-level input facilities, see @ref{Minibuffers}.

@menu
* Key Sequence Input::          How to read one key sequence.
* Reading One Event::           How to read just one event.
* Event Mod::                   How Emacs modifies events as they are read.
* Invoking the Input Method::   How reading an event uses the input method.
* Quoted Character Input::      Asking the user to specify a character.
* Event Input Misc::            How to reread or throw away input events.
@end menu

@node Key Sequence Input
@subsection Key Sequence Input
@cindex key sequence input

  The command loop reads input a key sequence at a time, by calling
@code{read-key-sequence}.  Lisp programs can also call this function;
for example, @code{describe-key} uses it to read the key to describe.

@defun read-key-sequence prompt &optional continue-echo dont-downcase-last switch-frame-ok command-loop
This function reads a key sequence and returns it as a string or
vector.  It keeps reading events until it has accumulated a complete key
sequence; that is, enough to specify a non-prefix command using the
currently active keymaps.  (Remember that a key sequence that starts
with a mouse event is read using the keymaps of the buffer in the
window that the mouse was in, not the current buffer.)

If the events are all characters and all can fit in a string, then
@code{read-key-sequence} returns a string (@pxref{Strings of Events}).
Otherwise, it returns a vector, since a vector can hold all kinds of
events---characters, symbols, and lists.  The elements of the string or
vector are the events in the key sequence.

Reading a key sequence includes translating the events in various
ways.  @xref{Translation Keymaps}.

The argument @var{prompt} is either a string to be displayed in the
echo area as a prompt, or @code{nil}, meaning not to display a prompt.
The argument @var{continue-echo}, if non-@code{nil}, means to echo
this key as a continuation of the previous key.

Normally any upper case event is converted to lower case if the
original event is undefined and the lower case equivalent is defined.
The argument @var{dont-downcase-last}, if non-@code{nil}, means do not
convert the last event to lower case.  This is appropriate for reading
a key sequence to be defined.

The argument @var{switch-frame-ok}, if non-@code{nil}, means that this
function should process a @code{switch-frame} event if the user
switches frames before typing anything.  If the user switches frames
in the middle of a key sequence, or at the start of the sequence but
@var{switch-frame-ok} is @code{nil}, then the event will be put off
until after the current key sequence.

The argument @var{command-loop}, if non-@code{nil}, means that this
key sequence is being read by something that will read commands one
after another.  It should be @code{nil} if the caller will read just
one key sequence.

In the following example, Emacs displays the prompt @samp{?} in the
echo area, and then the user types @kbd{C-x C-f}.

@example
(read-key-sequence "?")

@group
---------- Echo Area ----------
?@kbd{C-x C-f}
---------- Echo Area ----------

     @result{} "^X^F"
@end group
@end example

The function @code{read-key-sequence} suppresses quitting: @kbd{C-g}
typed while reading with this function works like any other character,
and does not set @code{quit-flag}.  @xref{Quitting}.
@end defun

@defun read-key-sequence-vector prompt &optional continue-echo dont-downcase-last switch-frame-ok command-loop
This is like @code{read-key-sequence} except that it always
returns the key sequence as a vector, never as a string.
@xref{Strings of Events}.
@end defun

@cindex upper case key sequence
@cindex downcasing in @code{lookup-key}
@cindex shift-translation
If an input character is upper-case (or has the shift modifier) and
has no key binding, but its lower-case equivalent has one, then
@code{read-key-sequence} converts the character to lower case.  Note
that @code{lookup-key} does not perform case conversion in this way.

@vindex this-command-keys-shift-translated
When reading input results in such a @dfn{shift-translation}, Emacs
sets the variable @code{this-command-keys-shift-translated} to a
non-@code{nil} value.  Lisp programs can examine this variable if they
need to modify their behavior when invoked by shift-translated keys.
For example, the function @code{handle-shift-selection} examines the
value of this variable to determine how to activate or deactivate the
region (@pxref{The Mark, handle-shift-selection}).

The function @code{read-key-sequence} also transforms some mouse events.
It converts unbound drag events into click events, and discards unbound
button-down events entirely.  It also reshuffles focus events and
miscellaneous window events so that they never appear in a key sequence
with any other events.

@cindex @code{header-line} prefix key
@cindex @code{mode-line} prefix key
@cindex @code{vertical-line} prefix key
@cindex @code{horizontal-scroll-bar} prefix key
@cindex @code{vertical-scroll-bar} prefix key
@cindex @code{menu-bar} prefix key
@cindex mouse events, in special parts of frame
When mouse events occur in special parts of a window, such as a mode
line or a scroll bar, the event type shows nothing special---it is the
same symbol that would normally represent that combination of mouse
button and modifier keys.  The information about the window part is kept
elsewhere in the event---in the coordinates.  But
@code{read-key-sequence} translates this information into imaginary
prefix keys, all of which are symbols: @code{header-line},
@code{horizontal-scroll-bar}, @code{menu-bar}, @code{mode-line},
@code{vertical-line}, and @code{vertical-scroll-bar}.  You can define
meanings for mouse clicks in special window parts by defining key
sequences using these imaginary prefix keys.

For example, if you call @code{read-key-sequence} and then click the
mouse on the window's mode line, you get two events, like this:

@example
(read-key-sequence "Click on the mode line: ")
     @result{} [mode-line
         (mouse-1
          (#<window 6 on NEWS> mode-line
           (40 . 63) 5959987))]
@end example

@defvar num-input-keys
This variable's value is the number of key sequences processed so far in
this Emacs session.  This includes key sequences read from the terminal
and key sequences read from keyboard macros being executed.
@end defvar

@node Reading One Event
@subsection Reading One Event
@cindex reading a single event
@cindex event, reading only one

  The lowest level functions for command input are @code{read-event},
@code{read-char}, and @code{read-char-exclusive}.

@defun read-event &optional prompt inherit-input-method seconds
This function reads and returns the next event of command input,
waiting if necessary until an event is available.

The returned event may come directly from the user, or from a keyboard
macro.  It is not decoded by the keyboard's input coding system
(@pxref{Terminal I/O Encoding}).

If the optional argument @var{prompt} is non-@code{nil}, it should be a
string to display in the echo area as a prompt.  Otherwise,
@code{read-event} does not display any message to indicate it is waiting
for input; instead, it prompts by echoing: it displays descriptions of
the events that led to or were read by the current command.  @xref{The
Echo Area}.

If @var{inherit-input-method} is non-@code{nil}, then the current input
method (if any) is employed to make it possible to enter a
non-@acronym{ASCII} character.  Otherwise, input method handling is disabled
for reading this event.

If @code{cursor-in-echo-area} is non-@code{nil}, then @code{read-event}
moves the cursor temporarily to the echo area, to the end of any message
displayed there.  Otherwise @code{read-event} does not move the cursor.

If @var{seconds} is non-@code{nil}, it should be a number specifying
the maximum time to wait for input, in seconds.  If no input arrives
within that time, @code{read-event} stops waiting and returns
@code{nil}.  A floating point @var{seconds} means to wait
for a fractional number of seconds.  Some systems support only a whole
number of seconds; on these systems, @var{seconds} is rounded down.
If @var{seconds} is @code{nil}, @code{read-event} waits as long as
necessary for input to arrive.

If @var{seconds} is @code{nil}, Emacs is considered idle while waiting
for user input to arrive.  Idle timers---those created with
@code{run-with-idle-timer} (@pxref{Idle Timers})---can run during this
period.  However, if @var{seconds} is non-@code{nil}, the state of
idleness remains unchanged.  If Emacs is non-idle when
@code{read-event} is called, it remains non-idle throughout the
operation of @code{read-event}; if Emacs is idle (which can happen if
the call happens inside an idle timer), it remains idle.

If @code{read-event} gets an event that is defined as a help character,
then in some cases @code{read-event} processes the event directly without
returning.  @xref{Help Functions}.  Certain other events, called
@dfn{special events}, are also processed directly within
@code{read-event} (@pxref{Special Events}).

Here is what happens if you call @code{read-event} and then press the
right-arrow function key:

@example
@group
(read-event)
     @result{} right
@end group
@end example
@end defun

@defun read-char &optional prompt inherit-input-method seconds
This function reads and returns a character input event.  If the
user generates an event which is not a character (i.e., a mouse click or
function key event), @code{read-char} signals an error.  The arguments
work as in @code{read-event}.

If the event has modifiers, Emacs attempts to resolve them and return
the code of the corresponding character.  For example, if the user
types @kbd{C-a}, the function returns 1, which is the @acronym{ASCII}
code of the @samp{C-a} character.  If some of the modifiers cannot be
reflected in the character code, @code{read-char} leaves the
unresolved modifier bits set in the returned event.  For example, if
the user types @kbd{C-M-a}, the function returns 134217729, 8000001 in
hex, i.e.@: @samp{C-a} with the Meta modifier bit set.  This value is
not a valid character code: it fails the @code{characterp} test
(@pxref{Character Codes}).  Use @code{event-basic-type}
(@pxref{Classifying Events}) to recover the character code with the
modifier bits removed; use @code{event-modifiers} to test for
modifiers in the character event returned by @code{read-char}.

In the first example below, the user types the character @kbd{1}
(@acronym{ASCII} code 49).  The second example shows a keyboard macro
definition that calls @code{read-char} from the minibuffer using
@code{eval-expression}.  @code{read-char} reads the keyboard macro's
very next character, which is @kbd{1}.  Then @code{eval-expression}
displays its return value in the echo area.

@example
@group
(read-char)
     @result{} 49
@end group

@group
;; @r{We assume here you use @kbd{M-:} to evaluate this.}
(symbol-function 'foo)
     @result{} "^[:(read-char)^M1"
@end group
@group
(execute-kbd-macro 'foo)
     @print{} 49
     @result{} nil
@end group
@end example
@end defun

@defun read-char-exclusive &optional prompt inherit-input-method seconds
This function reads and returns a character input event.  If the
user generates an event which is not a character event,
@code{read-char-exclusive} ignores it and reads another event, until it
gets a character.  The arguments work as in @code{read-event}.  The
returned value may include modifier bits, as with @code{read-char}.
@end defun

  None of the above functions suppress quitting.

@defvar num-nonmacro-input-events
This variable holds the total number of input events received so far
from the terminal---not counting those generated by keyboard macros.
@end defvar

  We emphasize that, unlike @code{read-key-sequence}, the functions
@code{read-event}, @code{read-char}, and @code{read-char-exclusive} do
not perform the translations described in @ref{Translation Keymaps}.
If you wish to read a single key taking these translations into
account, use the function @code{read-key}:

@defun read-key &optional prompt
This function reads a single key.  It is intermediate between
@code{read-key-sequence} and @code{read-event}.  Unlike the former, it
reads a single key, not a key sequence.  Unlike the latter, it does
not return a raw event, but decodes and translates the user input
according to @code{input-decode-map}, @code{local-function-key-map},
and @code{key-translation-map} (@pxref{Translation Keymaps}).

The argument @var{prompt} is either a string to be displayed in the
echo area as a prompt, or @code{nil}, meaning not to display a prompt.
@end defun

@defun read-char-choice prompt chars &optional inhibit-quit
This function uses @code{read-key} to read and return a single
character.  It ignores any input that is not a member of @var{chars},
a list of accepted characters.  Optionally, it will also ignore
keyboard-quit events while it is waiting for valid input.  If you bind
@code{help-form} (@pxref{Help Functions}) to a non-@code{nil} value
while calling @code{read-char-choice}, then pressing @code{help-char}
causes it to evaluate @code{help-form} and display the result.  It
then continues to wait for a valid input character, or keyboard-quit.
@end defun

@defun read-multiple-choice prompt choices
Ask user a multiple choice question.  @var{prompt} should be a string
that will be displayed as the prompt.

@var{choices} is an alist where the first element in each entry is a
character to be entered, the second element is a short name for the
entry to be displayed while prompting (if there's room, it might be
shortened), and the third, optional entry is a longer explanation that
will be displayed in a help buffer if the user requests more help.

The return value is the matching value from @var{choices}.

@lisp
(read-multiple-choice
 "Continue connecting?"
 '((?a "always" "Accept certificate for this and future sessions.")
   (?s "session only" "Accept certificate this session only.")
   (?n "no" "Refuse to use certificate, close connection.")))
@end lisp

The @code{read-multiple-choice-face} face is used to highlight the
matching characters in the name string on graphical terminals.

@end defun

@node Event Mod
@subsection Modifying and Translating Input Events
@cindex modifiers of events
@cindex translating input events
@cindex event translation

  Emacs modifies every event it reads according to
@code{extra-keyboard-modifiers}, then translates it through
@code{keyboard-translate-table} (if applicable), before returning it
from @code{read-event}.

@defvar extra-keyboard-modifiers
This variable lets Lisp programs ``press'' the modifier keys on the
keyboard.  The value is a character.  Only the modifiers of the
character matter.  Each time the user types a keyboard key, it is
altered as if those modifier keys were held down.  For instance, if
you bind @code{extra-keyboard-modifiers} to @code{?\C-\M-a}, then all
keyboard input characters typed during the scope of the binding will
have the control and meta modifiers applied to them.  The character
@code{?\C-@@}, equivalent to the integer 0, does not count as a control
character for this purpose, but as a character with no modifiers.
Thus, setting @code{extra-keyboard-modifiers} to zero cancels any
modification.

When using a window system, the program can press any of the
modifier keys in this way.  Otherwise, only the @key{CTL} and @key{META}
keys can be virtually pressed.

Note that this variable applies only to events that really come from
the keyboard, and has no effect on mouse events or any other events.
@end defvar

@defvar keyboard-translate-table
This terminal-local variable is the translate table for keyboard
characters.  It lets you reshuffle the keys on the keyboard without
changing any command bindings.  Its value is normally a char-table, or
else @code{nil}.  (It can also be a string or vector, but this is
considered obsolete.)

If @code{keyboard-translate-table} is a char-table
(@pxref{Char-Tables}), then each character read from the keyboard is
looked up in this char-table.  If the value found there is
non-@code{nil}, then it is used instead of the actual input character.

Note that this translation is the first thing that happens to a
character after it is read from the terminal.  Record-keeping features
such as @code{recent-keys} and dribble files record the characters after
translation.

Note also that this translation is done before the characters are
supplied to input methods (@pxref{Input Methods}).  Use
@code{translation-table-for-input} (@pxref{Translation of Characters}),
if you want to translate characters after input methods operate.
@end defvar

@defun keyboard-translate from to
This function modifies @code{keyboard-translate-table} to translate
character code @var{from} into character code @var{to}.  It creates
the keyboard translate table if necessary.
@end defun

  Here's an example of using the @code{keyboard-translate-table} to
make @kbd{C-x}, @kbd{C-c} and @kbd{C-v} perform the cut, copy and paste
operations:

@example
(keyboard-translate ?\C-x 'control-x)
(keyboard-translate ?\C-c 'control-c)
(keyboard-translate ?\C-v 'control-v)
(global-set-key [control-x] 'kill-region)
(global-set-key [control-c] 'kill-ring-save)
(global-set-key [control-v] 'yank)
@end example

@noindent
On a graphical terminal that supports extended @acronym{ASCII} input,
you can still get the standard Emacs meanings of one of those
characters by typing it with the shift key.  That makes it a different
character as far as keyboard translation is concerned, but it has the
same usual meaning.

  @xref{Translation Keymaps}, for mechanisms that translate event sequences
at the level of @code{read-key-sequence}.

@node Invoking the Input Method
@subsection Invoking the Input Method
@cindex invoking input method

  The event-reading functions invoke the current input method, if any
(@pxref{Input Methods}).  If the value of @code{input-method-function}
is non-@code{nil}, it should be a function; when @code{read-event} reads
a printing character (including @key{SPC}) with no modifier bits, it
calls that function, passing the character as an argument.

@defvar input-method-function
If this is non-@code{nil}, its value specifies the current input method
function.

@strong{Warning:} don't bind this variable with @code{let}.  It is often
buffer-local, and if you bind it around reading input (which is exactly
when you @emph{would} bind it), switching buffers asynchronously while
Emacs is waiting will cause the value to be restored in the wrong
buffer.
@end defvar

  The input method function should return a list of events which should
be used as input.  (If the list is @code{nil}, that means there is no
input, so @code{read-event} waits for another event.)  These events are
processed before the events in @code{unread-command-events}
(@pxref{Event Input Misc}).  Events
returned by the input method function are not passed to the input method
function again, even if they are printing characters with no modifier
bits.

  If the input method function calls @code{read-event} or
@code{read-key-sequence}, it should bind @code{input-method-function} to
@code{nil} first, to prevent recursion.

  The input method function is not called when reading the second and
subsequent events of a key sequence.  Thus, these characters are not
subject to input method processing.  The input method function should
test the values of @code{overriding-local-map} and
@code{overriding-terminal-local-map}; if either of these variables is
non-@code{nil}, the input method should put its argument into a list and
return that list with no further processing.

@node Quoted Character Input
@subsection Quoted Character Input
@cindex quoted character input

  You can use the function @code{read-quoted-char} to ask the user to
specify a character, and allow the user to specify a control or meta
character conveniently, either literally or as an octal character code.
The command @code{quoted-insert} uses this function.

@defun read-quoted-char &optional prompt
@cindex octal character input
@cindex control characters, reading
@cindex nonprinting characters, reading
This function is like @code{read-char}, except that if the first
character read is an octal digit (0--7), it reads any number of octal
digits (but stopping if a non-octal digit is found), and returns the
character represented by that numeric character code.  If the
character that terminates the sequence of octal digits is @key{RET},
it is discarded.  Any other terminating character is used as input
after this function returns.

Quitting is suppressed when the first character is read, so that the
user can enter a @kbd{C-g}.  @xref{Quitting}.

If @var{prompt} is supplied, it specifies a string for prompting the
user.  The prompt string is always displayed in the echo area, followed
by a single @samp{-}.

In the following example, the user types in the octal number 177 (which
is 127 in decimal).

@example
(read-quoted-char "What character")

@group
---------- Echo Area ----------
What character @kbd{1 7 7}-
---------- Echo Area ----------

     @result{} 127
@end group
@end example
@end defun

@need 2000
@node Event Input Misc
@subsection Miscellaneous Event Input Features

This section describes how to peek ahead at events without using
them up, how to check for pending input, and how to discard pending
input.  See also the function @code{read-passwd} (@pxref{Reading a
Password}).

@defvar unread-command-events
@cindex next input
@cindex peeking at input
This variable holds a list of events waiting to be read as command
input.  The events are used in the order they appear in the list, and
removed one by one as they are used.

The variable is needed because in some cases a function reads an event
and then decides not to use it.  Storing the event in this variable
causes it to be processed normally, by the command loop or by the
functions to read command input.

@cindex prefix argument unreading
For example, the function that implements numeric prefix arguments reads
any number of digits.  When it finds a non-digit event, it must unread
the event so that it can be read normally by the command loop.
Likewise, incremental search uses this feature to unread events with no
special meaning in a search, because these events should exit the search
and then execute normally.

The reliable and easy way to extract events from a key sequence so as
to put them in @code{unread-command-events} is to use
@code{listify-key-sequence} (see below).

Normally you add events to the front of this list, so that the events
most recently unread will be reread first.

Events read from this list are not normally added to the current
command's key sequence (as returned by, e.g., @code{this-command-keys}),
as the events will already have been added once as they were read for
the first time.  An element of the form @w{@code{(t . @var{event})}}
forces @var{event} to be added to the current command's key sequence.
@end defvar

@defun listify-key-sequence key
This function converts the string or vector @var{key} to a list of
individual events, which you can put in @code{unread-command-events}.
@end defun

@defun input-pending-p &optional check-timers
@cindex waiting for command key input
This function determines whether any command input is currently
available to be read.  It returns immediately, with value @code{t} if
there is available input, @code{nil} otherwise.  On rare occasions it
may return @code{t} when no input is available.

If the optional argument @var{check-timers} is non-@code{nil}, then if
no input is available, Emacs runs any timers which are ready.
@xref{Timers}.
@end defun

@defvar last-input-event
This variable records the last terminal input event read, whether
as part of a command or explicitly by a Lisp program.

In the example below, the Lisp program reads the character @kbd{1},
@acronym{ASCII} code 49.  It becomes the value of @code{last-input-event},
while @kbd{C-e} (we assume @kbd{C-x C-e} command is used to evaluate
this expression) remains the value of @code{last-command-event}.

@example
@group
(progn (print (read-char))
       (print last-command-event)
       last-input-event)
     @print{} 49
     @print{} 5
     @result{} 49
@end group
@end example
@end defvar

@defmac while-no-input body@dots{}
This construct runs the @var{body} forms and returns the value of the
last one---but only if no input arrives.  If any input arrives during
the execution of the @var{body} forms, it aborts them (working much
like a quit).  The @code{while-no-input} form returns @code{nil} if
aborted by a real quit, and returns @code{t} if aborted by arrival of
other input.

If a part of @var{body} binds @code{inhibit-quit} to non-@code{nil},
arrival of input during those parts won't cause an abort until
the end of that part.

If you want to be able to distinguish all possible values computed
by @var{body} from both kinds of abort conditions, write the code
like this:

@example
(while-no-input
  (list
    (progn . @var{body})))
@end example
@end defmac

@defvar while-no-input-ignore-events
This variable allow setting which special events @code{while-no-input}
should ignore.  It is a list of symbols.

@end defvar

@defun discard-input
@cindex flushing input
@cindex discarding input
@cindex keyboard macro, terminating
This function discards the contents of the terminal input buffer and
cancels any keyboard macro that might be in the process of definition.
It returns @code{nil}.

In the following example, the user may type a number of characters right
after starting the evaluation of the form.  After the @code{sleep-for}
finishes sleeping, @code{discard-input} discards any characters typed
during the sleep.

@example
(progn (sleep-for 2)
       (discard-input))
     @result{} nil
@end example
@end defun

@node Special Events
@section Special Events

@cindex special events
Certain @dfn{special events} are handled at a very low level---as soon
as they are read.  The @code{read-event} function processes these
events itself, and never returns them.  Instead, it keeps waiting for
the first event that is not special and returns that one.

  Special events do not echo, they are never grouped into key
sequences, and they never appear in the value of
@code{last-command-event} or @code{(this-command-keys)}.  They do not
discard a numeric argument, they cannot be unread with
@code{unread-command-events}, they may not appear in a keyboard macro,
and they are not recorded in a keyboard macro while you are defining
one.

  Special events do, however, appear in @code{last-input-event}
immediately after they are read, and this is the way for the event's
definition to find the actual event.

  The events types @code{iconify-frame}, @code{make-frame-visible},
@code{delete-frame}, @code{drag-n-drop}, @code{language-change}, and
user signals like @code{sigusr1} are normally handled in this way.
The keymap which defines how to handle special events---and which
events are special---is in the variable @code{special-event-map}
(@pxref{Active Keymaps}).

@node Waiting
@section Waiting for Elapsed Time or Input
@cindex waiting

  The wait functions are designed to wait for a certain amount of time
to pass or until there is input.  For example, you may wish to pause in
the middle of a computation to allow the user time to view the display.
@code{sit-for} pauses and updates the screen, and returns immediately if
input comes in, while @code{sleep-for} pauses without updating the
screen.

@defun sit-for seconds &optional nodisp
This function performs redisplay (provided there is no pending input
from the user), then waits @var{seconds} seconds, or until input is
available.  The usual purpose of @code{sit-for} is to give the user
time to read text that you display.  The value is @code{t} if
@code{sit-for} waited the full time with no input arriving
(@pxref{Event Input Misc}).  Otherwise, the value is @code{nil}.

The argument @var{seconds} need not be an integer.  If it is floating
point, @code{sit-for} waits for a fractional number of seconds.
Some systems support only a whole number of seconds; on these systems,
@var{seconds} is rounded down.

The expression @code{(sit-for 0)} is equivalent to @code{(redisplay)},
i.e., it requests a redisplay, without any delay, if there is no pending input.
@xref{Forcing Redisplay}.

If @var{nodisp} is non-@code{nil}, then @code{sit-for} does not
redisplay, but it still returns as soon as input is available (or when
the timeout elapses).

In batch mode (@pxref{Batch Mode}), @code{sit-for} cannot be
interrupted, even by input from the standard input descriptor.  It is
thus equivalent to @code{sleep-for}, which is described below.

It is also possible to call @code{sit-for} with three arguments,
as @code{(sit-for @var{seconds} @var{millisec} @var{nodisp})},
but that is considered obsolete.
@end defun

@defun sleep-for seconds &optional millisec
This function simply pauses for @var{seconds} seconds without updating
the display.  It pays no attention to available input.  It returns
@code{nil}.

The argument @var{seconds} need not be an integer.  If it is floating
point, @code{sleep-for} waits for a fractional number of seconds.
Some systems support only a whole number of seconds; on these systems,
@var{seconds} is rounded down.

The optional argument @var{millisec} specifies an additional waiting
period measured in milliseconds.  This adds to the period specified by
@var{seconds}.  If the system doesn't support waiting fractions of a
second, you get an error if you specify nonzero @var{millisec}.

Use @code{sleep-for} when you wish to guarantee a delay.
@end defun

  @xref{Time of Day}, for functions to get the current time.

@node Quitting
@section Quitting
@cindex @kbd{C-g}
@cindex quitting
@cindex interrupt Lisp functions

  Typing @kbd{C-g} while a Lisp function is running causes Emacs to
@dfn{quit} whatever it is doing.  This means that control returns to the
innermost active command loop.

  Typing @kbd{C-g} while the command loop is waiting for keyboard input
does not cause a quit; it acts as an ordinary input character.  In the
simplest case, you cannot tell the difference, because @kbd{C-g}
normally runs the command @code{keyboard-quit}, whose effect is to quit.
However, when @kbd{C-g} follows a prefix key, they combine to form an
undefined key.  The effect is to cancel the prefix key as well as any
prefix argument.

  In the minibuffer, @kbd{C-g} has a different definition: it aborts out
of the minibuffer.  This means, in effect, that it exits the minibuffer
and then quits.  (Simply quitting would return to the command loop
@emph{within} the minibuffer.)  The reason why @kbd{C-g} does not quit
directly when the command reader is reading input is so that its meaning
can be redefined in the minibuffer in this way.  @kbd{C-g} following a
prefix key is not redefined in the minibuffer, and it has its normal
effect of canceling the prefix key and prefix argument.  This too
would not be possible if @kbd{C-g} always quit directly.

  When @kbd{C-g} does directly quit, it does so by setting the variable
@code{quit-flag} to @code{t}.  Emacs checks this variable at appropriate
times and quits if it is not @code{nil}.  Setting @code{quit-flag}
non-@code{nil} in any way thus causes a quit.

  At the level of C code, quitting cannot happen just anywhere; only at the
special places that check @code{quit-flag}.  The reason for this is
that quitting at other places might leave an inconsistency in Emacs's
internal state.  Because quitting is delayed until a safe place, quitting
cannot make Emacs crash.

  Certain functions such as @code{read-key-sequence} or
@code{read-quoted-char} prevent quitting entirely even though they wait
for input.  Instead of quitting, @kbd{C-g} serves as the requested
input.  In the case of @code{read-key-sequence}, this serves to bring
about the special behavior of @kbd{C-g} in the command loop.  In the
case of @code{read-quoted-char}, this is so that @kbd{C-q} can be used
to quote a @kbd{C-g}.

@cindex preventing quitting
  You can prevent quitting for a portion of a Lisp function by binding
the variable @code{inhibit-quit} to a non-@code{nil} value.  Then,
although @kbd{C-g} still sets @code{quit-flag} to @code{t} as usual, the
usual result of this---a quit---is prevented.  Eventually,
@code{inhibit-quit} will become @code{nil} again, such as when its
binding is unwound at the end of a @code{let} form.  At that time, if
@code{quit-flag} is still non-@code{nil}, the requested quit happens
immediately.  This behavior is ideal when you wish to make sure that
quitting does not happen within a critical section of the program.

@cindex @code{read-quoted-char} quitting
  In some functions (such as @code{read-quoted-char}), @kbd{C-g} is
handled in a special way that does not involve quitting.  This is done
by reading the input with @code{inhibit-quit} bound to @code{t}, and
setting @code{quit-flag} to @code{nil} before @code{inhibit-quit}
becomes @code{nil} again.  This excerpt from the definition of
@code{read-quoted-char} shows how this is done; it also shows that
normal quitting is permitted after the first character of input.

@example
(defun read-quoted-char (&optional prompt)
  "@dots{}@var{documentation}@dots{}"
  (let ((message-log-max nil) done (first t) (code 0) char)
    (while (not done)
      (let ((inhibit-quit first)
            @dots{})
        (and prompt (message "%s-" prompt))
        (setq char (read-event))
        (if inhibit-quit (setq quit-flag nil)))
      @r{@dots{}set the variable @code{code}@dots{}})
    code))
@end example

@defvar quit-flag
If this variable is non-@code{nil}, then Emacs quits immediately, unless
@code{inhibit-quit} is non-@code{nil}.  Typing @kbd{C-g} ordinarily sets
@code{quit-flag} non-@code{nil}, regardless of @code{inhibit-quit}.
@end defvar

@defvar inhibit-quit
This variable determines whether Emacs should quit when @code{quit-flag}
is set to a value other than @code{nil}.  If @code{inhibit-quit} is
non-@code{nil}, then @code{quit-flag} has no special effect.
@end defvar

@defmac with-local-quit body@dots{}
This macro executes @var{body} forms in sequence, but allows quitting, at
least locally, within @var{body} even if @code{inhibit-quit} was
non-@code{nil} outside this construct.  It returns the value of the
last form in @var{body}, unless exited by quitting, in which case
it returns @code{nil}.

If @code{inhibit-quit} is @code{nil} on entry to @code{with-local-quit},
it only executes the @var{body}, and setting @code{quit-flag} causes
a normal quit.  However, if @code{inhibit-quit} is non-@code{nil} so
that ordinary quitting is delayed, a non-@code{nil} @code{quit-flag}
triggers a special kind of local quit.  This ends the execution of
@var{body} and exits the @code{with-local-quit} body with
@code{quit-flag} still non-@code{nil}, so that another (ordinary) quit
will happen as soon as that is allowed.  If @code{quit-flag} is
already non-@code{nil} at the beginning of @var{body}, the local quit
happens immediately and the body doesn't execute at all.

This macro is mainly useful in functions that can be called from
timers, process filters, process sentinels, @code{pre-command-hook},
@code{post-command-hook}, and other places where @code{inhibit-quit} is
normally bound to @code{t}.
@end defmac

@deffn Command keyboard-quit
This function signals the @code{quit} condition with @code{(signal 'quit
nil)}.  This is the same thing that quitting does.  (See @code{signal}
in @ref{Errors}.)
@end deffn

  You can specify a character other than @kbd{C-g} to use for quitting.
See the function @code{set-input-mode} in @ref{Input Modes}.

@node Prefix Command Arguments
@section Prefix Command Arguments
@cindex prefix argument
@cindex raw prefix argument
@cindex numeric prefix argument

  Most Emacs commands can use a @dfn{prefix argument}, a number
specified before the command itself.  (Don't confuse prefix arguments
with prefix keys.)  The prefix argument is at all times represented by a
value, which may be @code{nil}, meaning there is currently no prefix
argument.  Each command may use the prefix argument or ignore it.

  There are two representations of the prefix argument: @dfn{raw} and
@dfn{numeric}.  The editor command loop uses the raw representation
internally, and so do the Lisp variables that store the information, but
commands can request either representation.

  Here are the possible values of a raw prefix argument:

@itemize @bullet
@item
@code{nil}, meaning there is no prefix argument.  Its numeric value is
1, but numerous commands make a distinction between @code{nil} and the
integer 1.

@item
An integer, which stands for itself.

@item
A list of one element, which is an integer.  This form of prefix
argument results from one or a succession of @kbd{C-u}s with no
digits.  The numeric value is the integer in the list, but some
commands make a distinction between such a list and an integer alone.

@item
The symbol @code{-}.  This indicates that @kbd{M--} or @kbd{C-u -} was
typed, without following digits.  The equivalent numeric value is
@minus{}1, but some commands make a distinction between the integer
@minus{}1 and the symbol @code{-}.
@end itemize

We illustrate these possibilities by calling the following function with
various prefixes:

@example
@group
(defun display-prefix (arg)
  "Display the value of the raw prefix arg."
  (interactive "P")
  (message "%s" arg))
@end group
@end example

@noindent
Here are the results of calling @code{display-prefix} with various
raw prefix arguments:

@example
        M-x display-prefix  @print{} nil

C-u     M-x display-prefix  @print{} (4)

C-u C-u M-x display-prefix  @print{} (16)

C-u 3   M-x display-prefix  @print{} 3

M-3     M-x display-prefix  @print{} 3      ; @r{(Same as @code{C-u 3}.)}

C-u -   M-x display-prefix  @print{} -

M--     M-x display-prefix  @print{} -      ; @r{(Same as @code{C-u -}.)}

C-u - 7 M-x display-prefix  @print{} -7

M-- 7   M-x display-prefix  @print{} -7     ; @r{(Same as @code{C-u -7}.)}
@end example

  Emacs uses two variables to store the prefix argument:
@code{prefix-arg} and @code{current-prefix-arg}.  Commands such as
@code{universal-argument} that set up prefix arguments for other
commands store them in @code{prefix-arg}.  In contrast,
@code{current-prefix-arg} conveys the prefix argument to the current
command, so setting it has no effect on the prefix arguments for future
commands.

  Normally, commands specify which representation to use for the prefix
argument, either numeric or raw, in the @code{interactive} specification.
(@xref{Using Interactive}.)  Alternatively, functions may look at the
value of the prefix argument directly in the variable
@code{current-prefix-arg}, but this is less clean.

@defun prefix-numeric-value arg
This function returns the numeric meaning of a valid raw prefix argument
value, @var{arg}.  The argument may be a symbol, a number, or a list.
If it is @code{nil}, the value 1 is returned; if it is @code{-}, the
value @minus{}1 is returned; if it is a number, that number is returned;
if it is a list, the @sc{car} of that list (which should be a number) is
returned.
@end defun

@defvar current-prefix-arg
This variable holds the raw prefix argument for the @emph{current}
command.  Commands may examine it directly, but the usual method for
accessing it is with @code{(interactive "P")}.
@end defvar

@defvar prefix-arg
The value of this variable is the raw prefix argument for the
@emph{next} editing command.  Commands such as @code{universal-argument}
that specify prefix arguments for the following command work by setting
this variable.
@end defvar

@defvar last-prefix-arg
The raw prefix argument value used by the previous command.
@end defvar

  The following commands exist to set up prefix arguments for the
following command.  Do not call them for any other reason.

@deffn Command universal-argument
This command reads input and specifies a prefix argument for the
following command.  Don't call this command yourself unless you know
what you are doing.
@end deffn

@deffn Command digit-argument arg
This command adds to the prefix argument for the following command.  The
argument @var{arg} is the raw prefix argument as it was before this
command; it is used to compute the updated prefix argument.  Don't call
this command yourself unless you know what you are doing.
@end deffn

@deffn Command negative-argument arg
This command adds to the numeric argument for the next command.  The
argument @var{arg} is the raw prefix argument as it was before this
command; its value is negated to form the new prefix argument.  Don't
call this command yourself unless you know what you are doing.
@end deffn

@node Recursive Editing
@section Recursive Editing
@cindex recursive command loop
@cindex recursive editing level
@cindex command loop, recursive

  The Emacs command loop is entered automatically when Emacs starts up.
This top-level invocation of the command loop never exits; it keeps
running as long as Emacs does.  Lisp programs can also invoke the
command loop.  Since this makes more than one activation of the command
loop, we call it @dfn{recursive editing}.  A recursive editing level has
the effect of suspending whatever command invoked it and permitting the
user to do arbitrary editing before resuming that command.

  The commands available during recursive editing are the same ones
available in the top-level editing loop and defined in the keymaps.
Only a few special commands exit the recursive editing level; the others
return to the recursive editing level when they finish.  (The special
commands for exiting are always available, but they do nothing when
recursive editing is not in progress.)

  All command loops, including recursive ones, set up all-purpose error
handlers so that an error in a command run from the command loop will
not exit the loop.

@cindex minibuffer input
  Minibuffer input is a special kind of recursive editing.  It has a few
special wrinkles, such as enabling display of the minibuffer and the
minibuffer window, but fewer than you might suppose.  Certain keys
behave differently in the minibuffer, but that is only because of the
minibuffer's local map; if you switch windows, you get the usual Emacs
commands.

@cindex @code{throw} example
@kindex exit
@cindex exit recursive editing
@cindex aborting
  To invoke a recursive editing level, call the function
@code{recursive-edit}.  This function contains the command loop; it also
contains a call to @code{catch} with tag @code{exit}, which makes it
possible to exit the recursive editing level by throwing to @code{exit}
(@pxref{Catch and Throw}).  If you throw a value other than @code{t},
then @code{recursive-edit} returns normally to the function that called
it.  The command @kbd{C-M-c} (@code{exit-recursive-edit}) does this.
Throwing a @code{t} value causes @code{recursive-edit} to quit, so that
control returns to the command loop one level up.  This is called
@dfn{aborting}, and is done by @kbd{C-]} (@code{abort-recursive-edit}).

  Most applications should not use recursive editing, except as part of
using the minibuffer.  Usually it is more convenient for the user if you
change the major mode of the current buffer temporarily to a special
major mode, which should have a command to go back to the previous mode.
(The @kbd{e} command in Rmail uses this technique.)  Or, if you wish to
give the user different text to edit recursively, create and select
a new buffer in a special mode.  In this mode, define a command to
complete the processing and go back to the previous buffer.  (The
@kbd{m} command in Rmail does this.)

  Recursive edits are useful in debugging.  You can insert a call to
@code{debug} into a function definition as a sort of breakpoint, so that
you can look around when the function gets there.  @code{debug} invokes
a recursive edit but also provides the other features of the debugger.

  Recursive editing levels are also used when you type @kbd{C-r} in
@code{query-replace} or use @kbd{C-x q} (@code{kbd-macro-query}).

@deffn Command recursive-edit
@cindex suspend evaluation
This function invokes the editor command loop.  It is called
automatically by the initialization of Emacs, to let the user begin
editing.  When called from a Lisp program, it enters a recursive editing
level.

If the current buffer is not the same as the selected window's buffer,
@code{recursive-edit} saves and restores the current buffer.  Otherwise,
if you switch buffers, the buffer you switched to is current after
@code{recursive-edit} returns.

In the following example, the function @code{simple-rec} first
advances point one word, then enters a recursive edit, printing out a
message in the echo area.  The user can then do any editing desired, and
then type @kbd{C-M-c} to exit and continue executing @code{simple-rec}.

@example
(defun simple-rec ()
  (forward-word 1)
  (message "Recursive edit in progress")
  (recursive-edit)
  (forward-word 1))
     @result{} simple-rec
(simple-rec)
     @result{} nil
@end example
@end deffn

@deffn Command exit-recursive-edit
This function exits from the innermost recursive edit (including
minibuffer input).  Its definition is effectively @code{(throw 'exit
nil)}.
@end deffn

@deffn Command abort-recursive-edit
This function aborts the command that requested the innermost recursive
edit (including minibuffer input), by signaling @code{quit}
after exiting the recursive edit.  Its definition is effectively
@code{(throw 'exit t)}.  @xref{Quitting}.
@end deffn

@deffn Command top-level
This function exits all recursive editing levels; it does not return a
value, as it jumps completely out of any computation directly back to
the main command loop.
@end deffn

@defun recursion-depth
This function returns the current depth of recursive edits.  When no
recursive edit is active, it returns 0.
@end defun

@node Disabling Commands
@section Disabling Commands
@cindex disabled command

  @dfn{Disabling a command} marks the command as requiring user
confirmation before it can be executed.  Disabling is used for commands
which might be confusing to beginning users, to prevent them from using
the commands by accident.

@kindex disabled
  The low-level mechanism for disabling a command is to put a
non-@code{nil} @code{disabled} property on the Lisp symbol for the
command.  These properties are normally set up by the user's
init file (@pxref{Init File}) with Lisp expressions such as this:

@example
(put 'upcase-region 'disabled t)
@end example

@noindent
For a few commands, these properties are present by default (you can
remove them in your init file if you wish).

  If the value of the @code{disabled} property is a string, the message
saying the command is disabled includes that string.  For example:

@example
(put 'delete-region 'disabled
     "Text deleted this way cannot be yanked back!\n")
@end example

  @xref{Disabling,,, emacs, The GNU Emacs Manual}, for the details on
what happens when a disabled command is invoked interactively.
Disabling a command has no effect on calling it as a function from Lisp
programs.

@deffn Command enable-command command
Allow @var{command} (a symbol) to be executed without special
confirmation from now on, and alter the user's init file (@pxref{Init
File}) so that this will apply to future sessions.
@end deffn

@deffn Command disable-command command
Require special confirmation to execute @var{command} from now on, and
alter the user's init file so that this will apply to future sessions.
@end deffn

@defvar disabled-command-function
The value of this variable should be a function.  When the user
invokes a disabled command interactively, this function is called
instead of the disabled command.  It can use @code{this-command-keys}
to determine what the user typed to run the command, and thus find the
command itself.

The value may also be @code{nil}.  Then all commands work normally,
even disabled ones.

By default, the value is a function that asks the user whether to
proceed.
@end defvar

@node Command History
@section Command History
@cindex command history
@cindex complex command
@cindex history of commands

  The command loop keeps a history of the complex commands that have
been executed, to make it convenient to repeat these commands.  A
@dfn{complex command} is one for which the interactive argument reading
uses the minibuffer.  This includes any @kbd{M-x} command, any
@kbd{M-:} command, and any command whose @code{interactive}
specification reads an argument from the minibuffer.  Explicit use of
the minibuffer during the execution of the command itself does not cause
the command to be considered complex.

@defvar command-history
This variable's value is a list of recent complex commands, each
represented as a form to evaluate.  It continues to accumulate all
complex commands for the duration of the editing session, but when it
reaches the maximum size (@pxref{Minibuffer History}), the oldest
elements are deleted as new ones are added.

@example
@group
command-history
@result{} ((switch-to-buffer "chistory.texi")
    (describe-key "^X^[")
    (visit-tags-table "~/emacs/src/")
    (find-tag "repeat-complex-command"))
@end group
@end example
@end defvar

  This history list is actually a special case of minibuffer history
(@pxref{Minibuffer History}), with one special twist: the elements are
expressions rather than strings.

  There are a number of commands devoted to the editing and recall of
previous commands.  The commands @code{repeat-complex-command}, and
@code{list-command-history} are described in the user manual
(@pxref{Repetition,,, emacs, The GNU Emacs Manual}).  Within the
minibuffer, the usual minibuffer history commands are available.

@node Keyboard Macros
@section Keyboard Macros
@cindex keyboard macros

  A @dfn{keyboard macro} is a canned sequence of input events that can
be considered a command and made the definition of a key.  The Lisp
representation of a keyboard macro is a string or vector containing the
events.  Don't confuse keyboard macros with Lisp macros
(@pxref{Macros}).

@defun execute-kbd-macro kbdmacro &optional count loopfunc
This function executes @var{kbdmacro} as a sequence of events.  If
@var{kbdmacro} is a string or vector, then the events in it are executed
exactly as if they had been input by the user.  The sequence is
@emph{not} expected to be a single key sequence; normally a keyboard
macro definition consists of several key sequences concatenated.

If @var{kbdmacro} is a symbol, then its function definition is used in
place of @var{kbdmacro}.  If that is another symbol, this process repeats.
Eventually the result should be a string or vector.  If the result is
not a symbol, string, or vector, an error is signaled.

The argument @var{count} is a repeat count; @var{kbdmacro} is executed that
many times.  If @var{count} is omitted or @code{nil}, @var{kbdmacro} is
executed once.  If it is 0, @var{kbdmacro} is executed over and over until it
encounters an error or a failing search.

If @var{loopfunc} is non-@code{nil}, it is a function that is called,
without arguments, prior to each iteration of the macro.  If
@var{loopfunc} returns @code{nil}, then this stops execution of the macro.

@xref{Reading One Event}, for an example of using @code{execute-kbd-macro}.
@end defun

@defvar executing-kbd-macro
This variable contains the string or vector that defines the keyboard
macro that is currently executing.  It is @code{nil} if no macro is
currently executing.  A command can test this variable so as to behave
differently when run from an executing macro.  Do not set this variable
yourself.
@end defvar

@defvar defining-kbd-macro
This variable is non-@code{nil} if and only if a keyboard macro is
being defined.  A command can test this variable so as to behave
differently while a macro is being defined.  The value is
@code{append} while appending to the definition of an existing macro.
The commands @code{start-kbd-macro}, @code{kmacro-start-macro} and
@code{end-kbd-macro} set this variable---do not set it yourself.

The variable is always local to the current terminal and cannot be
buffer-local.  @xref{Multiple Terminals}.
@end defvar

@defvar last-kbd-macro
This variable is the definition of the most recently defined keyboard
macro.  Its value is a string or vector, or @code{nil}.

The variable is always local to the current terminal and cannot be
buffer-local.  @xref{Multiple Terminals}.
@end defvar

@defvar kbd-macro-termination-hook
This normal hook is run when a keyboard macro terminates, regardless
of what caused it to terminate (reaching the macro end or an error
which ended the macro prematurely).
@end defvar
