@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-1999, 2001-2019 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Command Loop
@chapter Командный Цикл
@cindex editor command loop
@cindex command loop

  Когда запускается Emacs, он почти сразу же попадает в
@dfn{редактор командного цикла}.  Этот цикл считывает ключевые
последовательности, выполняет их определения и отображает результаты.  В
этой главе описывается, как это делается, и подпрограммы, которые позволяют
программам на Lisp это делать.

@menu
* Command Overview::    Как цикл команд читает команды.
* Defining Commands::   Определение, как функция должна читать аргументы.
* Interactive Call::    Вызов команды для чтения аргументов.
* Distinguish Interactive:: Различие выполнения интерактивного вызова команды.
* Command Loop Info::   Переменные, задаваемые командным циклом, которые можно проверить.
* Adjusting Point::     Управление точкой после команды.
* Input Events::        Как выглядит ввод, когда его читают.
* Reading Input::       Как читать события ввода с клавиатуры или мыши.
* Special Events::      События обрабатываются немедленно и индивидуально.
* Waiting::             Ожидание ввода пользователя или истекание времени.
* Quitting::            Как работает @kbd{C-g}.  Как поймать или отложить выход.
* Prefix Command Arguments::    Как работают команды для установки префиксного аргумента.
* Recursive Editing::   Ввод рекурсивного редактирования и почему обычно
                               этого не следует делать.
* Disabling Commands::  Как цикл команд обрабатывает отключенные команды.
* Command History::     Как настраивается история команд и как к ней можно
                               получить доступ.
* Keyboard Macros::     Как реализованы макросы клавиатуры.
@end menu

@node Command Overview
@section Командный Цикл Обзор

  Первое, что должен сделать командный цикл, - это прочитать
последовательность ключей, которая представляет собой последовательность
событий ввода, которая преобразуется в команду.  Это делается путем вызова
функции @code{read-key-sequence}.  Программы на Lisp также могут вызывать
эту функцию (@pxref{Key Sequence Input}).  Они также могут читать ввод на
более низком уровне с помощью @code{read-key} или @code{read-event}
(@pxref{Reading One Event}) или отклонять ожидающий ввод с помощью
@code{discard-input} (@pxref{Event Input Misc}).

  Последовательность ключей преобразуется в команду через текущие активные
ключевые карты.  @xref{Key Lookup}, чтобы узнать, как это делается.
Результатом должен быть макрос клавиатуры или интерактивно вызываемая
функция.  Если ключ - @kbd{M-x}, он считывает имя другой команды, которую
затем вызывает.  Делается это командой @code{execute-extended-command}
(@pxref{Interactive Call}).

  Перед выполнением команды Emacs запускает @code{undo-boundary} для
создания границы отмены.  @xref{Maintaining Undo}.

  Чтобы выполнить команду, Emacs сначала читает ее аргументы, вызывая
@code{command-execute} (@pxref{Interactive Call}).  Для команд, написанных
на Lisp, спецификация @code{interactive} говорит, как читать аргументы.  Это
может использовать префиксный аргумент (@pxref{Prefix Command Arguments})
или может читаться с подсказкой в минибуфере (@pxref{Minibuffers}).
Например, команда @code{find-file} имеет спецификацию @code{interactive}, в
которой говорится, что имя файла следует читать с помощью минибуфера.  Тело
функции @code{find-file} не использует минибуфер, поэтому, если вызывается
@code{find-file} как функция из кода Lisp, потребуется предоставить строку
имени файла как обычный аргумент функции Lisp.

  Если команда является макросом клавиатуры (т. е. строкой или вектором),
Emacs выполняет ее, используя @code{execute-kbd-macro} (@pxref{Keyboard Macros}).

@defvar pre-command-hook
Этот нормальный перехватчик запускается редактором командного цикла перед
выполнением каждой команды.  В это время @code{this-command} содержит
команду, которая будет запущена, а @code{last-command} описывает предыдущую
команду.  @xref{Command Loop Info}.
@end defvar

@defvar post-command-hook
Эта обычная ловушка запускается редактором командного цикла после выполнения
каждой команды (включая команды, преждевременно завершенные из-за выхода или
из-за ошибок).  В то время @code{this-command} относится к только что
запущенной команде, а @code{last-command} относится к команде до этого.

Эта ловушка также запускается, когда Emacs впервые входит в командный цикл
(в этот момент оба объекта @code{this-command} and @code{last-command} равны
@code{nil}).
@end defvar

  Выход подавляется во время работы @code{pre-command-hook} и
@code{post-command-hook}.  Если при выполнении одной из этих ловушек
возникает ошибка, выполнение ловушки не прекращается; вместо этого ошибка
заглушается, а функция, в которой возникла ошибка, удаляется из ловушки.

  Запрос, поступающий на сервер Emacs
(@pxref{Emacs Server,,, emacs, The GNU Emacs Manual}), запускает эти два
перехватчика так же, как и клавиатурная команда.

@node Defining Commands
@section Определение Команд
@cindex defining commands
@cindex commands, defining
@cindex functions, making them interactive
@cindex interactive function

  Специальная форма @code{interactive} превращает функцию Lisp в команду.
Форма @code{interactive} должна располагаться на верхнем уровне в теле
функции, обычно как первая форма в теле; это относится как к
лямбда-выражением (@pxref{Lambda Expressions}), так и к @code{defun} формам
(@pxref{Defining Functions}).  Эта форма ничего не делает во время
фактического выполнения функции; его присутствие служит флагом, сообщающим
командному циклу Emacs, что функция может быть вызвана интерактивно.
Аргумент формы @code{interactive} указывает, как следует читать аргументы
интерактивного вызова.

@cindex @code{interactive-form} property
  В качестве альтернативы, форма @code{interactive} может быть указана в
свойстве @code{interactive-form} символа функции.  Значение не-@code{nil}
для этого свойства имеет приоритет над любой формой @code{interactive} в
теле функции.  Эта функция используется редко.

@anchor{The interactive-only property}
@cindex @code{interactive-only} property
  Иногда функция предназначена только для интерактивного вызова, а не для
прямого вызова из Lisp.  В этом случае присваивается функции свойство
не-@code{nil} @code{interactive-only} либо напрямую, либо через
@code{declare} (@pxref{Declare Form}).  Это заставляет байт компилятор
предупреждать, если команда вызывается из Lisp.  Вывод
@code{describe-function} будет включать аналогичную информацию.  Значением
свойства может быть: строка, которую байт компилятор будет использовать
непосредственно в своем предупреждении (она должна заканчиваться точкой, и
не начинаться с заглавной буквы, например,
@code{"use (system-name) instead."}); @code{t}; любой другой символ, который
должен быть альтернативой функция для использования в коде Lisp.

Универсальные функции (@pxref{Generic Functions}) нельзя превратить в
команды, добавив к ним форму @code{interactive}.

@menu
* Using Interactive::     Общие правила для @code{interactive}.
* Interactive Codes::     Стандартные буквенные коды для чтения аргументов
                            различными способами.
* Interactive Examples::  Примеры того, как читать интерактивные аргументы.
* Generic Commands::      Выберите среди альтернативных команд.
@end menu

@node Using Interactive
@subsection Использование @code{interactive}
@cindex arguments, interactive entry
@cindex interactive spec, using

  В этом разделе описывается, как написать форму @code{interactive}, которая
делает функцию Lisp интерактивно вызываемой командой, и как исследовать
форму @code{interactive} команды.

@defspec interactive arg-descriptor
Эта специальная форма объявляет, что функция является командой, и поэтому
она может вызываться интерактивно (через @kbd{M-x} или путем ввода связанной
с ней последовательности ключей).  Аргумент @var{arg-descriptor} объявляет,
как вычислять аргументы команды, когда команда вызывается в интерактивном
режиме.

Команду можно вызывать из программ на Lisp, как и любую другую функцию, но
тогда вызывающий предоставляет аргументы, и @var{arg-descriptor} не имеет
никакого эффекта.

@cindex @code{interactive-form}, symbol property
Форма @code{interactive} должна располагаться на верхнем уровне в теле
функции или в свойстве (@pxref{Symbol Properties}) символа функции
(@pxref{Symbol Properties}).  Это имеет свой эффект, потому что командный
цикл ищет его перед вызовом функции (@pxref{Interactive Call}).  После
вызова функции выполняются все ее формы тела; в это время, если форма
@code{interactive} встречается в теле, форма просто возвращает @code{nil},
даже не оценивая свой аргумент.

По соглашению требуется поместить форму @code{interactive} в тело функции
как первую форму верхнего уровня.  Если есть форма @code{interactive} и в
свойстве символа @code{interactive-form}, и в теле функции, первое имеет
приоритет.  Свойство символа @code{interactive-form} можно использовать для
добавления интерактивной формы к существующей функции или изменения способа
интерактивной обработки ее аргументов без переопределения функции.
@end defspec

Есть три возможности для аргумента @var{arg-descriptor}:

@itemize @bullet
@item
Может быть опущено или @code{nil}; тогда команда вызывается без аргументов.
Это быстро приводит к ошибке, если команде требуется один или несколько
аргументов.

@item
Это может быть строка; его содержимое представляет собой последовательность
элементов, разделенных символами новой строки, по одному для каждого
аргумента @footnote{Некоторые элементы фактически предоставляют два
аргумента.}.  Каждый элемент состоит из кодового символа
(@pxref{Interactive Codes}), за которым может следовать подсказка (которую
некоторые символы кода используют, а некоторые игнорируют). Вот пример:

@smallexample
(interactive "P\nbFrobnicate buffer: ")
@end smallexample

@noindent
Кодовая буква @samp{P} устанавливает в качестве первого аргумента команды
необработанный префикс команды (@pxref{Prefix Command Arguments}).
@samp{bFrobnicate buffer: } предлагает пользователю с помощью
@samp{Frobnicate buffer: } ввести имя существующего буфера, которое
становится вторым и последним аргументом.

Строка приглашения может использовать @samp{%} для включения в подсказку
значений предыдущих аргументов (начиная с первого аргумента).  Это делается
с помощью @code{format-message} (@pxref{Formatting Strings}).  Например, вот
как прочитать имя существующего буфера, за которым следует новое имя,
которое нужно дать этому буферу.:

@smallexample
@group
(interactive "bBuffer to rename: \nsRename buffer %s to: ")
@end group
@end smallexample

@cindex @samp{*} in @code{interactive}
@cindex read-only buffers in interactive
Если @samp{*} появляется в начале строки, то выдается сигнал об ошибке, если
буфер доступен только для чтения.

@cindex @samp{@@} in @code{interactive}
Если @samp{@@} появляется в начале строки и если последовательность ключей,
используемая для вызова команды, включает какие-либо события мыши, то перед
запуском команды выбирается окно, связанное с первым из этих событий.

@cindex @samp{^} in @code{interactive}
@cindex shift-selection, and @code{interactive} spec
Если @samp{^} появляется в начале строки, и если команда была вызвана через
@dfn{shift-translation}, устанавливается метка и временно активируется
область или расширяется уже активная область до запуска команды.  Если
команда была вызвана без @dfn{shift-translation}, а область временно
активна, деактивируется область перед выполнением команды.  @dfn{shift-translation} управляется на уровне пользователя с помощью
@code{shift-select-mode}; смотреть
@ref{Shift Selection,,, emacs, The GNU Emacs Manual}.

Можно использовать @samp{*}, @samp{@@}, и @code{^} вместе; порядок не имеет
значения.  Фактическое чтение аргументов контролируется остальной частью
строки приглашения (начиная с первого символа, который не является @samp{*},
@samp{@@}, или @samp{^}).

@item
Это может быть выражение Lisp, которое не является строкой; тогда это должна
быть форма, которая оценивается, чтобы получить список аргументов для
передачи команде.  Обычно эта форма вызывает различные функции для чтения
ввода от пользователя, чаще всего через минибуфер (@pxref{Minibuffers}) или
непосредственно с клавиатуры (@pxref{Reading Input}).

Предоставление точки или метки в качестве значения аргумента также является
обычным явлением, но если делается этот ввод для чтения @emph{и} (независимо
от того, используете ли он минибуфер или нет), следует убедиться, что
получены целые значения точки или метки после чтения.  Текущий буфер может
получать выходные данные подпроцесса; если выходные данные подпроцесса
поступают, пока команда ожидает ввода, это может переместить точку и метку.

Вот пример того, что @emph{не} нужно делать:

@smallexample
(interactive
 (list (region-beginning) (region-end)
       (read-string "Foo: " nil 'my-history)))
@end smallexample

@noindent
Вот как избежать этой проблемы, изучив точку и метку после чтения ввода
с клавиатуры:

@smallexample
(interactive
 (let ((string (read-string "Foo: " nil 'my-history)))
   (list (region-beginning) (region-end) string)))
@end smallexample

@strong{Предупреждение:} значения аргументов не должны включать какие-либо
типы данных, которые нельзя распечатать, а затем прочитать.  Некоторые
средства сохраняют @code{command-history} в файл для чтения в последующих
сессиях; если аргументы команды содержат тип данных, который печатается с
использованием синтаксиса @samp{#<@dots{}>}, эти средства не будут работать.

Однако есть несколько исключений: можно использовать ограниченный набор
выражений, таких как @code{(point)}, @code{(mark)},
@code{(region-beginning)}, и @code{(region-end)}, поскольку Emacs распознает
их специально и помещает выражение (а не его значение) в историю команд.
Чтобы узнать, является ли написанное вами выражение одним из этих
исключений, запустите команду, затем проверьте @code{(car command-history)}.
@end itemize

@cindex examining the @code{interactive} form
@defun interactive-form function
Эта функция возвращает @code{interactive} форму @var{function}.  Если
@var{function} является интерактивно вызываемой функцией
(@pxref{Interactive Call}), значением является команда @code{interactive} в
форме @code{(interactive @var{spec})}, которая указывает, как вычислять ее
аргументы.  В противном случае значение @code{nil}.  Если @var{function} -
это символ, используется определение его функции.
@end defun

@node Interactive Codes
@subsection Кодовые Символы для @code{interactive}
@cindex interactive code description
@cindex description for interactive codes
@cindex codes, interactive, description of
@cindex characters for interactive codes

  Приведенные ниже описания кодовых символов содержат ряд ключевых слов,
определяемых здесь следующим образом:

@table @b
@item Completion
@cindex interactive completion
Обеспечить завершение.  @key{TAB}, @key{SPC}, и @key{RET} выполняет
завершение имени, потому что аргумент читается с использованием
@code{completing-read} (@pxref{Completion}).  @kbd{?} отображает список
возможных доработок.

@item Existing
Требовать имя существующего объекта.  Недействительное имя не принимается;
команды выхода из минибуфера не сработают, если текущий ввод недействителен.

@item Default
@cindex default argument string
Если пользователь не вводит текст в минибуфер, используется какое-то
значение по умолчанию.  Значение по умолчанию зависит от символа кода.

@item No I/O
Эта кодовая буква вычисляет аргумент без чтения ввода.  Следовательно, не
используется строка подсказки, и любая строка подсказки, которая вводится,
игнорируется.

Несмотря на то, что кодовая буква не использует строку приглашения,
потребуется начать за ней с новой строки, если это не последний кодовый
символ в строке.

@item Prompt
Подсказка следует сразу за кодом символа.  Приглашение заканчивается концом
строки или новой строкой.

@item Special
Этот кодовый символ имеет смысл только в начале интерактивной строки и не
ищет подсказку или новую строку.  Это единый, изолированный символ.
@end table

@cindex reading interactive arguments
  Вот описания символов кода для использования с @code{interactive}:

@table @samp
@item *
Сообщается об ошибке, если текущий буфер доступен только для чтения.
Специальный.

@item @@
Выберается окно, упомянутое в первом событии мыши в последовательности
коючей, которое вызвало эту команду.  Специальный.

@item ^
Если команда была вызвана через shift-translation, установить метку и
временно активировать область или расширьте уже активную область перед
выполнением команды.  Если команда была вызвана без shift-translation, а
область временно активна, деактивируется область перед выполнением команды.
Специальный.

@item a
Имя функции (т. е. Символ, удовлетворяющий @code{fboundp}).  Существующий,
Завершение, Подсказка.

@item b
Имя существующего буфера.  По умолчанию используется имя текущего буфера
(@pxref{Buffers}).  Существующий, Завершение, По умолчанию, Запрос.

@item B
Имя буфера.  Буфер может не существовать.  По умолчанию использует имя
недавно использованного буфера, отличное от текущего.  Завершение,
По умолчанию, Подсказка.

@item c
Символ.  Курсор не перемещается в эхо-область.  Незамедлительный.

@item C
Имя команды (т. е. Символ, удовлетворяющий @code{commandp}).  Существующий,
Завершение, Подсказка.

@item d
@cindex position argument
Положение точки в виде целого числа (@pxref{Point}).  Нет ввода/вывода.

@item D
Каталог.  По умолчанию это текущий каталог по умолчанию для текущего буфера,
@code{default-directory} (@pxref{File Name Expansion}).  Существующий,
Завершение, По умолчанию, Запрос.

@item e
Первое или следующее событие, не связанное с клавиатурой, в
последовательности ключей, вызвавшее команду.  Точнее, @samp{e} получает
события в виде списков, поэтому можно просматривать данные в списках.
@xref{Input Events}.  Нет ввода/вывода.

Используется @samp{e} для событий мыши и для специальных системных событий
(@pxref{Misc Events}).  Список событий, который получает команда, зависит от
события.  @xref{Input Events}, который описывает формы списка для каждого
события в соответствующих подразделах.

Можно использовать @samp{e} более одного раза в интерактивной спецификации
одной команды.  Если последовательность ключей, вызвавшая команду, имеет
@var{n} событий, которые являются списками, @var{n} @samp{e} предоставляет
такое событие @var{n}.  События, не входящие в списки, такие как
функциональные ключи и символы @acronym{ASCII}, не учитываются в случае
@samp{e}.

@item f
Имя существующего файла (@pxref{File Names}).  Каталог по умолчанию -
@code{default-directory}.  Существующий, Завершение, По умолчанию, Запрос.

@item F
Имя файла.  Файл не должен существовать.
Завершение, По умолчанию, Подсказка.

@item G
Имя файла.  Файл не должен существовать.  Если пользователь вводит только
имя каталога, тогда значением будет просто имя этого каталога без добавления
имени файла в этом каталоге.  Завершение, По умолчанию, Подсказка.

@item i
Неуместный аргумент.  Этот код всегда предоставляет @code{nil} в качестве
значения аргумента.  Нет ввода/вывода.

@item k
Последовательность ключей (@pxref{Key Sequences}).  Это продолжает считывать
события, пока команда (или неопределенная команда) не будет найдена в
текущих ключевых картах.  Аргумент ключевой последовательности представлен в
виде строки или вектора.  Курсор не перемещается в эхо-область.
Незамедлительный.

Если @samp{k} считывается последовательность ключей, которая заканчивается
событием down, также считывается и отбрасывается следующее событие up.
Можно получить доступ к этому up-событию с помощью символа кода @samp{U}.

Этот тип ввода используется такими командами, как @code{describe-key} и
@code{global-set-key}.

@item K
Ключевая последовательность, определение которой потребовалося изменить.
Это работает как @samp{k}, за исключением того, что подавляется для
последнего события ввода в последовательности ключей преобразования, которые
обычно используются (при необходимости) для преобразования неопределенного
ключа в определенный.

@item m
@cindex marker argument
Положение метки в виде целого числа.  Нет ввода/вывода.

@item M
Произвольный текст, читаемый в минибуфере с использованием метода ввода
текущего буфера и возвращаемый в виде строки
(@pxref{Input Methods,,, emacs, The GNU Emacs Manual}).  Незамедлительный.

@item n
Число, считываемое с помощью минибуфера.  Если введено не число,
пользователь должен повторить попытку.  @samp{n} никогда не использует
аргумент префикса.  Незамедлительный.

@item N
Аргумент числового префикса; но если аргумента префикса нет, считается
число, как с @kbd{n}.  Значение всегда является числом.
@xref{Prefix Command Arguments}.  Незамедлительный.

@item p
@cindex numeric prefix argument usage
Аргумент числового префикса.  (Обратить внимание, что @samp{p} в нижнем
регистре).  Нет ввода-вывода.

@item P
@cindex raw prefix argument usage
Аргумент необработанного префикса.  (Обратить внимание, что @samp{P} в
верхнем регистре).  Нет ввода-вывода.

@item r
@cindex region argument
Точка и метка в виде двух числовых аргументов, наименьший первым.  Это
единственная кодовый символ, который указывает два последовательных
аргумента, а не один.  Сигнализируется об ошибке, если метка не установлена
в буфере, который является текущим при вызове команды.  Нет ввода/вывода.

@item s
Произвольный текст, читается в минибуфере и возвращается в виде строки
(@pxref{Text from Minibuffer}).  Завершается ввод с помощью @kbd{C-j} или
@key{RET}.  (@kbd{C-q} может использоваться для включения любого из этих
символов во входные данные).  Подсказка.

@item S
Интернированный символ, имя которого читается в минибуфере.  Завершите ввод
с помощью @kbd{C-j} или @key{RET}.  Другие символы, которые обычно завершают
символ (например, пробелы, круглые и квадратные скобки), здесь не
используются.  Незамедлительный.

@item U
Последовательность ключей или @code{nil}.  Может использоваться после
аргумента @samp{k} или @samp{K} для получения события up, которое было
отброшено (если оно было) после того, как @samp{k} или @samp{K} прочитано
событие down.  Если ни одно событие up не было отброшено, @samp{U}
предоставляет в качестве аргумента @code{nil}.  Нет ввода/вывода.

@item v
Переменная, объявленная как пользовательская опция (т. е. удовлетворяющая
предикату @code{custom-variable-p}).  Читается переменная с помощью
@code{read-variable}.  @xref{Definition of read-variable}.  Существующий,
Завершение, Подсказка.

@item x
Объект Lisp, заданный синтаксисом чтения, завершается @kbd{C-j} или
@key{RET}.  Объект не оценивается.  @xref{Object from Minibuffer}.
Незамедлительный.

@item X
@cindex evaluated expression argument
Значение формы Lisp.  @samp{X} читает, как @samp{x}, затем оценивает форму,
так что ее значение становится аргументом для команды.  Незамедлительный.

@item z
Название системы кодирования (символ).  Если пользователь вводит пустой
ввод, значение аргумента - @code{nil}.  @xref{Coding Systems}.  Завершение,
Существующее, Подсказка.

@item Z
Имя системы кодирования (символ) --- но только если эта команда имеет
аргумент префикса.  Без аргумента префикса @samp{Z} предоставляет @code{nil}
в качестве значения аргумента.  Завершение, Существующее, Подсказка.
@end table

@node Interactive Examples
@subsection Примеры Использования @code{interactive}
@cindex examples of using @code{interactive}
@cindex @code{interactive}, examples of using

  Вот несколько примеров @code{interactive}:

@example
@group
(defun foo1 ()              ; @r{@code{foo1} не принимает аргументов,}
    (interactive)           ;   @r{просто перемещает вперед на два слова.}
    (forward-word 2))
     @result{} foo1
@end group

@group
(defun foo2 (n)             ; @r{@code{foo2} принимает один аргумент -}
    (interactive "^p")      ;   @r{числовой префикс.}
                            ; @r{по средствам @code{shift-select-mode},}
                            ;   @r{активируется или расширяется регион.}
    (forward-word (* 2 n)))
     @result{} foo2
@end group

@group
(defun foo3 (n)             ; @r{@code{foo3} принимает один аргумент,}
    (interactive "nCount:") ;   @r{ который читается с помощью минибуфера.}
    (forward-word (* 2 n)))
     @result{} foo3
@end group

@group
(defun three-b (b1 b2 b3)
  "Выберите три существующих буфера.
Поместите их в три окна, выбрав последнее."
@end group
    (interactive "bБуфер1:\nbБуфер2:\nbБуфер3:")
    (delete-other-windows)
    (split-window (selected-window) 8)
    (switch-to-buffer b1)
    (other-window 1)
    (split-window (selected-window) 8)
    (switch-to-buffer b2)
    (other-window 1)
    (switch-to-buffer b3))
     @result{} three-b
@group
(three-b "*scratch*" "declarations.texi" "*mail*")
     @result{} nil
@end group
@end example

@node Generic Commands
@subsection Выбор Среди Альтернативных Команд
@cindex generic commands
@cindex alternatives, defining

Макрос @code{define-alternatives} может использоваться для определения
@dfn{generic commands}.  Это интерактивные функции, реализация которых может
быть выбрана из нескольких альтернатив по желанию пользователя.

@defmac define-alternatives command &rest customizations
Определить новую команду @var{command}, символ.

Когда пользователь запускает @kbd{M-x @var{command} @key{RET}} в первый раз,
Emacs запрашивает, какую реальную форму команды использовать, и записывает
выбор с помощью пользовательской переменной.  Использование аргумента
префикса повторяет этот процесс выбора альтернативы.

Переменная @code{@var{command}-alternatives} должна содержать список
альтернативных реализаций @var{command}.  Пока эта переменная не
установлена, @code{define-alternatives} не действует.

Если @var{customizations} установлено в не-@code{nil}, должно состоять из
чередующихся ключевых слов @code{defcustom} (обычно @code{:group} и
@code{:version}) и значений, добавляемых к объявлению
@code{@var{command}-alternatives}.
@end defmac

@node Interactive Call
@section Интерактивный Вызов
@cindex interactive call

  После того, как командный цикл преобразовал последовательность ключей в
команду, вызывается эта команда, используя функцию @code{command-execute}.
Если команда является функцией, @code{command-execute} вызывает
@code{call-interactively}, которой считываются аргументы и вызывается
команда.  Также можете вызвать эти функции самостоятельно.

  Обратить внимание, что термин ``command'' в этом контексте относится к
интерактивно вызываемой функции (или объекту, подобному функции), или
макросу клавиатуры.  Это не относится к последовательности ключей,
используемой для вызова команды (@pxref{Keymaps}).

@defun commandp object &optional for-call-interactively
Эта функция возвращает @code{t}, если @var{object} - команда.  В противном
случае возвращается @code{nil}.

Команды включают строки и векторы (которые рассматриваются как макросы
клавиатуры), лямбда-выражения, содержащие форму @code{interactive} верхнего
уровня (@pxref{Using Interactive}), объекты функций байт кода, созданные из
таких лямбда-выражений, объекты автозагрузки, объявленные как интерактивные
(четвертый аргумент не-@code{nil} для @code{autoload} ) и некоторые
примитивные функции.  Кроме того, символ считается командой, если он имеет
свойство не-@code{nil} @code{interactive-form} или если его определение
функции удовлетворяет @code{commandp}.

Если @var{for-call-interactively} равен не-@code{nil}, тогда @code{commandp}
возвращает @code{t} только для объектов, которые может вызывать
@code{call-interactively} --- таким образом, не для макросов клавиатуры.

Смотреть @code{documentation} в @ref{Accessing Documentation}, для
реалистичного примера использования @code{commandp}.
@end defun

@defun call-interactively command &optional record-flag keys
Функция вызывает интерактивно вызываемую функцию @var{command}, предоставляя
аргументы в соответствии со спецификациями интерактивного вызова.
Возвращается все, что возвращается @var{command}.

Если, например, есть функция со следующей спецификацией:

@example
(defun foo (begin end)
  (interactive "r")
  ...)
@end example

затем производя

@example
(call-interactively 'foo)
@end example

вызовет @code{foo} с регионом (@code{point} и @code{mark}) в качестве
аргументов.

Об ошибке сообщается, если @var{command} не является функцией или если не
может быть вызвана интерактивно (то есть не является командой).  Обратить
внимание, что макросы клавиатуры (строки и векторы) не принимаются, даже
если считаются командами, поскольку не являются функциями.  Если
@var{command} - символ, тогда @code{call-interactively} использует
определение своей функции.

@cindex record command history
Если @var{record-flag} равен не-@code{nil}, то эта команда и ее аргументы
безоговорочно добавляются в список @code{command-history}.  В противном
случае команда добавляется, только если она использует минибуфер для чтения
аргумента.  @xref{Command History}.

Аргумент @var{keys}, если он задан, должен быть вектором, который определяет
последовательность событий, которые необходимо предоставить, если команда
запрашивает, какие события использовались для ее вызова.  Если @var{keys} не
указан или @code{nil}, по умолчанию возвращается значение
@code{this-command-keys-vector}.
@xref{Definition of this-command-keys-vector}.
@end defun

@defun funcall-interactively function &rest arguments
Функция работает как @code{funcall} (@pxref{Calling Functions}), но
делается вызов похожим на интерактивный вызов: вызов
@code{called-interactively-p} внутри @var{function} вернет @code{t}.  Если
@var{function} не является командой, вызывается без сообщения об ошибке.
@end defun

@defun command-execute command &optional record-flag keys special
@cindex keyboard macro execution
Функция выполняет @var{command}.  Аргумент @var{command} должен
удовлетворять предикату @code{commandp}; т.е. это должна быть интерактивно
вызываемая функция или клавиатурный макрос.

Строка или вектор как @var{command} выполняется с @code{execute-kbd-macro}.
Функция передается в @code{call-interactively} (смотреть выше) вместе с
аргументами @var{record-flag} и @var{keys}.

Если @var{command} является символом, вместо него используется определение
его функции.  Символ с определением @code{autoload} считается командой, если
он был объявлен как обозначающий интерактивно вызываемую функцию.  Такое
определение обрабатывается путем загрузки указанной библиотеки и повторной
проверки определения символа.

Аргумент @var{special}, если он задан, означает игнорировать аргумент
префикса и не очищать его.  Используется для выполнения специальных событий
(@pxref{Special Events}).
@end defun

@deffn Command execute-extended-command prefix-argument
@cindex read command name
Функция считывает имя команды из минибуфера с помощью @code{completing-read}
(@pxref{Completion}).  Затем используется @code{command-execute} для вызова
указанной команды.  Все, что возвращает эта команда, становится значением
@code{execute-extended-command}.

@cindex execute with prefix argument
Если команда запрашивает аргумент префикса, получает значение
@var{prefix-argument}.  Если @code{execute-extended-command} вызывается
интерактивно, текущий необработанный аргумент префикса используется для
@var{prefix-argument} и, таким образом, передается любой запущенной команде.

@c !!! Если это будет @kindex?
@cindex @kbd{M-x}
@code{execute-extended-command} - обычное определение @kbd{M-x}, поэтому в
качестве подсказки используется строка @w{@samp{M-x }}.  (Было бы лучше
брать подсказку из событий, используемых для вызова
@code{execute-extended-command}, но это болезненно реализовать).  Описание
значения аргумента префикса, если таковое имеется, также становится частью
подсказки.

@example
@group
(execute-extended-command 3)
---------- Buffer: Minibuffer ----------
3 M-x forward-word @key{RET}
---------- Buffer: Minibuffer ----------
     @result{} t
@end group
@end example
@end deffn

@node Distinguish Interactive
@section Отличия Интерактивных Вызовов
@cindex distinguish interactive calls
@cindex is this call interactive

  Иногда команда должна отображать дополнительную визуальную обратную связь
(например, информативное сообщение в эхо-области) только для интерактивных
вызовов.  Это можно сделать тремя способами.  Рекомендуемый способ
проверить, была ли функция вызвана с помощью @code{call-interactively} -
дать ей необязательный аргумент @code{print-message} и использовать
спецификацию @code{interactive}, чтобы сделать ее не-@code{nil} в
интерактивных вызовах.  Вот пример:

@example
(defun foo (&optional print-message)
  (interactive "p")
  (when print-message
    (message "foo")))
@end example

@noindent
Используется @code{"p"}, потому что аргумент числового префикса никогда не
равен @code{nil}.  Определенная таким образом функция отображает сообщение
при вызове из макроса клавиатуры.

  Вышеупомянутый метод с дополнительным аргументом обычно лучше, потому что
позволяет вызывающим абонентам сказать ``рассматривать этот вызов как
интерактивный''.  Но также можно выполнить эту работу, протестировав
@code{called-interactively-p}.

@defun called-interactively-p kind
Функция возвращает @code{t}, когда вызывающая функция была вызвана с
использованием @code{call-interactively}.

Аргумент @var{kind} должен быть либо символом @code{interactive}, либо
символом @code{any}.  Если это @code{interactive}, то
@code{called-interactively-p} возвращает @code{t} только в том случае, если
вызов был сделан непосредственно пользователем --- например, если
пользователь набрал последовательность ключей, связанную с вызывающей
функцией, но @emph{не} если пользователь запустил макрос клавиатуры, который
вызвал функцию (@pxref{Keyboard Macros}).  Если @var{kind} равен @code{any},
@code{called-interactively-p}, возвращает @code{t} для любого интерактивного
вызова, включая макросы клавиатуры.

В случае сомнений используется @code{any}; единственное известное правильное
использование @code{interactive} - это если требуется решить, отображать ли
полезное сообщение во время работы функции.

Функция никогда не считается вызываемой интерактивно, если она была вызвана
посредством вычисления Lisp (или с помощью @code{apply} или @code{funcall}).
@end defun

@noindent
Вот пример использования @code{called-interactively-p}:

@example
@group
(defun foo ()
  (interactive)
  (when (called-interactively-p 'any)
    (message "Interactive!")
    'foo-called-interactively))
@end group

@group
;; @r{Набрать @kbd{M-x foo}.}
     @print{} Interactive!
@end group

@group
(foo)
     @result{} nil
@end group
@end example

@noindent
Вот еще один пример, который противопоставляет прямые и косвенные вызовы
@code{called-interactively-p}.

@example
@group
(defun bar ()
  (interactive)
  (message "%s" (list (foo) (called-interactively-p 'any))))
@end group

@group
;; @r{Набрать @kbd{M-x bar}.}
     @print{} (nil t)
@end group
@end example

@node Command Loop Info
@section Информация из Командного Цикла
@cindex command loop variables

Редоктор командного цикла устанавливает несколько переменных Lisp для
хранения записей состояния для себя и для выполняемых команд.  За
исключением @code{this-command} и @code{last-command}, обычно плохая идея
изменять любую из этих переменных в программе на Lisp.

@defvar last-command
Переменная записывает имя предыдущей команды, выполненной командным циклом
(той, которая была перед текущей командой).  Обычно значение представляет
собой символ с определением функции, но это не гарантируется.

Значение копируется из @code{this-command}, когда команда возвращается в
командный цикл, за исключением случаев, когда команда задала аргумент
префикса для следующей команды.

Переменная всегда является локальной для текущего терминала и не может быть
локальной для буфера.  @xref{Multiple Terminals}.
@end defvar

@defvar real-last-command
Переменная устанавливается Emacs точно так же, как @code{last-command}, но
никогда не изменяется программами Lisp.
@end defvar

@defvar last-repeatable-command
В переменной хранится последняя выполненная команда, которая не была частью
входного события.  Это команда @code{repeat} попытается повторить,
@xref{Repeating,,, emacs, The GNU Emacs Manual}.
@end defvar

@defvar this-command
@cindex current command
Переменная записывает имя команды, которая теперь выполняется в цикле команд
редактора.  Как и @code{last-command}, это обычно символ с определением
функции.

Цикл команд устанавливает эту переменную непосредственно перед запуском
команды и копирует ее значение в @code{last-command}, когда команда
завершается (если команда не указала аргумент префикса для следующей
команды).

@cindex kill command repetition
Некоторые команды устанавливают эту переменную во время своего выполнения в
качестве флага для следующей команды.  В частности, функции для уничтожения
текста устанавливают @code{this-command} в @code{kill-region}, чтобы любые
команды уничтожения, следующие сразу же, знали, что нужно добавить
уничтоженный текст к предыдущему уничтожению.
@end defvar

Если не требуется, чтобы определенная команда распознавалась как предыдущая
в случае ошибки, потребуется закодировать эту команду, чтобы предотвратить
это.  Один из способов - установить @code{this-command} в @code{t} в начале
команды и вернуть @code{this-command} обратно в правильное значение в конце,
как здеся:

@example
(defun foo (args@dots{})
  (interactive @dots{})
  (let ((old-this-command this-command))
    (setq this-command t)
    @r{@dots{}выполнять работу@dots{}}
    (setq this-command old-this-command)))
@end example

@noindent
Не связывается @code{this-command} с @code{let}, потому что это восстановит
старое значение в случае ошибки - особенность @code{let}, которая в данном
случае делает именно то, чего требуется избежать.

@defvar this-original-command
Имеет то же значение, что и @code{this-command}, за исключением случаев,
когда выполняется переназначение команд (@pxref{Remapping Commands}).  В
этом случае @code{this-command} дает команду, фактически выполняемую
(результат переназначения), а @code{this-original-command} дает команду,
которая была указана для выполнения, но переназначена в другую команду.
@end defvar

@defun this-command-keys
Функция возвращает строку или вектор, содержащий последовательность ключей,
которая вызвала текущую команду, плюс любые предыдущие команды, которые
сгенерировали аргумент префикса для этой команды.  Любые события,
прочитанные командой, использующей @code{read-event}, без тайм-аута,
прикрепляются к концу.

Однако, если команда вызвала @code{read-key-sequence}, возвращается
последняя прочитанная последовательность ключей.  @xref{Key Sequence Input}.
Значение является строкой, если все события в последовательности были
символами, которые помещаются в строку.  @xref{Input Events}.

@example
@group
(this-command-keys)
;; @r{Теперь использовать @kbd{C-u C-x C-e} чтобы оценить это.}
     @result{} "^U^X^E"
@end group
@end example
@end defun

@defun this-command-keys-vector
@anchor{Definition of this-command-keys-vector}
Подобно @code{this-command-keys}, за исключением того, что всегда
возвращается события в векторе, поэтому потребуется иметь дело со
сложностями хранения входных событий в строке (@pxref{Strings of Events}).
@end defun

@defun clear-this-command-keys &optional keep-record
Функцией очищается таблица событий для возврата @code{this-command-keys}.
Если @var{keep-record} не не-@code{nil}, также очищаются записи, которые
функция @code{recent-keys} (@pxref{Recording Input}) впоследствии вернет.
Это полезно после прочтения пароля, чтобы предотвратить случайное эхо пароля
в некоторых случаях как часть следующей команды.
@end defun

@defvar last-nonmenu-event
Переменная содержит последнее входное событие, считанное как часть
последовательности ключей, не считая событий, происходящих из меню мыши.

Одно из применений этой переменной - указать @code{x-popup-menu}, где
открыть всплывающее меню. Также используется внутри @code{y-or-n-p}
(@pxref{Yes-or-No Queries}).
@end defvar

@defvar last-command-event
Переменная устанавливается на последнее событие ввода, которое было
прочитано командным циклом как часть команды.  В основном эта переменная
используется в @code{self-insert-command}, которая использует ее, чтобы
решить, какой символ вставить.

@example
@group
last-command-event
;; @r{Теперь используйте @kbd{C-u C-x C-e}, чтобы оценить это.}
     @result{} 5
@end group
@end example

@noindent
Значение равно 5, потому что это код @acronym{ASCII} для @kbd{C-e}.
@end defvar

@defvar last-event-frame
Переменная записывает, в какой кадр было направлено последнее входное
событие.  Обычно это кадр, который был выбран при создании события, но если
этот кадр перенаправил фокус ввода на другой кадр, значением является кадр,
на который было перенаправлено событие.
@xref{Input Focus}.

Если последнее событие пришло из макроса клавиатуры, значение будет
@code{macro}.
@end defvar

@node Adjusting Point
@section Управление Расположением Точки После Команд
@cindex adjusting point
@cindex invisible/intangible text, and point
@cindex @code{display} property, and point display
@cindex @code{composition} property, and point display

  Emacs не может отображать курсор, когда точка находится в середине
последовательности текста, имеющего свойство @code{display} или
@code{composition}, или когда точка невидима.  Следовательно, после того,
как команда завершается и возвращается в командный цикл, если точка
находится в такой последовательности, командный цикл обычно перемещает точку
к краю последовательности, что делает эту последовательность фактически
неосязаемой.

  Команда может запретить эту функцию, установив переменную
@code{disable-point-adjustment}:

@defvar disable-point-adjustment
Если эта переменная - не-@code{nil}, когда команда возвращается в командный
цикл, то командный цикл не проверяет эти текстовые свойства и не перемещает
точку из последовательности в которой она находится.

Цикл команд устанавливает для этой переменной значение @code{nil} перед
каждой командой, поэтому, если команда устанавливает ее, эффект применяется
только к этой команде.
@end defvar

@defvar global-disable-point-adjustment
Если установить для этой переменной значение не-@code{nil}, функция
перемещения точки из текстовых последовательностей полностью отключится.
@end defvar

@node Input Events
@section Входные События
@cindex events
@cindex input events

Цикл команд Emacs читает последовательность @dfn{входных событий}, которая
представляет активность клавиатуры или мыши или системных событий,
отправленные в Emacs.  Событиями для активности клавиатуры являются клавиши
или символы; другие события всегда списки.  В этом разделе подробно
описывается представление и значение входных событий.

@defun eventp object
Функция возвращает не-@code{nil}, если @var{object} является входным
событием или типом события.

Обратить внимание, что любой символ может использоваться как событие или
тип события.  @code{eventp} не может определить, предназначен ли символ для
использования в коде Lisp в качестве события.  Вместо этого определяется,
действительно ли символ использовался в событии, считанном как ввод в
текущем сеансе Emacs.  Если символ еще не использовался, @code{eventp}
возвращает @code{nil}.
@end defun

@menu
* Keyboard Events::             Обычные символы - клавиши с символами на них.
* Function Keys::               Функциональные клавиши - клавиши с именами, а не символами.
* Mouse Events::                Обзор событий мыши.
* Click Events::                Нажатие и отпускание кнопки мыши.
* Drag Events::                 Перемещение мыши перед отпусканием кнопки.
* Button-Down Events::          Была нажата кнопка, но еще не отпущена.
* Repeat Events::               Два или три щелчка (перетаскивание, вниз).
* Motion Events::               Просто движение мышью, не нажимая кнопку.
* Focus Events::                Перемещение мыши между фреймами.
* Misc Events::                 Другие события, генерируемые системой.
* Event Examples::              Примеры списков событий мыши.
* Classifying Events::          Поиск клавиш-модификаторов в символе события.
                                Типы событий.
* Accessing Mouse::             Функции извлечения информации из событий мыши.
* Accessing Scroll::            Функции для получения информации о событиях полосы прокрутки.
* Strings of Events::           Особые рекомендации по помещению событий символов клавиатуры в строку.
@end menu

@node Keyboard Events
@subsection События Клавиатуры
@cindex keyboard events

@cindex character event
Есть два типа ввода, которые можно получить с клавиатуры: обычные ключи и
функциональные ключи.  Обычные ключи соответствуют (возможно, измененным)
символам; генерируемые ими события представлены в Lisp как символы.  Тип
события @dfn{символьное событие} - это сам символ (целое число), для
которого могут быть установлены некоторые биты модификатора; смотреть
@ref{Classifying Events}.

@cindex modifier bits (of input character)
@cindex basic code (of input character)
Событие входного символа состоит из @dfn{базового кода} от 0 до 524287,
плюс любой или всё из этого @dfn{биты модификатора}:

@table @asis
@item meta

@tex
@math{2^{27}}
@end tex
@ifnottex
2**27
@end ifnottex
бит в коде символа указывает символ, набранный с нажатой мета-клавишей.

@item control

@tex
@math{2^{26}}
@end tex
@ifnottex
2**26
@end ifnottex
бит в коде символа указывает управляющий не-@acronym{ASCII} символ.

Управляющие символы @sc{ascii}, такие как @kbd{C-a}, имеют собственные
специальные базовые коды, поэтому Emacs не нуждается в специальных битах для
их обозначения.  Таким образом, код для @kbd{C-a} равен 1.

Но если вводится комбинация элементов управления не в @acronym{ASCII},
например @kbd{%}, с помощью клавиш управления, числовое значение, которое
получится, будет кодом для @kbd{%} плюс
@tex
@math{2^{26}}
@end tex
@ifnottex
2**26
@end ifnottex
(предполагается, что терминал поддерживает управляющие не-@acronym{ASCII}
символы), т.е. @: с установленным 27-м битом.

@item shift

@tex
@math{2^{25}}
@end tex
@ifnottex
2**25
@end ifnottex
бит (26-й бит) в символьном коде события указывает на управляющий символ
@acronym{ASCII}, набранный с зажатой клавишей Shift.

Для букв сам основной код указывает верхний регистр или нижний регистр; для
цифр и знаков препинания клавиша Shift выбирает совершенно другой символ с
другим базовым кодом.  Чтобы по возможности придерживаться набора символов
@acronym{ASCII}, Emacs избегает использования
@tex
@math{2^{25}}
@end tex
@ifnottex
2**25
@end ifnottex
немного для символьных событий.

Однако @acronym{ASCII} не дает возможности отличить @kbd{C-A} от @kbd{C-a},
поэтому Emacs использует
@tex
@math{2^{25}}
@end tex
@ifnottex
2**25
@end ifnottex
бит в @kbd{C-A}, а не в
@kbd{C-a}.

@item hyper

@tex
@math{2^{24}}
@end tex
@ifnottex
2**24
@end ifnottex
бит в символьном коде события указывает символ, набранный с нажатой
гипер-клавишей.

@item super

@tex
@math{2^{23}}
@end tex
@ifnottex
2**23
@end ifnottex
бит в символьном коде события указывает символ, набранный с зажатой
супер-клавишей.

@item alt

@tex
@math{2^{22}}
@end tex
@ifnottex
2**22
@end ifnottex
бит в символьном коде события указывает символ, набранный с нажатой клавишей
alt.  (Ключ с пометкой @key{Alt} на большинстве клавиатур фактически
рассматривается как мета-ключ, а не alt.)
@end table

  Лучше избегать упоминания конкретных номеров битов в программе.  Чтобы
проверить биты модификатора символа, используется функция
@code{event-modifiers} (@pxref{Classifying Events}).  При привязке ключей
можно использовать синтаксис чтения для символов с битами модификатора
(@samp{\C-}, @samp{\M-} и т. д.).  Для привязки ключей с помощью
@code{define-key} можно использовать списки, такие как
@code{(control hyper ?x)}, чтобы указать символы
(@pxref{Changing Key Bindings}).  Функция @code{event-convert-list}
преобразует такой список в тип события (@pxref{Classifying Events}).

@node Function Keys
@subsection Функциональные Ключи

@cindex function keys
На большинстве клавиатур также есть клавиши @dfn{функциональный ключ} ---,
имена или символы которых не являются символами.  Функциональные клавиши
представлены в Emacs Lisp как символы; имя символа - это подпись
функциональной клавиши в нижнем регистре.  Например, нажатие клавиши
@key{F1} генерирует событие ввода, представленное символом @code{f1}.

Тип события события функциональной клавиши - это сам символ события.
@xref{Classifying Events}.

Вот несколько особых случаев в соглашении об именах символов для
функциональных клавиш:

@table @asis
@item @code{backspace}, @code{tab}, @code{newline}, @code{return}, @code{delete}
Эти клавиши соответствуют обычным управляющим символам @acronym{ASCII},
которые имеют специальные клавиши на большинстве клавиатур.

В @acronym{ASCII}, @kbd{C-i} и @key{TAB} такие же символы.  Если терминал
может различать их, Emacs передает это различие программам на Lisp,
представляя первое как целое число 9, а второе как символ @code{tab}.

В большинстве случаев различать их нецелесообразно.  Так что обычно
@code{local-function-key-map} (@pxref{Translation Keymaps}) настроен для
отображения @code{tab} в 9.  Таким образом, привязка ключа для кода символа
9 (символ @kbd{C-i}) также применяется к @code{tab}.  То же самое и с
другими символами в этой группе.  Функция @code{read-char} также преобразует
эти события в символы.

В @acronym{ASCII}, @key{BS} действительно есть @kbd{C-h}.  Но
@code{backspace} преобразует в код символа 127 (@key{DEL}), а не в код 8
(@key{BS}).  Это то, что предпочитает большинство пользователей.

@item @code{left}, @code{up}, @code{right}, @code{down}
Клавиши курсора со стрелками
@item @code{kp-add}, @code{kp-decimal}, @code{kp-divide}, @dots{}
Клавиши клавиатуры (справа от обычной клавиатуры).
@item @code{kp-0}, @code{kp-1}, @dots{}
Клавиши клавиатуры с цифрами.
@item @code{kp-f1}, @code{kp-f2}, @code{kp-f3}, @code{kp-f4}
Клавиатура PF клавиш.
@item @code{kp-home}, @code{kp-left}, @code{kp-up}, @code{kp-right}, @code{kp-down}
Клавиши со стрелками на клавиатуре.  Emacs обычно переводит их в
соответствующие клавиши без клавиатуры @code{home}, @code{left}, @dots{}
@item @code{kp-prior}, @code{kp-next}, @code{kp-end}, @code{kp-begin}, @code{kp-insert}, @code{kp-delete}
Дополнительные дубликаты клавиш клавиатуры, которые обычно можно найти в
других местах.  Emacs обычно переводит их в одноименные клавиши без
клавиатуры.
@end table

Можно использовать клавиши-модификаторы @key{ALT}, @key{CTRL}, @key{HYPER},
@key{META}, @key{SHIFT}, и @key{SUPER} с функциональными клавишами.  Их
можно представить с помощью префиксов в имени символа:

@table @samp
@item A-
Модификатор alt.
@item C-
Модификатор управления.
@item H-
Гипермодификатор.
@item M-
Мета-модификатор.
@item S-
Модификатор сдвига.
@item s-
Супер модификатор.
@end table

Таким образом, символ для клавиши @key{F3} с нажатой клавишей @key{META}
будет @code{M-f3}.  Если используется более одного префикса, рекомендуется
писать их в алфавитном порядке; но порядок не имеет значения в аргументах
функций поиска и модификации привязки ключей.

@node Mouse Events
@subsection События Мыши

Emacs поддерживает четыре типа событий мыши: события щелчка, события
перетаскивания, события нажатия кнопки и события движения.  Все события мыши
представлены в виде списков.  @sc{car} списка - тип события; это указывает,
какая кнопка мыши была задействована, и какие клавиши-модификаторы
использовались с ней.  По типу события также можно различать двойное или
тройное нажатие кнопки (@pxref{Repeat Events}).  Остальные элементы списка
предоставляют информацию о положении и времени.

Для поиска ключа имеет значение только тип события: два события одного типа
обязательно запускают одну и ту же команду.  Команда может получить доступ к
полным значениям этих событий с помощью интерактивного кода @samp{e}.
@xref{Interactive Codes}.

Последовательность ключей, которая начинается с события мыши, считывается с
использованием ключевых карт буфера в окне, в котором находилась мышь, а не
текущего буфера.  Это не означает, что щелчок в окне выбирает это окно или
его буфер, который полностью находится под контролем привязки команды
последовательности ключей.

@node Click Events
@subsection События Нажатия
@cindex click event
@cindex mouse click event

Когда пользователь нажимает кнопку мыши и отпускает ее в том же месте,
генерируется событие @dfn{щелчок}.  Все события щелчка мыши имеют один и тот
же формат:

@example
(@var{event-type} @var{position} @var{click-count})
@end example

@table @asis
@item @var{event-type}
Символ, указывающий, какая кнопка мыши была использована.  Это один из
символов @code{mouse-1}, @code{mouse-2}, @dots{}, где кнопки нумеруются
слева направо.

Также можно использовать префиксы @samp{A-}, @samp{C-}, @samp{H-},
@samp{M-}, @samp{S-} и @samp{s-} для модификаторов alt, control, hyper,
meta, shift и super, как и с функциональными клавишами.

Этот символ также служит типом события.  Привязки ключей описывают события
по их типам; таким образом, если есть привязка ключа для @code{mouse-1},
эта привязка будет применяться ко всем событиям, у которых @var{event-type}
есть @code{mouse-1}.

@item @var{position}
@cindex mouse position list
Это @dfn{mouse position list}, указывающий, где произошел щелчок мышью;
подробности смотреть ниже.

@item @var{click-count}
Это количество частых повторных нажатий одной и той же кнопки мыши до сих
пор.  @xref{Repeat Events}.
@end table

  Чтобы получить доступ к содержимому списка позиций мыши в слоте
@var{position} события щелчка, обычно потребуется использовать функции,
описанные в @ref{Accessing Mouse}.  Явный формат списка зависит от того, где
произошел щелчок.  Для щелчков в текстовой области, строке режима, строке
заголовка или в краевых или маргинальных областях список позиций мыши имеет
вид

@example
(@var{window} @var{pos-or-area} (@var{x} . @var{y}) @var{timestamp}
 @var{object} @var{text-pos} (@var{col} . @var{row})
 @var{image} (@var{dx} . @var{dy}) (@var{width} . @var{height}))
@end example

@noindent
Значения этих элементов списка следующие:

@table @asis
@item @var{window}
Окно, в котором произошел щелчок.

@item @var{pos-or-area}
Положение в буфере символа, по которому щелкнули в текстовой области; или,
если щелчок произошел за пределами текстовой области, область окна, в
которой он произошел.  Это один из символов @code{mode-line},
@code{header-line}, @code{vertical-line}, @code{left-margin},
@code{right-margin}, @code{left-fringe}, или @code{right-fringe}.

В одном частном случае @var{pos-or-area} - это список, содержащий символ
(один из символов, перечисленных выше), а не только символ.  Это происходит
после того, как Emacs регистрирует воображаемые префиксные ключи для
события.  @xref{Key Sequence Input}.

@item @var{x}, @var{y}
Относительные пиксельные координаты щелчка.  Для щелчков в текстовой области
окна за начало координат @code{(0 . 0)} берется верхний левый угол текстовойобласти.  @xref{Window Sizes}.  Для щелчков в строке режима или строке
заголовка источником координат является верхний левый угол самого окна.  Для
полос, полей и вертикальной границы @var{x} не имеет значимых данных.  Для
бахромы и полей @var{y} отсчитывается относительно нижнего края строки
заголовка.  Во всех случаях координаты @var{x} и @var{y} увеличиваются
вправо и вниз соответственно.

@item @var{timestamp}
Время, в которое произошло событие, в виде целого числа миллисекунд с
системно-зависимого начального времени.

@item @var{object}
Либо @code{nil}, что означает, что щелчок произошел по тексту буфера, либо
cons-ячейка формы @w{(@var{string} . @var{string-pos})}, если есть строка из
текстового свойства или наложение в позиции щелчка.

@table @asis
@item @var{string}
Строка, по которой был выполнен щелчок, включая любые свойства.

@item @var{string-pos}
Позиция в строке, где произошел щелчок.
@end table

@item @var{text-pos}
Для щелчков по маргинальной области или по краю это буферная позиция первого
видимого символа в соответствующей строке в окне.  Для щелчков по строке
режима или строке заголовка это @code{nil}.  Для других событий это позиция
буфера, ближайшая к щелчку.

@item @var{col}, @var{row}
Это фактические координаты столбца и строки глифа под позицией @var{x},
@var{y}.  Если @var{x} лежит за пределами последнего столбца фактического
текста в своей строке, @var{col} сообщается путем добавления вымышленных
дополнительных столбцов с шириной символа по умолчанию.  Строка 0 считается
строкой заголовка, если она есть в окне, или самой верхней строкой текстовой
области в противном случае.  Столбец 0 считается крайним левым столбцом
текстовой области для щелчков в текстовой области окна или крайней левой
строкой режима или столбцом строки заголовка для щелчков в этой области.
Для щелчков по краям или вертикальным границам они не имеют значимых данных.
Для щелчков по полям @var{col} измеряется от левого края области полей, а
@var{row} - от верха области полей.

@item @var{image}
Если в месте щелчка есть изображение, это объект изображения, возвращенный
@code{find-image} (@pxref{Defining Images}); в противном случае это
@code{nil}.

@item @var{dx}, @var{dy}
Это пиксельные координаты щелчка относительно верхнего левого угла
@var{object}, который равен @code{(0 . 0)}.  Если @var{object} равно
@code{nil}, что означает буфер, координаты отсчитываются относительно левого
верхнего угла глифа символа, на котором щелкнули мышью.

@item @var{width}, @var{height}
Это ширина и высота в пикселях @var{object} или, если это @code{nil},
пиксели глифа, по которому щелкнули.
@end table

Для щелчков по полосе прокрутки @var{position} имеет такую форму:

@example
(@var{window} @var{area} (@var{portion} . @var{whole}) @var{timestamp} @var{part})
@end example

@table @asis
@item @var{window}
Окно, полоса прокрутки которого была нажата.

@item @var{area}
Это символ @code{vertical-scroll-bar}.

@item @var{portion}
Количество пикселей от верха полосы прокрутки до позиции щелчка.  В
некоторых наборах инструментов, включая GTK+, Emacs не может извлечь эти
данные, поэтому значение всегда равно @code{0}.

@item @var{whole}
Общая длина полосы прокрутки в пикселях.  В некоторых инструментах, включая
GTK+, Emacs не может извлечь эти данные, поэтому значение всегда @code{0}.

@item @var{timestamp}
Время, когда произошло событие, в миллисекундах.  В некоторых наборах
инструментов, включая GTK+, Emacs не может извлечь эти данные, поэтому
значение всегда равно @code{0}.

@item @var{part}
Часть полосы прокрутки, по которой произошел щелчок.  Это один из символов
@code{handle} (маркер полосы прокрутки), @code{above-handle} (область над
маркером), @code{below-handle} (область под маркером), @code{up} (стрелка
вверх на одном конце полосы прокрутки) или @code{down} (стрелка вниз на
одном конце полосы прокрутки).
@c The 'top', 'bottom', and 'end-scroll' codes don't seem to be used.
@end table


@node Drag Events
@subsection Событие Перетаскивания
@cindex drag event
@cindex mouse drag event

С Emacs можно провести событие перетаскивания, даже не приготавливаясь.
@dfn{Событие перетаскивания} происходит каждый раз, когда пользователь
нажимает кнопку мыши, а затем перемещает мышь в другую позицию символа перед
тем, как отпустить кнопку.  Как и все события мыши, события перетаскивания
представлены в Lisp в виде списков.  В списках записывается как начальная,
так и конечная позиция мыши, например:

@example
(@var{event-type}
 (@var{window1} START-POSITION)
 (@var{window2} END-POSITION))
@end example

Для события перетаскивания имя символа @var{event-type} содержит префикс
@samp{drag-}.  Например, перетаскивание мыши с нажатой кнопкой 2 генерирует
событие @code{drag-mouse-2}.  Второй и третий элементы события задают
начальную и конечную позицию перетаскивания, так как положение мыши
перечисляет (@pxref{Click Events}).  Таким же образом можно получить доступ
ко второму элементу любого события мыши.  Однако событие перетаскивания
может закончиться за пределами изначально выбранного кадра.  В этом случае
список позиций третьего элемента содержит этот фрейм вместо окна.

Префикс @samp{drag-} следует за префиксом ключа-модификатора, например
@samp{C-} и @samp{M-}.

Если @code{read-key-sequence} получает событие перетаскивания, которое не
имеет привязки к ключам, и соответствующее событие щелчка имеет привязку,
изменяется событие перетаскивания на событие щелчка в начальной позиции
перетаскивания.  Это означает, что не требуется различать события щелчка и
перетаскивания, если этого не нужно.

@node Button-Down Events
@subsection События при Нажатии Кнопки
@cindex button-down event

События щелчка и перетаскивания происходят, когда пользователь отпускает
кнопку мыши.  Они не могут произойти раньше, потому что нет возможности
отличить щелчок от перетаскивания, пока кнопка не будет отпущена.

Если трбуется действовать, как только кнопка нажата, нужно обработать
событие @dfn{нажатие кнопки}.@footnote{Нажатие кнопки - это консервативная
противоположность перетаскиванию.}  Это происходит, как только нажимается
кнопка.  Представлены списками, которые выглядят точно так же, как события
щелчка (@pxref{Click Events}), за исключением того, что имя символа
@var{event-type} содержит префикс @samp{down-}.  Префикс @samp{down-}
следует за префиксом клавиш-модификаторов, например @samp{C-} и @samp{M-}.

Функция @code{read-key-sequence} игнорирует любые события нажатия кнопки,
для которых нет привязки команд; поэтому цикл команд Emacs их тоже
игнорирует.  Это означает, что не нужно беспокоиться об определении событий
нажатия кнопки, если не нужно, чтобы они что-то делали.  Обычная причина для
определения события нажатия кнопки состоит в том, чтобы можно было
отслеживать движение мыши (считывая события движения), пока кнопка не будет
отпущена.
@xref{Motion Events}.

@node Repeat Events
@subsection Повторение События
@cindex repeat events
@cindex double-click events
@cindex triple-click events
@cindex mouse events, repeated

Если нажимать одну и ту же кнопку мыши более одного раза в быстрой
последовательности, не перемещая мышь, Emacs сгенерирует специальные события
мыши @dfn{repeat} для второго и последующих нажатий.

Наиболее частыми повторяющимися событиями являются события
@dfn{(двойной-щелчок) double-click}.  Emacs генерирует событие двойного
щелчка, когда дважды щелкается кнопка; событие происходит, когда отпускается
кнопка (как обычно для всех событий щелчка).

Тип события для события двойного щелчка содержит префикс @samp{double-}.
Таким образом, двойной щелчок по второй кнопке мыши с зажатой @key{meta}
переходит в программу Lisp как @code{M-double-mouse-2}.  Если событие
двойного щелчка не имеет привязки, для его выполнения используется привязка
соответствующего обычного события щелчка.  Таким образом, не нужно обращать
внимание на функцию двойного щелчка, если действительно этого не нужно.

Когда пользователь выполняет двойной щелчок, Emacs сначала генерирует
обычное событие щелчка, а затем событие двойного щелчка.  Следовательно,
потребуется спроектировать привязку команды для события двойного щелчка, что
бы предполагать, что команда одиночного щелчка уже была запущена.  Это будет
давать желаемые результаты двойного щелчка, начиная с результатов одного
щелчка.

Это удобно, если значение двойного щелчка каким-то образом основывается на
значении одиночного щелчка - что рекомендуется для разработки
пользовательского интерфейса при двойном щелчке.

Если нажимается кнопка, затем снова нажмается и начинается перемещение мыши,
с удерживанием нажатой кнопки, получается событие
@dfn{двойное перетаскивание}, когда в конечном итоге отпустите кнопку.  Его
тип события содержит @samp{двойное перетаскивание}, а не только
@samp{перетаскивание}.  Если событие двойного перетаскивания не имеет
привязки, Emacs ищет альтернативную привязку, как если бы событие было
обычным перетаскиванием.

Перед событием двойного щелчка или двойного перетаскивания Emacs генерирует
событие @dfn{двойное нажатие}, когда пользователь нажимает кнопку во второй
раз.  Его тип события содержит @samp{double-down}, а не только
@samp{нажатие}.  Если событие двойного нажатия не имеет привязки, Emacs
ищет альтернативную привязку, как если бы событие было обычным событием
нажатия кнопки.  Если и в этом случае привязка не обнаруживается, событие
удвоения игнорируется.

Подводя итог, когда щёлкается кнопка, а затем сразу же нажимается снова,
Emacs генерирует событие нажатия и событие щелчка для первого щелчка,
событие двойного нажатия при повторном нажатии кнопки и, наконец, либо
двойной щелчок, либо событие двойного перетаскивания.

Если дважды нажмется кнопка, а затем снова быстрое нажатие, Emacs
сгенерирует событие @dfn{тройное нажатие}, за которым следует
@dfn{тройной щелчок} или @dfn{тройное перетаскивание}.  Типы событий этих
событий содержат @samp{тройной} вместо @samp{двойной}.  Если какое-либо
тройное событие не имеет привязки, Emacs использует привязку, которую он
использовал бы для соответствующего двойного события.

Если нажмете кнопку три или более раз, а затем нажмете ее снова, все события
для нажатий после третьего будут тройными.  В Emacs нет отдельных типов
событий для четверных, пятикратных и т.д. @: событий.  Однако можно
посмотреть список событий, чтобы точно узнать, сколько раз была нажата
кнопка.

@defun event-click-count event
Функция возвращает количество последовательных нажатий кнопок, которые
привели к @var{event}.  Если @var{event} является событием двойного нажатия,
двойного щелчка или двойного перетаскивания, значение равно 2.  Если
@var{event} - тройное событие, значение равно 3 или больше.  Если
@var{event} - обычное событие мыши (не повторение), значение равно 1.
@end defun

@defopt double-click-fuzz
Чтобы генерировать повторяющиеся события, последовательные нажатия кнопок
мыши должны происходить примерно в одном и том же положении на экране.
Значение @code{double-click-fuzz} указывает максимальное количество
пикселей, на которое мышь может быть перемещена (по горизонтали или
вертикали) между двумя последовательными щелчками, чтобы сделать двойной
щелчок.

Эта переменная также является порогом, при котором движение мыши считается
перетаскиванием.
@end defopt

@defopt double-click-time
Для генерации повторяющихся событий количество миллисекунд между
последовательными нажатиями кнопок должно быть меньше значения
@code{double-click-time}.  Установка @code{double-click-time} в @code{nil}
полностью отключает обнаружение множественного щелчка.  Установка @code{t}
снимает ограничение по времени; Emacs затем обнаруживает множественные
щелчки только по позиции.
@end defopt

@node Motion Events
@subsection События Движения
@cindex motion event
@cindex mouse motion events

Emacs иногда генерирует события @dfn{движение мыши} для описания движения
мыши без каких-либо действий кнопок.  События движения мыши представлены
списками, которые выглядят следующим образом:

@example
(mouse-movement POSITION)
@end example

@noindent
@var{position} - это список позиций мыши (@pxref{Click Events}),
определяющий текущую позицию курсора мыши.  Как и в случае с конечной
позицией события перетаскивания, этот список позиций может представлять
местоположение за пределами границ первоначально выбранного кадра, и в этом
случае список содержит этот кадр вместо окна.

Специальная форма @code{track-mouse} позволяет генерировать события движения
внутри своего тела.  Вне форм @code{track-mouse} Emacs не генерирует события
для простого движения мыши, и эти события не появляются.
@xref{Mouse Tracking}.

@node Focus Events
@subsection Событие Фокуса
@cindex focus event

Оконные системы предоставляют пользователю общие способы управления окном,
получающим ввод с клавиатуры.  Этот выбор окна называется @dfn{focus}.
Когда пользователь что-то делает для переключения между кадрами Emacs,
генерируется @dfn{focus event}.  Обычное определение события фокуса в
глобальной таблице ключей - это выбрать новый фрейм в Emacs, как и ожидал
пользователь.  @xref{Input Focus}, который также описывает ловушки,
связанные с событиями фокуса.

События фокуса представлены в Lisp в виде списков, которые выглядят
следующим образом:

@example
(switch-frame @var{new-frame})
@end example

@noindent
где @var{new-frame} - это кадр, на который переключился.

Некоторые диспетчеры окон X настроены так, что достаточно просто переместить
мышь в окно, чтобы установить там фокус.  Обычно программе на Lisp нет
необходимости знать об изменении фокуса до тех пор, пока не поступит
какой-либо другой тип ввода.  Emacs генерирует событие фокуса только тогда,
когда пользователь фактически набирает клавишу клавиатуры или нажимает
кнопку мыши в новом кадре; простое перемещение мыши между кадрами не
приводит к возникновению события фокуса.

Событие фокуса в середине ключевой последовательности искажает
последовательность.  Таким образом, Emacs никогда не генерирует событие
фокуса в середине ключевой последовательности.  Если пользователь меняет
фокус в середине последовательности ключей - то есть после префиксного ключа
- то Emacs переупорядочивает события так, чтобы событие фокуса происходило
либо до, либо после последовательности ключей с несколькими событиями, а не
внутри.

@node Misc Events
@subsection Разные Системные События

Несколько других типов событий представляют собой события в системе.

@table @code
@cindex @code{delete-frame} event
@item (delete-frame (@var{frame}))
Событие такого типа указывает на то, что пользователь дал оконному менеджеру
команду на удаление определенного окна, которое оказывается фреймом Emacs.

Стандартное определение события @code{delete-frame} - удалить @var{frame}.

@cindex @code{iconify-frame} event
@item (iconify-frame (@var{frame}))
Этот вид событий указывает на то, что пользователь сделал значок @var{frame}
иконкой с помощью оконного менеджера.  Его стандартное определение -
@code{ignore}; поскольку фрейм уже обозначен значком, Emacs не может ничего
сделать.  Назначение этого типа событий состоит в том, чтобы иметь
возможность отслеживать такие события, если хотите.

@cindex @code{make-frame-visible} event
@item (make-frame-visible (@var{frame}))
Событие такого типа указывает на то, что пользователь деактивировал
@var{frame} с помощью оконного менеджера.  Его стандартное определение -
@code{ignore}; поскольку фрейм уже стал видимым, Emacs не может ничего
сделать.

@cindex @code{wheel-up} event
@cindex @code{wheel-down} event
@item (wheel-up @var{position})
@itemx (wheel-down @var{position})
События такого типа генерируются при перемещении колеса мыши.  Элемент
@var{position} - это список положений мыши (@pxref{Click Events}),
определяющий положение курсора мыши, когда произошло событие.

@vindex mouse-wheel-up-event
@vindex mouse-wheel-down-event
Подобные события генерируются только в определённых системах.  В некоторых
системах вместо него используется @code{mouse-4} и @code{mouse-5}.  Для
переносимости кода используютсяе переменные @code{mouse-wheel-up-event} и
@code{mouse-wheel-down-event}, определенные в @file{mwheel.el}, чтобы
определить, какие типы событий ожидать от колеса мыши.

@cindex @code{drag-n-drop} event
@item (drag-n-drop @var{position} @var{files})
Этот тип событий генерируется, когда группа файлов выбирается в приложении
вне Emacs, а затем перетаскивается на фрейм Emacs.

Элемент @var{position} - это список, описывающий позицию события, в том же
формате, что и в событии щелчка мышью (@pxref{Click Events}), и @var{files},
представляет собой список имен файлов, которые были перетащены.  Обычный
способ обработать это событие - посетить эти файлы.

В настоящее время такого рода события генерируются только в некоторых типах
систем.

@cindex @code{help-echo} event
@item help-echo
Событие такого типа генерируется, когда указатель мыши перемещается на часть
текста буфера, имеющую текстовое свойство @code{help-echo}.  Сгенерированное
событие имеет такую форму:

@example
(help-echo @var{frame} @var{help} @var{window} @var{object} @var{pos})
@end example

@noindent
Точное значение параметров события и способ использования этих параметров
для отображения текста эхо-справки описаны в @ref{Text help-echo}.

@cindex @code{sigusr1} event
@cindex @code{sigusr2} event
@cindex user signals
@item sigusr1
@itemx sigusr2
Эти события генерируются, когда процесс Emacs получает сигналы
@code{SIGUSR1} и @code{SIGUSR2}.  Они не содержат дополнительных данных,
поскольку сигналы не несут дополнительной информации.  Они могут быть
полезны для отладки (@pxref{Error Debugging}).

Чтобы поймать пользовательский сигнал, привяжите соответствующее событие к
интерактивной команде в @code{special-event-map} (@pxref{Active Keymaps}).
Команда вызывается без аргументов, а конкретное сигнальное событие доступно
в @code{last-input-event}. Например:

@smallexample
(defun sigusr-handler ()
  (interactive)
  (message "Caught signal %S" last-input-event))

(define-key special-event-map [sigusr1] 'sigusr-handler)
@end smallexample

Чтобы проверить обработчик сигнала, можно заставить Emacs посылать сигнал
самому себе:

@smallexample
(signal-process (emacs-pid) 'sigusr1)
@end smallexample

@cindex @code{language-change} event
@item language-change
Событие такого типа генерируется в MS-Windows при изменении языка ввода.
Обычно это означает, что ключи клавиатуры будут отправлять в Emacs символы
другого языка.  Сгенерированное событие имеет такую форму:

@smallexample
(language-change @var{frame} @var{codepage} @var{language-id})
@end smallexample

@noindent
Здесь @var{frame} - это фрейм, который был текущим на момент изменения языка
ввода; @var{codepage} - номер новой кодовой страницы; @var{language-id} -
числовой идентификатор нового языка ввода.  Система кодирования
(@pxref {Coding Systems}), которая соответствует @var{codepage}, - это
@code{cp@var{codepage}} или @code{windows-@var{codepage}}.  Чтобы
преобразовать @var{language-id} в строку (например, чтобы использовать его
для различных языковых функций, таких как @code{set-language-environment}),
используйте функцию @code{w32-get-locale-info}, например:

@smallexample
;; Get the abbreviated language name, such as "ENU" for English
(w32-get-locale-info language-id)
;; Get the full English name of the language,
;; such as "English (United States)"
(w32-get-locale-info language-id 4097)
;; Get the full localized name of the language
(w32-get-locale-info language-id t)
@end smallexample
@end table

  Если одно из этих событий наступает в середине ключевой последовательности
- то есть после префиксного ключа - то Emacs переупорядочивает события так,
чтобы это событие происходило либо до, либо после многособытийной ключевой
последовательности, а не внутри неё.

@node Event Examples
@subsection Примеры Событий

Если пользователь нажимает и отпускает левую кнопку мыши в том же месте, это
генерирует последовательность событий, подобную этой:

@smallexample
(down-mouse-1 (#<window 18 on NEWS> 2613 (0 . 38) -864320))
(mouse-1      (#<window 18 on NEWS> 2613 (0 . 38) -864180))
@end smallexample

Удерживая нажатой клавишу управления, пользователь может удерживать вторую
кнопку мыши и перетаскивать мышь от одной строки к другой.  Это создает два
события, как показано здесь:

@smallexample
(C-down-mouse-2 (#<window 18 on NEWS> 3440 (0 . 27) -731219))
(C-drag-mouse-2 (#<window 18 on NEWS> 3440 (0 . 27) -731219)
                (#<window 18 on NEWS> 3510 (0 . 28) -729648))
@end smallexample

Удерживая нажатыми клавиши meta и shift, пользователь может нажать вторую
кнопку мыши на строке режима окна, а затем перетащить мышь в другое окно.
Это создает пару таких событий:

@smallexample
(M-S-down-mouse-2 (#<window 18 on NEWS> mode-line (33 . 31) -457844))
(M-S-drag-mouse-2 (#<window 18 on NEWS> mode-line (33 . 31) -457844)
                  (#<window 20 on carlton-sanskrit.tex> 161 (33 . 3)
                   -453816))
@end smallexample

Рамка с фокусом ввода может не занимать весь экран, и пользователь может
переместить мышь за пределы рамки.  Внутри специальной формы
@code{track-mouse}, которая генерирует подобное событие:

@smallexample
(mouse-movement (#<frame *ielm* 0x102849a30> nil (563 . 205) 532301936))
@end smallexample

Чтобы обработать сигнал SIGUSR1, определяется интерактивная функцию и
привязывается к последовательности событий @code{signal usr1}:

@smallexample
(defun usr1-handler ()
  (interactive)
  (message "Got USR1 signal"))
(global-set-key [signal usr1] 'usr1-handler)
@end smallexample

@node Classifying Events
@subsection Классификация Событий
@cindex event type
@cindex classifying events

  У каждого события есть @dfn{тип события}, который классифицирует событие
для целей привязки ключей.  Для события клавиатуры тип события равен
значению события; таким образом, тип события для символа - это символ, а
тип события для символа функциональной клавиши - это сам символ.  Для
событий, которые являются списками, тип события - это символ в @sc{car}
списка.  Таким образом, тип события всегда является символом или знаком.

  Два события одного типа эквивалентны в том, что касается привязки ключей;
таким образом, они всегда запускают одну и ту же команду.  Однако это не
обязательно означает, что они делают одно и то же, поскольку некоторые
команды смотрят на все событие, чтобы решить, что делать.  Например,
некоторые команды используют местоположение события мыши, чтобы решить, где
в буфере действовать.

  Иногда полезны более широкие классификации событий.  Например, можно
спросить, связано ли событие с клавишей @key{META}, независимо от того,
какая другая клавиша или кнопка мыши была использована.

  Функции @code{event-modifiers} и @code{event-basic-type} предназначены для
удобного получения такой информации.

@defun event-modifiers event
Эта функция возвращает список модификаторов, которые есть у @var{event}.
Модификаторы представляют собой символы; они включают @code{shift},
@code{control}, @code{meta}, @code{alt}, @code{hyper} и @code{super}.  Кроме
того, список модификаторов символа события мыши всегда содержит один из
@code{click}, @code{drag}, и @code{down}.  Для двойных или тройных событий
также содержит @code{double} или @code{triple}.

Аргумент @var{event} может быть целым объектом события или только типом
события.  Если @var{event} - это символ, который никогда не использовался в
событии, считанном как ввод в текущем сеансе Emacs, тогда
@code{event-modifiers} может вернуть @code{nil}, даже если @var{event}
действительно имеет модификаторы.

Вот несколько примеров:

@example
(event-modifiers ?a)
     @result{} nil
(event-modifiers ?A)
     @result{} (shift)
(event-modifiers ?\C-a)
     @result{} (control)
(event-modifiers ?\C-%)
     @result{} (control)
(event-modifiers ?\C-\S-a)
     @result{} (control shift)
(event-modifiers 'f5)
     @result{} nil
(event-modifiers 's-f5)
     @result{} (super)
(event-modifiers 'M-S-f5)
     @result{} (meta shift)
(event-modifiers 'mouse-1)
     @result{} (click)
(event-modifiers 'down-mouse-1)
     @result{} (down)
@end example

Список модификаторов для события щелчка явно содержит @code{click}, но само
имя символа события не содержит @samp{click}.  Точно так же список
модификаторов для управляющего символа @acronym{ASCII}, такого как
@samp{C-a}, содержит @code{control}, хотя чтение такого события через
@code{read-char} вернет значение 1 с удаленным битом модификатора
управления.
@end defun

@defun event-basic-type event
Эта функция возвращает ключ или кнопку мыши, которые описывает @var{event},
со всеми удаленными модификаторами.  Аргумент @var{event} такой же, как в
@code{event-modifiers}.  Например:

@example
(event-basic-type ?a)
     @result{} 97
(event-basic-type ?A)
     @result{} 97
(event-basic-type ?\C-a)
     @result{} 97
(event-basic-type ?\C-\S-a)
     @result{} 97
(event-basic-type 'f5)
     @result{} f5
(event-basic-type 's-f5)
     @result{} f5
(event-basic-type 'M-S-f5)
     @result{} f5
(event-basic-type 'down-mouse-1)
     @result{} mouse-1
@end example
@end defun

@defun mouse-movement-p object
Эта функция возвращает не-@code{nil}, если @var{object} является событием
движения мыши.  @xref{Motion Events}.
@end defun

@defun event-convert-list list
Эта функция преобразует список имен модификаторов и базовый тип события в
тип события, который определяет их все.  Базовый тип события должен быть
последним элементом списка.  Например,

@example
(event-convert-list '(control ?a))
     @result{} 1
(event-convert-list '(control meta ?a))
     @result{} -134217727
(event-convert-list '(control super f1))
     @result{} C-s-f1
@end example
@end defun

@node Accessing Mouse
@subsection Доступ к Событиям Мыши
@cindex mouse events, data in
@cindex keyboard events, data in

  В этом разделе описаны удобные функции для доступа к данным при нажатии
кнопки мыши или событии движения.  Доступ к данным событий клавиатуры можно
получить с помощью тех же функций, но элементы данных, которые не применимы
к событиям клавиатуры, равны нулю или @code{nil}.

  Следующие две функции возвращают список положения мыши
(@pxref{Click Events}), определяющий позицию события мыши.

@defun event-start event
Это возвращает начальную позицию @var{event}.

Если @var{event} является событием щелчка или нажатия кнопки, это возвращает
местоположение события.  Если @var{event} является событием перетаскивания,
это возвращает начальную позицию перетаскивания.
@end defun

@defun event-end event
Это возвращает конечную позицию @var{event}.

Если @var{event} является событием перетаскивания, это возвращает позицию, в
которой пользователь отпустил кнопку мыши.  Если @var{event} является
событием щелчка или нажатия кнопки, значение фактически является начальной
позицией, которая является единственной позицией, которую имеют такие
события.
@end defun

@defun posnp object
Функцией возвращается не-@code{nil}, если @var{object} - это список позиций
мыши, в формате, задокументированном в @ref{Click Events}); и @code{nil} в
противном случае.
@end defun

@cindex mouse position list, accessing
  Этими функциями принимается список позиций мыши в качестве аргумента и
возвращаются различные его части:

@defun posn-window position
Вернётся окно, в котором находится @var{position}. Если @var{position}
представляет место за пределами фрейма, где было инициировано событие,
возвращается этот кадр.
@end defun

@defun posn-area position
Вернуть область окна, записанную в @var{position}.  Возвращается @code{nil},
когда событие произошло в текстовой области окна; в противном случае это
символ, обозначающий область, в которой произошло событие.
@end defun

@defun posn-point position
Вернуть буферную позицию в @var{position}.  Когда событие произошло в
текстовой области окна, в области полей или на краю, это целое число,
определяющее позицию буфера.  В противном случае значение не определено.
@end defun

@defun posn-x-y position
Возвращаются пиксельные координаты x и y в @var{position} как cons-ячейка
@w{@code{(@var{x} . @var{y})}}.  Эти координаты относятся к окну
@code{posn-window}.

В этом примере показано, как преобразовать координаты относительно окна в
текстовой области окна в координаты относительно кадра:

@example
(defun frame-relative-coordinates (position)
  "Вернуть координаты относительно кадра из POSITION.
   Предполагается, что POSITION находится в текстовой области окна."
  (let* ((x-y (posn-x-y position))
         (window (posn-window position))
         (edges (window-inside-pixel-edges window)))
    (cons (+ (car x-y) (car edges))
          (+ (cdr x-y) (cadr edges)))))
@end example
@end defun

@defun posn-col-row position
Функцией возвращается cons-ячейка @w{@code{(@var{col} .  @var{row})}},
содержащая оценочный столбец и строку, соответствующие позиции в буфере,
описанной @var{position}.  Возвращаемое значение дается в единицах ширины
символа фрейма по умолчанию и высоты строки по умолчанию (включая интервал),
вычисленных из значений @var{x} и @var{y}, соответствующих @var{position}.
(Таким образом, если фактические символы имеют размер, отличный от размера
по умолчанию, фактическая строка и столбец могут отличаться от этих
вычисленных значений.)

Обратите внимание, что @var{row} отсчитывается от верха текстовой области.
Если окно, заданное параметром @var{position}, имеет строку заголовка
(@pxref{Header Lines}), оно включается в счет @var{row}.
@end defun

@defun posn-actual-col-row position
Возвращется фактическая строка и столбец в @var{position} как cons-ячейка
@w{@code{(@var{col} . @var{row})}}.  Значения представляют собой фактические
номера строк и столбцов в окне, заданном @var{position}.
@xref{Click Events}, для подробностей.  Функция возвращает @code{nil}, если
@var{position} не включает фактические значения положения; в этом случае
@code{posn-col-row} можно использовать для получения приблизительных
значений.

Обратить внимание, что эта функция не учитывает визуальную ширину
отображаемых символов, например количество визуальных столбцов, занимаемых
символом табуляции или изображением.  Если требуются координаты в
канонических символьных единицах, используется вместо них
@code{posn-col-row}.
@end defun

@defun posn-string position
Возвращается строковый объект, описанный @var{position}, либо @code{nil}
(что означает, что @var{position} описывает текст буфера), либо cons-ячейка
@w{@code{(@var{string} . @var{string-pos})}}.
@end defun

@defun posn-image position
Возвращается объект изображения в @var{position}, либо в @code{nil} (если в
@var{position} нет изображения), либо в спецификации изображения
@w{@code{(image @dots{})}}.
@end defun

@defun posn-object position
Возвращается изображение или строковый объект, описанный @var{position},
либо @code{nil} (что означает, что @var{position} описывает текст буфера),
изображение @w{@code{(image @dots{})}} или cons-ячейка
@w{@code{(@var{string} . @var{string-pos})}}.
@end defun

@defun posn-object-x-y position
Возвращаются пиксельные координаты x и y относительно верхнего левого угла
объекта, описанного @var{position}, в виде cons-ячейки
@w{@code{(@var{dx} . @var{dy})}}.  Если @var{position} описывает буферный
текст, возвращает относительные координаты символа буферного текста,
ближайшего к этой позиции.
@end defun

@defun posn-object-width-height position
Возвращается ширина и высота в пикселях объекта, описанного @var{position},
как cons-ячейка @code{(@var{width} . @var{height})}.  Если @var{position}
описывает позицию в буфере, возвращается позиция этого символа.
@end defun

@cindex timestamp of a mouse event
@defun posn-timestamp position
Вернуть метку времени в @var{position}.  Это время, в которое произошло
событие, в миллисекундах.
@end defun

  Эти функции вычисляют список позиций с учетом конкретной позиции в буфере
или на экране.  Можно получить доступ к данным в этом списке позиций с
помощью функций, описанных выше.

@defun posn-at-point &optional pos window
Эта функция возвращает список позиций для позиции @var{pos} в @var{window}.
@var{pos} по умолчанию указывает на @var{window}; @var{window} по умолчанию
используется в выбранном окне.

@code{posn-at-point} возвращается @code{nil}, если @var{pos} не отображается
в @var{window}.
@end defun

@defun posn-at-x-y x y &optional frame-or-window whole
Эта функция возвращает информацию о позиции, соответствующую координатам
пикселей @var{x} и @var{y} в указанном кадре или окне,
@var{frame-or-window}, которое по умолчанию соответствует выбранному окну.
Координаты @var{x} и @var{y} относятся к используемому фрейму или окну.
Если @var{whole} равен @code{nil}, координаты относятся к текстовой области
окна, в противном случае они относятся ко всей области окна, включая полосы
прокрутки, поля и полосы.
@end defun

@node Accessing Scroll
@subsection Доступ к Событиям Полосы Прокрутки
@cindex scroll bar events, data in

  Эти функции полезны для декодирования событий полосы прокрутки.

@defun scroll-bar-event-ratio event
Функцией возвращается дробная вертикальную позиция события полосы прокрутки
внутри полосы прокрутки.  Значение представляет собой cons-ячейку
@code{(@var{portion} . @var{whole})}, содержащую два целых числа, отношение
которых является дробной позицией.
@end defun

@defun scroll-bar-scale ratio total
Функцией умножается (фактически) @var{ratio} на @var{total}, округляется
результат до целого числа.  Аргумент @var{ratio} - это не число, а точечная
пара @code{(@var{num}. @var{denom})} --- обычно значение, возвращаемое
@code{scroll-bar-event-ratio}.

Эта функция удобна для масштабирования позиции на полосе прокрутки в
буферную позицию.  Вот как это сделать:

@example
(+ (point-min)
   (scroll-bar-scale
      (posn-x-y (event-start event))
      (- (point-max) (point-min))))
@end example

Напомнается, что события полосы прокрутки имеют два целых числа, образующих
отношение, вместо пары координат x и y.
@end defun

@node Strings of Events
@subsection Помещение Событий Клавиатуры в Строки
@cindex keyboard events in strings
@cindex strings with keyboard events

  В большинстве случаев, когда используются строки, концептуализируется
строка как содержащая текстовые символы - символы того же типа, что и в
буферах или файлах.  Иногда программы на Lisp используют строки, которые
концептуально содержат символы клавиатуры; например, это могут быть
последовательности ключей или определения макросов клавиатуры.  Однако
сохранение клавиатурных символов в строке - сложный вопрос по причинам
исторической совместимости, и это не всегда возможно.

  Рекомендуется, чтобы новые программы избегали решения этих проблем, не
сохраняя события клавиатуры в строках.  Вот как это делается:

@itemize @bullet
@item
Используются векторы вместо строк для ключевых последовательностей, если
планируется использовать их для чего-либо, кроме аргументов
@code{lookup-key} и @code{define-key}.  Например, можно использовать
@code{read-key-sequence-vector} вместо @code{read-key-sequence} и
@code{this-command-keys-vector} вместо @code{this-command-keys}.

@item
Используются векторы для записи констант последовательности ключей,
содержащих метасимволы, даже при передаче их напрямую в @code{define-key}.

@item
Когда нужно просмотреть содержимое ключевой последовательности, которая
может быть строкой, сначала используется @code{listify-key-sequence}
(@pxref{Event Input Misc}), чтобы преобразовать ее в список.
@end itemize

  Сложности проистекают из битов-модификаторов, которые могут включать
символы ввода с клавиатуры.  За исключением модификатора Meta, ни один из
этих битов модификатора не может быть включен в строку, а модификатор Meta
разрешен только в особых случаях.

  Самые ранние версии GNU Emacs представляли метасимволы в виде кодов в
диапазоне от 128 до 255.  В то время базовые коды символов варьировались от
0 до 127, поэтому все коды символов клавиатуры помещались в строку.  Многие
программы на Lisp использовали @samp{\M-} в строковых константах для
обозначения метасимволов, особенно в аргументах для @code{define-key} и
подобных функций, а последовательности клавиш и последовательности событий
всегда представлялись в виде строк.

  Когда добавилась поддержка более крупных кодов основных символов,
превышающих 127, и дополнительных битов-модификаторов, пришлось изменить
представление метасимволов.  Теперь флаг, который представляет модификатор
Мета в символе, -
@tex
@math{2^{27}}
@end tex
@ifnottex
2**27
@end ifnottex
и такие числа не могут быть включены в строку.

  Для поддержки программ с @samp{\M-} в строковых константах существуют
специальные правила для включения определенных метасимволов в строку.  Вот
правила интерпретации строки как последовательности входных символов:

@itemize @bullet
@item
Если значение символа клавиатуры находится в диапазоне от 0 до 127, оно
может оставаться в строке без изменений.

@item
Метаварианты этих символов с кодами в диапазоне от
@tex
@math{2^{27}}
@end tex
@ifnottex
2**27
@end ifnottex
до
@tex
@math{2^{27} + 127},
@end tex
@ifnottex
2**27+127,
@end ifnottex
также могут входить в строку, но потребуется изменить их числовые значения.
Также следует установить
@tex
@math{2^{7}}
@end tex
@ifnottex
2**7
@end ifnottex
бит вместо
@tex
@math{2^{27}}
@end tex
@ifnottex
2**27
@end ifnottex
бит, в результате чего получается значение от 128 до 255.  Только
однобайтная строка может включать эти коды.

@item
Не-@acronym{ASCII} символов выше 256 могут быть включены в многобайтовую
строку.

@item
Другие события символов клавиатуры не могут поместиться в строку.  Сюда
входят события клавиатуры в диапазоне от 128 до 255.
@end itemize

  Такие функции, как @code{read-key-sequence}, которые создают строки
символов ввода с клавиатуры, следуют этим правилам: они создают векторы
вместо строк, когда события не помещаются в строку.

  Когда используется синтаксис чтения @samp{\M-} в строке, создается код в
диапазоне от 128 до 255 - тот же код, который получается, если изменяется
соответствующее событие клавиатуры, чтобы поместить его в строку.  Таким
образом, мета-события в строках работают согласованно, независимо от того,
как они попадают в строки.

  Однако большинству программ следует избегать этих проблем, следуя
рекомендациям в начале этого раздела.

@node Reading Input
@section Чтение Ввода
@cindex read input
@cindex keyboard input

  Командный цикл редактора считывает последовательности клавиш с помощью
функции @code{read-key-sequence}, которая использует @code{read-event}.  Эти
и другие функции для ввода событий также доступны для использования в
программах на Lisp.  Смотреть также @code{momentary-string-display} в
@ref{Temporary Displays} и @code{sit-for} в @ref{Waiting}.
@xref{Terminal Input}, для функций и переменных для управления режимами
ввода терминала и отладки ввода терминала.

  Для устройств ввода более высокого уровня, смотреть @ref{Minibuffers}.

@menu
* Key Sequence Input::          Как читать одну ключевую последовательность.
* Reading One Event::           Как прочитать только одно событие.
* Event Mod::                  Как Emacs изменяет события по мере их чтения.
* Invoking the Input Method::   Как чтение события использует метод ввода.
* Quoted Character Input::      Просить пользователя указать символ.
* Event Input Misc::            Как перечитать или выбросить события ввода.
@end menu

@node Key Sequence Input
@subsection Ввод Последовательности Ключей
@cindex key sequence input

  Командный цикл читает ключевую последовательность за раз, вызывая
@code{read-key-sequence}.  Программы Lisp также могут вызывать эту функцию;
например, @code{describe-key} используется его для чтения описания ключа.

@defun read-key-sequence prompt &optional continue-echo dont-downcase-last switch-frame-ok command-loop
Функцией считывается ключевая последовательность ключей и возвращается она в
виде строки или вектора.  Продолжается считывание события, пока не наберется
полная ключевая последовательность; то есть достаточная, чтобы указать
команду без префикса с использованием текущих активных ключевых карт.
(Напоминание, последовательность ключей, которая начинается с события мыши,
считывается с использованием ключевых карт буфера в окне, в котором
находилась мышь, а не текущего буфера.)

Если все события представляют собой символы и все могут уместиться в строке,
то @code{read-key-sequence} возвращает строку (@pxref{Strings of Events}).
В противном случае возвращается вектор, поскольку вектор может содержать все
виды событий - символы, символы и списки.  Элементы строки или вектора - это
события в ключевой последовательности.

Чтение ключевой последовательности включает в себя перевод событий
различными способами.  @xref{Translation Keymaps}.

Аргумент @var{prompt} - это либо строка, которая должна отображаться в
эхо-области как подсказка, либо @code{nil}, означающая, что подсказка не
отображается.  Аргумент @var{continue-echo}, если не-@code{nil}, означает
вывод этого ключа как продолжение предыдущего ключа.

Обычно любое событие в верхнем регистре преобразуется в нижний регистр, если
исходное событие не определено и определен его эквивалент в нижнем регистре.
Аргумент @var{dont-downcase-last}, если не-@code{nil}, означает не
преобразовывать последнее событие в нижний регистр. Это подходит для чтения
ключевой последовательности, которую необходимо определить.

Аргумент @var{switch-frame-ok}, если не-@code{nil}, означает, что эта
функция должна обрабатывать событие @code{switch-frame}, если пользователь
переключает кадры перед тем, как что-либо печатать.  Если пользователь
переключает кадры в середине последовательности клавиш или в начале
последовательности, но @var{switch-frame-ok} имеет значение @code{nil}, то
событие будет отложено до окончания текущей последовательности клавиш.

Аргумент @var{command-loop}, если не-@code{nil}, означает, что эта
последовательность клавиш читается чем-то, что будет читать команды одну за
другой.  Это должно быть @code{nil}, если вызывающий будет читать только
одну последовательность ключей.

В следующем примере Emacs отображает приглашение @samp{?} в эхо-области, а
затем пользователь вводит @kbd{C-x C-f}.

@example
(read-key-sequence "?")

@group
---------- Echo Area ----------
?@kbd{C-x C-f}
---------- Echo Area ----------

     @result{} "^X^F"
@end group
@end example

Функция @code{read-key-sequence} подавляет завершение: @kbd{C-g}, набор
прочитанный с помощью этой функции, работает как любой другой символ и не
устанавливает @code{quit-flag}.  @xref{Quitting}.
@end defun

@defun read-key-sequence-vector prompt &optional continue-echo dont-downcase-last switch-frame-ok command-loop
Это похоже на @code{read-key-sequence}, за исключением того, что всегда
возвращается ключевая последовательность как вектор, а не как строка.
@xref{Strings of Events}.
@end defun

@cindex upper case key sequence
@cindex downcasing in @code{lookup-key}
@cindex shift-translation
Если вводимый символ имеет верхний регистр (или имеет модификатор сдвига) и
не имеет привязки ключей, а его эквивалент в нижнем регистре имеет нижний
регистр, то @code{read-key-sequence} преобразует символ в нижний регистр.
Обратить внимание, что @code{lookup-key} не выполняет преобразование
регистра таким образом.

@vindex this-command-keys-shift-translated
Когда чтение ввода приводит к такому @dfn{shift-translation}, Emacs
устанавливает для переменной @code{this-command-keys-shift-translated}
значение не-@code{nil}.  Программой на Lisp может проверятся эта переменная,
если нужно изменить свое поведение при вызове с помощью ключей с
преобразованием сдвига.  Например, функция @code{handle-shift-selection}
проверяет значение этой переменной, чтобы определить, как активировать или
деактивировать регистр.  (@pxref{The Mark, handle-shift-selection}).

Функцией @code{read-key-sequence} также преобразуются некоторые события
мыши.  Преобразуются несвязанные события перетаскивания в события щелчка и
полностью отбрасывает несвязанные события нажатия кнопки.  Также
перетасовываются события фокуса и разные события окна, чтобы они никогда не
появлялись в ключевых последовательностях с любыми другими событиями.

@cindex @code{header-line} prefix key
@cindex @code{mode-line} prefix key
@cindex @code{vertical-line} prefix key
@cindex @code{horizontal-scroll-bar} prefix key
@cindex @code{vertical-scroll-bar} prefix key
@cindex @code{menu-bar} prefix key
@cindex mouse events, in special parts of frame
Когда события мыши происходят в особых частях окна, таких как строка режима
или полоса прокрутки, тип события не показывает ничего особенного - это тот
же символ, который обычно представляет комбинацию кнопки мыши и
клавиш-модификаторов.  Информация о оконной части хранится в другом месте
события --- в координатах.  Но @code{read-key-sequence} преобразует эту
информацию в воображаемые префиксные ключи, которые являются символами:
@code{header-line}, @code{horizontal-scroll-bar}, @code{menu-bar},
@code{mode-line}, @code{vertical-line}, и @code{vertical-scroll-bar}.  Можно
определить значения щелчков мыши в специальных частях окна, задав
последовательности ключей с помощью этих воображаемых префиксных клавиш.

Например, если вызывается @code{read-key-sequence}, а затем щелкается мышь
по строке режима окна, получается два события, например:

@example
(read-key-sequence "Щелкните строку режима: ")
     @result{} [mode-line
         (mouse-1
          (#<window 6 on NEWS> mode-line
           (40 . 63) 5959987))]
@end example

@defvar num-input-keys
Значение этой переменной - это количество ключевых последовательностей,
обработанных на данный момент в этом сеансе Emacs.  Сюда входят
последовательности ключей, считываемые с терминала, и последовательности
ключей, считываемые из выполняемых макросов клавиатуры.
@end defvar

@node Reading One Event
@subsection Чтение Одного События
@cindex reading a single event
@cindex event, reading only one

  Функции самого нижнего уровня для ввода команд - @code{read-event},
@code{read-char} и @code{read-char-exclusive}.

@defun read-event &optional prompt inherit-input-method seconds
Эта функция считывает и возвращает следующее событие ввода команды, ожидая,
если необходимо, пока событие не станет доступным.

Возвращаемое событие может исходить непосредственно от пользователя или из
макроса клавиатуры.  Не декодируется системой кодирования ввода клавиатуры
(@pxref{Terminal I/O Encoding}).

Если необязательный аргумент @var{prompt} - не-@code{nil}, это должна быть
строка, отображаемая в эхо-области в качестве приглашения.  В противном
случае @code{read-event} не отображается никаких сообщений, указывающих на
то, что ожидается на ввод; вместо этого выводится подсказка в виде эха:
отображается описания событий, которые привели к текущей команде или были
прочитаны ею.  @xref{The Echo Area}.

Если @var{inherit-input-method} равен не-@code{nil}, то используется текущий
метод ввода (если есть), чтобы можно было ввести не-@acronym{ASCII} символ.
В противном случае обработка метода ввода отключена для чтения этого
события.

Если @code{cursor-in-echo-area} равен не-@code{nil}, то @code{read-event}
временно перемещает курсор в эхо-область, в конец любого отображаемого там
сообщения.  В противном случае @code{read-event} не перемещает курсор.

Если @var{seconds} равен не-@code{nil}, это должно быть число, указывающее
максимальное время ожидания ввода в секундах.  Если в течение этого времени
ввод не поступает, @code{read-event} прекращает ожидание и возвращает
@code{nil}.  @var{seconds} с плавающей запятой означает ожидание дробного
числа секунд.  Некоторые системы поддерживают только целое количество
секунд, в этих системах @var{seconds} округляется в меньшую сторону.  Если
@var{seconds} равен @code{nil}, @code{read-event} ожидает поступления ввода
столько, сколько необходимо.

Если @var{seconds} равен @code{nil}, Emacs считается бездействующим в
ожидании поступления пользовательского ввода.  Таймеры простоя - созданные с
помощью @code{run-with-idle-timer} (@pxref{Idle Timers}) - могут работать в
этот период.  Однако, если @var{seconds} равен не-@code{nil}, состояние
бездействия остается неизменным.  Если Emacs не находится в состоянии
ожидания при вызове @code{read-event}, он остается неактивным на протяжении
всей работы @code{read-event}; если Emacs простаивает (что может произойти,
если вызов происходит внутри таймера простоя), он остается бездействующим.

Если @code{read-event} получает событие, которое определяется как символ
справки, тогда в некоторых случаях @code{read-event} обрабатывает событие на
прямую, не возвращаясь.  @xref{Help Functions}.  Некоторые другие события,
называемые @dfn{special events}, также обрабатываются непосредственно в
@code{read-event} (@pxref{Special Events}).

Вот что произойдет, если вызыватется @code{read-event} и затем нажмается
функциональная клавиша со стрелкой вправо:

@example
@group
(read-event)
     @result{} right
@end group
@end example
@end defun

@defun read-char &optional prompt inherit-input-method seconds
Эта функция считывает и возвращает событие символа.  Если пользователь
генерирует событие, не являющееся символом (т.е. событие щелчка мыши или
функциональной клавиши), @code{read-char} сигнализирует об ошибке.
Аргументы работают как в @code{read-event}.

Если у события есть модификаторы, Emacs пытается разрешить их и вернуть код
соответствующего символа.  Например, если пользователь вводит @kbd{C-a},
функция возвращает 1, который является кодом @acronym{ASCII} символа
@samp{C-a}.  Если некоторые из модификаторов не могут быть отражены в коде
символа, @code{read-char} оставляет неразрешенные биты модификатора,
установленные в возвращенном событии.  Например, если пользователь вводит
@kbd{C-M-a}, функция возвращает 134217729, 8000001 в шестнадцатеричном
формате, то есть @: @samp{C-a} с установленным битом модификатора Meta.
Это значение не является допустимым символьным кодом: оно не проходит тест
@code{characterp} (@pxref{Character Codes}).  Используйте
@code{event-basic-type} (@pxref{Classifying Events}), чтобы восстановить код
символа с удаленными битами модификатора; используйте @code{event-modifiers}
для проверки модификаторов в событии символа, возвращаемом @code{read-char}.

В первом примере ниже пользователь вводит символ @kbd{1} (код
@acronym{ASCII} 49).  Во втором примере показано определение макроса
клавиатуры, которое вызывает @code{read-char} из минибуфера с помощью
@code{eval-expression}.  @code{read-char} читает следующий символ макроса
клавиатуры - @kbd{1}.  Затем @code{eval-expression} отображает возвращаемое
значение в эхо-области.

@example
@group
(read-char)
     @result{} 49
@end group

@group
;; @r{Предполагается, что здесь используется @kbd{M-:} для оценки этого.}
(symbol-function 'foo)
     @result{} "^[:(read-char)^M1"
@end group
@group
(execute-kbd-macro 'foo)
     @print{} 49
     @result{} nil
@end group
@end example
@end defun

@defun read-char-exclusive &optional prompt inherit-input-method seconds
Эта функция считывает и возвращает событие ввода символа.  Если пользователь
генерирует событие, которое не является символьным событием,
@code{read-char-exclusive} игнорирует его и читает другое событие, пока не
получит символ.  Аргументы работают как в @code{read-event}.  Возвращаемое
значение может включать биты модификатора, как в случае с @code{read-char}.
@end defun

  Ни одна из вышеперечисленных функций не подавляет выход.

@defvar num-nonmacro-input-events
Эта переменная содержит общее количество событий ввода, полученных на данный
момент от терминала, не считая событий, сгенерированных макросами
клавиатуры.
@end defvar

  Подчеркнем, что, в отличие от @code{read-key-sequence}, функции
@code{read-event}, @code{read-char}, и @code{read-char-exclusive} не
выполняют трансляции, описанные в @ref{Translation Keymaps}.  Если требуется
прочитать один ключ с учетом этих прансляций, используйте функцию
@code{read-key}:

@defun read-key &optional prompt
Эта функция считывает одну клавишу.  Это промежуточное звено между
@code{read-key-sequence} и @code{read-event}.  В отличие от первого,
считывается один ключ, а не последовательность ключей.  В отличие от
последнего, не возвращается исходное событие, а декодируется и преобразуется
ввод пользователя в соответствии с @code{input-decode-map},
@code{local-function-key-map} и @code{key-translation-map}
(@pxref{Translation Keymaps}).

Аргумент @var{prompt} - это либо строка, которая должна отображаться в
эхо-области как подсказка, либо @code{nil}, означающая, что подсказка не
отображается.
@end defun

@defun read-char-choice prompt chars &optional inhibit-quit
Эта функция использует @code{read-key} для чтения и возврата одного символа.Игнорирует любой ввод, который не является членом @var{chars}, списка
допустимых символов.  При желании также будет игнорировать события выхода с
клавиатуры, пока ожидает действительного ввода.  Если привязывать
@code{help-form} (@pxref{Help Functions}) к значению не-@code{nil} при
вызове @code{read-char-choice}, то нажатие @code{help-char} заставляет
вычислить @code{help-form} и отобразить результат.  Затем продолжается
ожидание допустимого входного символа или выхода с клавиатуры.
@end defun

@defun read-multiple-choice prompt choices
Задайте пользователю вопрос с несколькими вариантами ответов.  @var{prompt}
должно быть строкой, которая будет отображаться как приглашение.

@var{choices} - это список, в котором первый элемент в каждой записи - это
вводимый символ, второй элемент - это короткое имя записи, которая будет
отображаться при запросе (если есть место, оно может быть сокращено), а
третья, необязательная запись - более подробное объяснение, которое будет
отображаться в буфере справки, если пользователь запросит дополнительную
помощь.

Возвращаемое значение - это совпадающее значение из @var{choices}.

@lisp
(read-multiple-choice
 "Continue connecting?"
 '((?a "always" "Accept certificate for this and future sessions.")
   (?s "session only" "Accept certificate this session only.")
   (?n "no" "Refuse to use certificate, close connection.")))
@end lisp

Грань @code{read-multiple-choice-face} используется для выделения
совпадающих символов в строке имени на графических терминалах.

@end defun

@node Event Mod
@subsection Изменение и Преобразование Входных Событий
@cindex modifiers of events
@cindex translating input events
@cindex event translation

  Emacs модифицирует каждое считываемое событие в соответствии с
@code{extra-keyboard-modifiers}, затем транслирует его через
@code{keyboard-translate-table} (если применимо), прежде чем вернуть его из
@code{read-event}.

@defvar extra-keyboard-modifiers
Эта переменная позволяет программам Lisp ``press'' использовать
клавиши-модификаторы на клавиатуре.  Значение - это символ.  Имеют значение
только символьные модификаторы.  Каждый раз, когда пользователь набирает
клавишу на клавиатуре, она изменяется, как если бы эти клавиши-модификаторы
удерживались.  Например, если привязано @code{extra-keyboard-modifiers} к
@code{?\C-\M-a}, то ко всем вводимым с клавиатуры символам, набранным во
время привязки, будут применены модификаторы control и meta.  Символ
@code{?\C-@@}, эквивалентный целому числу 0, считается для этой цели не
управляющим символом, а символом без модификаторов. Таким образом, установка
@code{extra-keyboard-modifiers} в ноль отменяет любые изменения.

При использовании оконной системы программа может таким образом нажимать
любую из клавиш-модификаторов.  В противном случае виртуально можно будет
нажимать только клавиши @key{CTL} и @key{META}.

Обратить внимание, что эта переменная применяется только к событиям, которые
действительно исходят с клавиатуры, и не влияет на события мыши или любые
другие события.
@end defvar

@defvar keyboard-translate-table
Эта локальная для терминала переменная представляет собой таблицу перевода
символов клавиатуры.  Это позволяет перетасовывать клавиши на клавиатуре, не
меняя привязки команд.  Значение обычно представляет собой таблицу символов
или @code{nil}.  (Это также может быть строка или вектор, но это считается
устаревшим.)

Если @code{keyboard-translate-table} - это таблица символов
(@pxref{Char-Tables}), то каждый символ, считанный с клавиатуры, ищется в
этой таблице символов.  Если найденное значение - не-@code{nil}, то оно
используется вместо фактического входного символа.

Обратить внимание, что этот перевод - первое, что происходит с символом
после его чтения с терминала.  Функции ведения записи, такие как файлы
@code{recent-keys} и dribble, записывают символы после перевода.

Также обратить внимание, что этот перевод выполняется до того, как символы
будут переданы в методы ввода (@pxref{Input Methods}).  Использовать
@code{translation-table-for-input} (@pxref{Translation of Characters}), еслитребуется переводить символы после срабатывания методов ввода.
@end defvar

@defun keyboard-translate from to
This function modifies @code{keyboard-translate-table} to translate
character code @var{from} into character code @var{to}.  It creates
the keyboard translate table if necessary.
@end defun

  Here's an example of using the @code{keyboard-translate-table} to
make @kbd{C-x}, @kbd{C-c} and @kbd{C-v} perform the cut, copy and paste
operations:

@example
(keyboard-translate ?\C-x 'control-x)
(keyboard-translate ?\C-c 'control-c)
(keyboard-translate ?\C-v 'control-v)
(global-set-key [control-x] 'kill-region)
(global-set-key [control-c] 'kill-ring-save)
(global-set-key [control-v] 'yank)
@end example

@noindent
On a graphical terminal that supports extended @acronym{ASCII} input,
you can still get the standard Emacs meanings of one of those
characters by typing it with the shift key.  That makes it a different
character as far as keyboard translation is concerned, but it has the
same usual meaning.

  @xref{Translation Keymaps}, for mechanisms that translate event sequences
at the level of @code{read-key-sequence}.

@node Invoking the Input Method
@subsection Invoking the Input Method
@cindex invoking input method

  The event-reading functions invoke the current input method, if any
(@pxref{Input Methods}).  If the value of @code{input-method-function}
is non-@code{nil}, it should be a function; when @code{read-event} reads
a printing character (including @key{SPC}) with no modifier bits, it
calls that function, passing the character as an argument.

@defvar input-method-function
If this is non-@code{nil}, its value specifies the current input method
function.

@strong{Warning:} don't bind this variable with @code{let}.  It is often
buffer-local, and if you bind it around reading input (which is exactly
when you @emph{would} bind it), switching buffers asynchronously while
Emacs is waiting will cause the value to be restored in the wrong
buffer.
@end defvar

  The input method function should return a list of events which should
be used as input.  (If the list is @code{nil}, that means there is no
input, so @code{read-event} waits for another event.)  These events are
processed before the events in @code{unread-command-events}
(@pxref{Event Input Misc}).  Events
returned by the input method function are not passed to the input method
function again, even if they are printing characters with no modifier
bits.

  If the input method function calls @code{read-event} or
@code{read-key-sequence}, it should bind @code{input-method-function} to
@code{nil} first, to prevent recursion.

  The input method function is not called when reading the second and
subsequent events of a key sequence.  Thus, these characters are not
subject to input method processing.  The input method function should
test the values of @code{overriding-local-map} and
@code{overriding-terminal-local-map}; if either of these variables is
non-@code{nil}, the input method should put its argument into a list and
return that list with no further processing.

@node Quoted Character Input
@subsection Quoted Character Input
@cindex quoted character input

  You can use the function @code{read-quoted-char} to ask the user to
specify a character, and allow the user to specify a control or meta
character conveniently, either literally or as an octal character code.
The command @code{quoted-insert} uses this function.

@defun read-quoted-char &optional prompt
@cindex octal character input
@cindex control characters, reading
@cindex nonprinting characters, reading
This function is like @code{read-char}, except that if the first
character read is an octal digit (0--7), it reads any number of octal
digits (but stopping if a non-octal digit is found), and returns the
character represented by that numeric character code.  If the
character that terminates the sequence of octal digits is @key{RET},
it is discarded.  Any other terminating character is used as input
after this function returns.

Quitting is suppressed when the first character is read, so that the
user can enter a @kbd{C-g}.  @xref{Quitting}.

If @var{prompt} is supplied, it specifies a string for prompting the
user.  The prompt string is always displayed in the echo area, followed
by a single @samp{-}.

In the following example, the user types in the octal number 177 (which
is 127 in decimal).

@example
(read-quoted-char "What character")

@group
---------- Echo Area ----------
What character @kbd{1 7 7}-
---------- Echo Area ----------

     @result{} 127
@end group
@end example
@end defun

@need 2000
@node Event Input Misc
@subsection Miscellaneous Event Input Features

This section describes how to peek ahead at events without using
them up, how to check for pending input, and how to discard pending
input.  See also the function @code{read-passwd} (@pxref{Reading a
Password}).

@defvar unread-command-events
@cindex next input
@cindex peeking at input
This variable holds a list of events waiting to be read as command
input.  The events are used in the order they appear in the list, and
removed one by one as they are used.

The variable is needed because in some cases a function reads an event
and then decides not to use it.  Storing the event in this variable
causes it to be processed normally, by the command loop or by the
functions to read command input.

@cindex prefix argument unreading
For example, the function that implements numeric prefix arguments reads
any number of digits.  When it finds a non-digit event, it must unread
the event so that it can be read normally by the command loop.
Likewise, incremental search uses this feature to unread events with no
special meaning in a search, because these events should exit the search
and then execute normally.

The reliable and easy way to extract events from a key sequence so as
to put them in @code{unread-command-events} is to use
@code{listify-key-sequence} (see below).

Normally you add events to the front of this list, so that the events
most recently unread will be reread first.

Events read from this list are not normally added to the current
command's key sequence (as returned by, e.g., @code{this-command-keys}),
as the events will already have been added once as they were read for
the first time.  An element of the form @w{@code{(t . @var{event})}}
forces @var{event} to be added to the current command's key sequence.
@end defvar

@defun listify-key-sequence key
This function converts the string or vector @var{key} to a list of
individual events, which you can put in @code{unread-command-events}.
@end defun

@defun input-pending-p &optional check-timers
@cindex waiting for command key input
This function determines whether any command input is currently
available to be read.  It returns immediately, with value @code{t} if
there is available input, @code{nil} otherwise.  On rare occasions it
may return @code{t} when no input is available.

If the optional argument @var{check-timers} is non-@code{nil}, then if
no input is available, Emacs runs any timers which are ready.
@xref{Timers}.
@end defun

@defvar last-input-event
This variable records the last terminal input event read, whether
as part of a command or explicitly by a Lisp program.

In the example below, the Lisp program reads the character @kbd{1},
@acronym{ASCII} code 49.  It becomes the value of @code{last-input-event},
while @kbd{C-e} (we assume @kbd{C-x C-e} command is used to evaluate
this expression) remains the value of @code{last-command-event}.

@example
@group
(progn (print (read-char))
       (print last-command-event)
       last-input-event)
     @print{} 49
     @print{} 5
     @result{} 49
@end group
@end example
@end defvar

@defmac while-no-input body@dots{}
This construct runs the @var{body} forms and returns the value of the
last one---but only if no input arrives.  If any input arrives during
the execution of the @var{body} forms, it aborts them (working much
like a quit).  The @code{while-no-input} form returns @code{nil} if
aborted by a real quit, and returns @code{t} if aborted by arrival of
other input.

If a part of @var{body} binds @code{inhibit-quit} to non-@code{nil},
arrival of input during those parts won't cause an abort until
the end of that part.

If you want to be able to distinguish all possible values computed
by @var{body} from both kinds of abort conditions, write the code
like this:

@example
(while-no-input
  (list
    (progn . @var{body})))
@end example
@end defmac

@defvar while-no-input-ignore-events
This variable allow setting which special events @code{while-no-input}
should ignore.  It is a list of symbols.

@end defvar

@defun discard-input
@cindex flushing input
@cindex discarding input
@cindex keyboard macro, terminating
This function discards the contents of the terminal input buffer and
cancels any keyboard macro that might be in the process of definition.
It returns @code{nil}.

In the following example, the user may type a number of characters right
after starting the evaluation of the form.  After the @code{sleep-for}
finishes sleeping, @code{discard-input} discards any characters typed
during the sleep.

@example
(progn (sleep-for 2)
       (discard-input))
     @result{} nil
@end example
@end defun

@node Special Events
@section Special Events

@cindex special events
Certain @dfn{special events} are handled at a very low level---as soon
as they are read.  The @code{read-event} function processes these
events itself, and never returns them.  Instead, it keeps waiting for
the first event that is not special and returns that one.

  Special events do not echo, they are never grouped into key
sequences, and they never appear in the value of
@code{last-command-event} or @code{(this-command-keys)}.  They do not
discard a numeric argument, they cannot be unread with
@code{unread-command-events}, they may not appear in a keyboard macro,
and they are not recorded in a keyboard macro while you are defining
one.

  Special events do, however, appear in @code{last-input-event}
immediately after they are read, and this is the way for the event's
definition to find the actual event.

  The events types @code{iconify-frame}, @code{make-frame-visible},
@code{delete-frame}, @code{drag-n-drop}, @code{language-change}, and
user signals like @code{sigusr1} are normally handled in this way.
The keymap which defines how to handle special events---and which
events are special---is in the variable @code{special-event-map}
(@pxref{Active Keymaps}).

@node Waiting
@section Waiting for Elapsed Time or Input
@cindex waiting

  The wait functions are designed to wait for a certain amount of time
to pass or until there is input.  For example, you may wish to pause in
the middle of a computation to allow the user time to view the display.
@code{sit-for} pauses and updates the screen, and returns immediately if
input comes in, while @code{sleep-for} pauses without updating the
screen.

@defun sit-for seconds &optional nodisp
This function performs redisplay (provided there is no pending input
from the user), then waits @var{seconds} seconds, or until input is
available.  The usual purpose of @code{sit-for} is to give the user
time to read text that you display.  The value is @code{t} if
@code{sit-for} waited the full time with no input arriving
(@pxref{Event Input Misc}).  Otherwise, the value is @code{nil}.

The argument @var{seconds} need not be an integer.  If it is floating
point, @code{sit-for} waits for a fractional number of seconds.
Some systems support only a whole number of seconds; on these systems,
@var{seconds} is rounded down.

The expression @code{(sit-for 0)} is equivalent to @code{(redisplay)},
i.e., it requests a redisplay, without any delay, if there is no pending input.
@xref{Forcing Redisplay}.

If @var{nodisp} is non-@code{nil}, then @code{sit-for} does not
redisplay, but it still returns as soon as input is available (or when
the timeout elapses).

In batch mode (@pxref{Batch Mode}), @code{sit-for} cannot be
interrupted, even by input from the standard input descriptor.  It is
thus equivalent to @code{sleep-for}, which is described below.

It is also possible to call @code{sit-for} with three arguments,
as @code{(sit-for @var{seconds} @var{millisec} @var{nodisp})},
but that is considered obsolete.
@end defun

@defun sleep-for seconds &optional millisec
This function simply pauses for @var{seconds} seconds without updating
the display.  It pays no attention to available input.  It returns
@code{nil}.

The argument @var{seconds} need not be an integer.  If it is floating
point, @code{sleep-for} waits for a fractional number of seconds.
Some systems support only a whole number of seconds; on these systems,
@var{seconds} is rounded down.

The optional argument @var{millisec} specifies an additional waiting
period measured in milliseconds.  This adds to the period specified by
@var{seconds}.  If the system doesn't support waiting fractions of a
second, you get an error if you specify nonzero @var{millisec}.

Use @code{sleep-for} when you wish to guarantee a delay.
@end defun

  @xref{Time of Day}, for functions to get the current time.

@node Quitting
@section Quitting
@cindex @kbd{C-g}
@cindex quitting
@cindex interrupt Lisp functions

  Typing @kbd{C-g} while a Lisp function is running causes Emacs to
@dfn{quit} whatever it is doing.  This means that control returns to the
innermost active command loop.

  Typing @kbd{C-g} while the command loop is waiting for keyboard input
does not cause a quit; it acts as an ordinary input character.  In the
simplest case, you cannot tell the difference, because @kbd{C-g}
normally runs the command @code{keyboard-quit}, whose effect is to quit.
However, when @kbd{C-g} follows a prefix key, they combine to form an
undefined key.  The effect is to cancel the prefix key as well as any
prefix argument.

  In the minibuffer, @kbd{C-g} has a different definition: it aborts out
of the minibuffer.  This means, in effect, that it exits the minibuffer
and then quits.  (Simply quitting would return to the command loop
@emph{within} the minibuffer.)  The reason why @kbd{C-g} does not quit
directly when the command reader is reading input is so that its meaning
can be redefined in the minibuffer in this way.  @kbd{C-g} following a
prefix key is not redefined in the minibuffer, and it has its normal
effect of canceling the prefix key and prefix argument.  This too
would not be possible if @kbd{C-g} always quit directly.

  When @kbd{C-g} does directly quit, it does so by setting the variable
@code{quit-flag} to @code{t}.  Emacs checks this variable at appropriate
times and quits if it is not @code{nil}.  Setting @code{quit-flag}
non-@code{nil} in any way thus causes a quit.

  At the level of C code, quitting cannot happen just anywhere; only at the
special places that check @code{quit-flag}.  The reason for this is
that quitting at other places might leave an inconsistency in Emacs's
internal state.  Because quitting is delayed until a safe place, quitting
cannot make Emacs crash.

  Certain functions such as @code{read-key-sequence} or
@code{read-quoted-char} prevent quitting entirely even though they wait
for input.  Instead of quitting, @kbd{C-g} serves as the requested
input.  In the case of @code{read-key-sequence}, this serves to bring
about the special behavior of @kbd{C-g} in the command loop.  In the
case of @code{read-quoted-char}, this is so that @kbd{C-q} can be used
to quote a @kbd{C-g}.

@cindex preventing quitting
  You can prevent quitting for a portion of a Lisp function by binding
the variable @code{inhibit-quit} to a non-@code{nil} value.  Then,
although @kbd{C-g} still sets @code{quit-flag} to @code{t} as usual, the
usual result of this---a quit---is prevented.  Eventually,
@code{inhibit-quit} will become @code{nil} again, such as when its
binding is unwound at the end of a @code{let} form.  At that time, if
@code{quit-flag} is still non-@code{nil}, the requested quit happens
immediately.  This behavior is ideal when you wish to make sure that
quitting does not happen within a critical section of the program.

@cindex @code{read-quoted-char} quitting
  In some functions (such as @code{read-quoted-char}), @kbd{C-g} is
handled in a special way that does not involve quitting.  This is done
by reading the input with @code{inhibit-quit} bound to @code{t}, and
setting @code{quit-flag} to @code{nil} before @code{inhibit-quit}
becomes @code{nil} again.  This excerpt from the definition of
@code{read-quoted-char} shows how this is done; it also shows that
normal quitting is permitted after the first character of input.

@example
(defun read-quoted-char (&optional prompt)
  "@dots{}@var{documentation}@dots{}"
  (let ((message-log-max nil) done (first t) (code 0) char)
    (while (not done)
      (let ((inhibit-quit first)
            @dots{})
        (and prompt (message "%s-" prompt))
        (setq char (read-event))
        (if inhibit-quit (setq quit-flag nil)))
      @r{@dots{}set the variable @code{code}@dots{}})
    code))
@end example

@defvar quit-flag
If this variable is non-@code{nil}, then Emacs quits immediately, unless
@code{inhibit-quit} is non-@code{nil}.  Typing @kbd{C-g} ordinarily sets
@code{quit-flag} non-@code{nil}, regardless of @code{inhibit-quit}.
@end defvar

@defvar inhibit-quit
This variable determines whether Emacs should quit when @code{quit-flag}
is set to a value other than @code{nil}.  If @code{inhibit-quit} is
non-@code{nil}, then @code{quit-flag} has no special effect.
@end defvar

@defmac with-local-quit body@dots{}
This macro executes @var{body} forms in sequence, but allows quitting, at
least locally, within @var{body} even if @code{inhibit-quit} was
non-@code{nil} outside this construct.  It returns the value of the
last form in @var{body}, unless exited by quitting, in which case
it returns @code{nil}.

If @code{inhibit-quit} is @code{nil} on entry to @code{with-local-quit},
it only executes the @var{body}, and setting @code{quit-flag} causes
a normal quit.  However, if @code{inhibit-quit} is non-@code{nil} so
that ordinary quitting is delayed, a non-@code{nil} @code{quit-flag}
triggers a special kind of local quit.  This ends the execution of
@var{body} and exits the @code{with-local-quit} body with
@code{quit-flag} still non-@code{nil}, so that another (ordinary) quit
will happen as soon as that is allowed.  If @code{quit-flag} is
already non-@code{nil} at the beginning of @var{body}, the local quit
happens immediately and the body doesn't execute at all.

This macro is mainly useful in functions that can be called from
timers, process filters, process sentinels, @code{pre-command-hook},
@code{post-command-hook}, and other places where @code{inhibit-quit} is
normally bound to @code{t}.
@end defmac

@deffn Command keyboard-quit
This function signals the @code{quit} condition with @code{(signal 'quit
nil)}.  This is the same thing that quitting does.  (See @code{signal}
in @ref{Errors}.)
@end deffn

  You can specify a character other than @kbd{C-g} to use for quitting.
See the function @code{set-input-mode} in @ref{Input Modes}.

@node Prefix Command Arguments
@section Prefix Command Arguments
@cindex prefix argument
@cindex raw prefix argument
@cindex numeric prefix argument

  Most Emacs commands can use a @dfn{prefix argument}, a number
specified before the command itself.  (Don't confuse prefix arguments
with prefix keys.)  The prefix argument is at all times represented by a
value, which may be @code{nil}, meaning there is currently no prefix
argument.  Each command may use the prefix argument or ignore it.

  There are two representations of the prefix argument: @dfn{raw} and
@dfn{numeric}.  The editor command loop uses the raw representation
internally, and so do the Lisp variables that store the information, but
commands can request either representation.

  Here are the possible values of a raw prefix argument:

@itemize @bullet
@item
@code{nil}, meaning there is no prefix argument.  Its numeric value is
1, but numerous commands make a distinction between @code{nil} and the
integer 1.

@item
An integer, which stands for itself.

@item
A list of one element, which is an integer.  This form of prefix
argument results from one or a succession of @kbd{C-u}s with no
digits.  The numeric value is the integer in the list, but some
commands make a distinction between such a list and an integer alone.

@item
The symbol @code{-}.  This indicates that @kbd{M--} or @kbd{C-u -} was
typed, without following digits.  The equivalent numeric value is
@minus{}1, but some commands make a distinction between the integer
@minus{}1 and the symbol @code{-}.
@end itemize

We illustrate these possibilities by calling the following function with
various prefixes:

@example
@group
(defun display-prefix (arg)
  "Display the value of the raw prefix arg."
  (interactive "P")
  (message "%s" arg))
@end group
@end example

@noindent
Here are the results of calling @code{display-prefix} with various
raw prefix arguments:

@example
        M-x display-prefix  @print{} nil

C-u     M-x display-prefix  @print{} (4)

C-u C-u M-x display-prefix  @print{} (16)

C-u 3   M-x display-prefix  @print{} 3

M-3     M-x display-prefix  @print{} 3      ; @r{(Same as @code{C-u 3}.)}

C-u -   M-x display-prefix  @print{} -

M--     M-x display-prefix  @print{} -      ; @r{(Same as @code{C-u -}.)}

C-u - 7 M-x display-prefix  @print{} -7

M-- 7   M-x display-prefix  @print{} -7     ; @r{(Same as @code{C-u -7}.)}
@end example

  Emacs uses two variables to store the prefix argument:
@code{prefix-arg} and @code{current-prefix-arg}.  Commands such as
@code{universal-argument} that set up prefix arguments for other
commands store them in @code{prefix-arg}.  In contrast,
@code{current-prefix-arg} conveys the prefix argument to the current
command, so setting it has no effect on the prefix arguments for future
commands.

  Normally, commands specify which representation to use for the prefix
argument, either numeric or raw, in the @code{interactive} specification.
(@xref{Using Interactive}.)  Alternatively, functions may look at the
value of the prefix argument directly in the variable
@code{current-prefix-arg}, but this is less clean.

@defun prefix-numeric-value arg
This function returns the numeric meaning of a valid raw prefix argument
value, @var{arg}.  The argument may be a symbol, a number, or a list.
If it is @code{nil}, the value 1 is returned; if it is @code{-}, the
value @minus{}1 is returned; if it is a number, that number is returned;
if it is a list, the @sc{car} of that list (which should be a number) is
returned.
@end defun

@defvar current-prefix-arg
This variable holds the raw prefix argument for the @emph{current}
command.  Commands may examine it directly, but the usual method for
accessing it is with @code{(interactive "P")}.
@end defvar

@defvar prefix-arg
The value of this variable is the raw prefix argument for the
@emph{next} editing command.  Commands such as @code{universal-argument}
that specify prefix arguments for the following command work by setting
this variable.
@end defvar

@defvar last-prefix-arg
The raw prefix argument value used by the previous command.
@end defvar

  The following commands exist to set up prefix arguments for the
following command.  Do not call them for any other reason.

@deffn Command universal-argument
This command reads input and specifies a prefix argument for the
following command.  Don't call this command yourself unless you know
what you are doing.
@end deffn

@deffn Command digit-argument arg
This command adds to the prefix argument for the following command.  The
argument @var{arg} is the raw prefix argument as it was before this
command; it is used to compute the updated prefix argument.  Don't call
this command yourself unless you know what you are doing.
@end deffn

@deffn Command negative-argument arg
This command adds to the numeric argument for the next command.  The
argument @var{arg} is the raw prefix argument as it was before this
command; its value is negated to form the new prefix argument.  Don't
call this command yourself unless you know what you are doing.
@end deffn

@node Recursive Editing
@section Recursive Editing
@cindex recursive command loop
@cindex recursive editing level
@cindex command loop, recursive

  The Emacs command loop is entered automatically when Emacs starts up.
This top-level invocation of the command loop never exits; it keeps
running as long as Emacs does.  Lisp programs can also invoke the
command loop.  Since this makes more than one activation of the command
loop, we call it @dfn{recursive editing}.  A recursive editing level has
the effect of suspending whatever command invoked it and permitting the
user to do arbitrary editing before resuming that command.

  The commands available during recursive editing are the same ones
available in the top-level editing loop and defined in the keymaps.
Only a few special commands exit the recursive editing level; the others
return to the recursive editing level when they finish.  (The special
commands for exiting are always available, but they do nothing when
recursive editing is not in progress.)

  All command loops, including recursive ones, set up all-purpose error
handlers so that an error in a command run from the command loop will
not exit the loop.

@cindex minibuffer input
  Minibuffer input is a special kind of recursive editing.  It has a few
special wrinkles, such as enabling display of the minibuffer and the
minibuffer window, but fewer than you might suppose.  Certain keys
behave differently in the minibuffer, but that is only because of the
minibuffer's local map; if you switch windows, you get the usual Emacs
commands.

@cindex @code{throw} example
@kindex exit
@cindex exit recursive editing
@cindex aborting
  To invoke a recursive editing level, call the function
@code{recursive-edit}.  This function contains the command loop; it also
contains a call to @code{catch} with tag @code{exit}, which makes it
possible to exit the recursive editing level by throwing to @code{exit}
(@pxref{Catch and Throw}).  If you throw a value other than @code{t},
then @code{recursive-edit} returns normally to the function that called
it.  The command @kbd{C-M-c} (@code{exit-recursive-edit}) does this.
Throwing a @code{t} value causes @code{recursive-edit} to quit, so that
control returns to the command loop one level up.  This is called
@dfn{aborting}, and is done by @kbd{C-]} (@code{abort-recursive-edit}).

  Most applications should not use recursive editing, except as part of
using the minibuffer.  Usually it is more convenient for the user if you
change the major mode of the current buffer temporarily to a special
major mode, which should have a command to go back to the previous mode.
(The @kbd{e} command in Rmail uses this technique.)  Or, if you wish to
give the user different text to edit recursively, create and select
a new buffer in a special mode.  In this mode, define a command to
complete the processing and go back to the previous buffer.  (The
@kbd{m} command in Rmail does this.)

  Recursive edits are useful in debugging.  You can insert a call to
@code{debug} into a function definition as a sort of breakpoint, so that
you can look around when the function gets there.  @code{debug} invokes
a recursive edit but also provides the other features of the debugger.

  Recursive editing levels are also used when you type @kbd{C-r} in
@code{query-replace} or use @kbd{C-x q} (@code{kbd-macro-query}).

@deffn Command recursive-edit
@cindex suspend evaluation
This function invokes the editor command loop.  It is called
automatically by the initialization of Emacs, to let the user begin
editing.  When called from a Lisp program, it enters a recursive editing
level.

If the current buffer is not the same as the selected window's buffer,
@code{recursive-edit} saves and restores the current buffer.  Otherwise,
if you switch buffers, the buffer you switched to is current after
@code{recursive-edit} returns.

In the following example, the function @code{simple-rec} first
advances point one word, then enters a recursive edit, printing out a
message in the echo area.  The user can then do any editing desired, and
then type @kbd{C-M-c} to exit and continue executing @code{simple-rec}.

@example
(defun simple-rec ()
  (forward-word 1)
  (message "Recursive edit in progress")
  (recursive-edit)
  (forward-word 1))
     @result{} simple-rec
(simple-rec)
     @result{} nil
@end example
@end deffn

@deffn Command exit-recursive-edit
This function exits from the innermost recursive edit (including
minibuffer input).  Its definition is effectively @code{(throw 'exit
nil)}.
@end deffn

@deffn Command abort-recursive-edit
This function aborts the command that requested the innermost recursive
edit (including minibuffer input), by signaling @code{quit}
after exiting the recursive edit.  Its definition is effectively
@code{(throw 'exit t)}.  @xref{Quitting}.
@end deffn

@deffn Command top-level
This function exits all recursive editing levels; it does not return a
value, as it jumps completely out of any computation directly back to
the main command loop.
@end deffn

@defun recursion-depth
This function returns the current depth of recursive edits.  When no
recursive edit is active, it returns 0.
@end defun

@node Disabling Commands
@section Disabling Commands
@cindex disabled command

  @dfn{Disabling a command} marks the command as requiring user
confirmation before it can be executed.  Disabling is used for commands
which might be confusing to beginning users, to prevent them from using
the commands by accident.

@kindex disabled
  The low-level mechanism for disabling a command is to put a
non-@code{nil} @code{disabled} property on the Lisp symbol for the
command.  These properties are normally set up by the user's
init file (@pxref{Init File}) with Lisp expressions such as this:

@example
(put 'upcase-region 'disabled t)
@end example

@noindent
For a few commands, these properties are present by default (you can
remove them in your init file if you wish).

  If the value of the @code{disabled} property is a string, the message
saying the command is disabled includes that string.  For example:

@example
(put 'delete-region 'disabled
     "Text deleted this way cannot be yanked back!\n")
@end example

  @xref{Disabling,,, emacs, The GNU Emacs Manual}, for the details on
what happens when a disabled command is invoked interactively.
Disabling a command has no effect on calling it as a function from Lisp
programs.

@deffn Command enable-command command
Allow @var{command} (a symbol) to be executed without special
confirmation from now on, and alter the user's init file (@pxref{Init
File}) so that this will apply to future sessions.
@end deffn

@deffn Command disable-command command
Require special confirmation to execute @var{command} from now on, and
alter the user's init file so that this will apply to future sessions.
@end deffn

@defvar disabled-command-function
The value of this variable should be a function.  When the user
invokes a disabled command interactively, this function is called
instead of the disabled command.  It can use @code{this-command-keys}
to determine what the user typed to run the command, and thus find the
command itself.

The value may also be @code{nil}.  Then all commands work normally,
even disabled ones.

By default, the value is a function that asks the user whether to
proceed.
@end defvar

@node Command History
@section Command History
@cindex command history
@cindex complex command
@cindex history of commands

  The command loop keeps a history of the complex commands that have
been executed, to make it convenient to repeat these commands.  A
@dfn{complex command} is one for which the interactive argument reading
uses the minibuffer.  This includes any @kbd{M-x} command, any
@kbd{M-:} command, and any command whose @code{interactive}
specification reads an argument from the minibuffer.  Explicit use of
the minibuffer during the execution of the command itself does not cause
the command to be considered complex.

@defvar command-history
This variable's value is a list of recent complex commands, each
represented as a form to evaluate.  It continues to accumulate all
complex commands for the duration of the editing session, but when it
reaches the maximum size (@pxref{Minibuffer History}), the oldest
elements are deleted as new ones are added.

@example
@group
command-history
@result{} ((switch-to-buffer "chistory.texi")
    (describe-key "^X^[")
    (visit-tags-table "~/emacs/src/")
    (find-tag "repeat-complex-command"))
@end group
@end example
@end defvar

  This history list is actually a special case of minibuffer history
(@pxref{Minibuffer History}), with one special twist: the elements are
expressions rather than strings.

  There are a number of commands devoted to the editing and recall of
previous commands.  The commands @code{repeat-complex-command}, and
@code{list-command-history} are described in the user manual
(@pxref{Repetition,,, emacs, The GNU Emacs Manual}).  Within the
minibuffer, the usual minibuffer history commands are available.

@node Keyboard Macros
@section Keyboard Macros
@cindex keyboard macros

  A @dfn{keyboard macro} is a canned sequence of input events that can
be considered a command and made the definition of a key.  The Lisp
representation of a keyboard macro is a string or vector containing the
events.  Don't confuse keyboard macros with Lisp macros
(@pxref{Macros}).

@defun execute-kbd-macro kbdmacro &optional count loopfunc
This function executes @var{kbdmacro} as a sequence of events.  If
@var{kbdmacro} is a string or vector, then the events in it are executed
exactly as if they had been input by the user.  The sequence is
@emph{not} expected to be a single key sequence; normally a keyboard
macro definition consists of several key sequences concatenated.

If @var{kbdmacro} is a symbol, then its function definition is used in
place of @var{kbdmacro}.  If that is another symbol, this process repeats.
Eventually the result should be a string or vector.  If the result is
not a symbol, string, or vector, an error is signaled.

The argument @var{count} is a repeat count; @var{kbdmacro} is executed that
many times.  If @var{count} is omitted or @code{nil}, @var{kbdmacro} is
executed once.  If it is 0, @var{kbdmacro} is executed over and over until it
encounters an error or a failing search.

If @var{loopfunc} is non-@code{nil}, it is a function that is called,
without arguments, prior to each iteration of the macro.  If
@var{loopfunc} returns @code{nil}, then this stops execution of the macro.

@xref{Reading One Event}, for an example of using @code{execute-kbd-macro}.
@end defun

@defvar executing-kbd-macro
This variable contains the string or vector that defines the keyboard
macro that is currently executing.  It is @code{nil} if no macro is
currently executing.  A command can test this variable so as to behave
differently when run from an executing macro.  Do not set this variable
yourself.
@end defvar

@defvar defining-kbd-macro
This variable is non-@code{nil} if and only if a keyboard macro is
being defined.  A command can test this variable so as to behave
differently while a macro is being defined.  The value is
@code{append} while appending to the definition of an existing macro.
The commands @code{start-kbd-macro}, @code{kmacro-start-macro} and
@code{end-kbd-macro} set this variable---do not set it yourself.

The variable is always local to the current terminal and cannot be
buffer-local.  @xref{Multiple Terminals}.
@end defvar

@defvar last-kbd-macro
This variable is the definition of the most recently defined keyboard
macro.  Its value is a string or vector, or @code{nil}.

The variable is always local to the current terminal and cannot be
buffer-local.  @xref{Multiple Terminals}.
@end defvar

@defvar kbd-macro-termination-hook
This normal hook is run when a keyboard macro terminates, regardless
of what caused it to terminate (reaching the macro end or an error
which ended the macro prematurely).
@end defvar
