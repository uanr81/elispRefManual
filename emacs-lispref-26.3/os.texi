@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1995, 1998-1999, 2001-2019 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node System Interface
@chapter Operating System Interface

  Эта глава посвящена запуску и выходу из Emacs, доступу к значениям в среде
операционной системы и терминальному вводу и выводу.

  @xref{Building Emacs}, для получения дополнительной информации.  @xref{Display},
для получения дополнительной информации о состоянии операционной системы, относящейся
к терминалу и экрану.

@menu
* Starting Up::         Настройка обработки запуска Emacs.
* Getting Out::         Как работает выход (постоянный или временный).
* System Environment::  Различают название и вид системы.
* User Identification:: Нахождение имени и идентификатора пользователя.
* Time of Day::         Получение текущего времени.
* Time Zone Rules::     Правила для часовых поясов и летнего времени.
* Time Conversion::     Преобразование времени из числовой формы в
                            календарные данные и наоборот.
* Time Parsing::        Преобразование времени из числовой формы
                            в текст и наоборот.
* Processor Run Time::  Получение времени выполнения, используемого Emacs.
* Time Calculations::   Сложение, вычитание, сравнение времени и так далее.
* Timers::              Установка таймера для вызова функции в определенное время.
* Idle Timers::         Установка таймера для вызова функции, когда Emacs
                            бездействует в течение определенного времени.
* Terminal Input::      Доступ к входу терминала и запись.
* Terminal Output::     Выходной терминал управления и записи.
* Sound Output::        Воспроизведение звуков через динамик компьютера.
* X11 Keysyms::         Работа с ключевыми символами для X Windows.
* Batch Mode::          Запуск Emacs без взаимодействия с терминалом.
* Session Management::  Сохранение и восстановление состояния с помощью
                            X Session Management.
* Desktop Notifications:: Уведомления на рабочем столе.
* File Notifications::  Уведомления о файлах.
* Dynamic Libraries::   Загрузка вспомогательных библиотек по запросу.
* Security Considerations:: Запуск Emacs в недружественной среде.
@end menu

@node Starting Up
@section Запуск Emacs

  В этом разделе описывается, что делает Emacs при запуске и как можно настроить эти
действия.

@menu
* Startup Summary::         Последовательность действий, которые Emacs выполняет
                                при запуске.
* Init File::               Подробности чтения файла инициализации.
* Terminal-Specific::       Как читается файл Lisp, специфичный для терминала.
* Command-Line Arguments::  Как обрабатываются аргументы командной строки и
                                как их настраивать.
@end menu

@node Startup Summary
@subsection Summary: Последовательность Действий при Запуске
@cindex initialization of Emacs
@cindex startup of Emacs
@cindex @file{startup.el}

  Когда Emacs запущен, выполняются следующие операции (смотреть
@code{normal-top-level} в @file{startup.el}):

@enumerate
@item
Добавляются подкаталоги в @code{load-path}, запустив файл с именем @file{subdirs.el}
в каждом каталоге в списке.  Обычно этот файл добавляет подкаталоги каталога в список,
которые, в свою очередь, проверяются.  Файлы @file{subdirs.el} обычно генерируются
автоматически при установке Emacs.

@item
Загружается любой @file{leim-list.el}, который находится в каталогах @code{load-path}.
Этот файл предназначен для регистрации методов ввода.  Поиск осуществляется только для
любых личных файлов @file{leim-list.el}, которые можно создать; пропускаются каталоги,
содержащие стандартные библиотеки Emacs (они должны содержать только один файл
@file{leim-list.el}, который скомпилирован в исполняемый файл Emacs).

@vindex before-init-time
@item
Устанавливается переменная @code{before-init-time} в значение @code{current-time}
(@pxref{Time of Day}).  Также устанавливается @code{after-init-time} в @code{nil}, что
сигнализирует программам на Lisp, что Emacs инициализируется.

@c set-locale-environment
@item
Устанавливается языковая среда и систему кодирования терминала, если этого требуют
переменные среды, такие как @env{LANG}.

@item
Выполняет базовый анализ аргументов командной строки.

@vindex initial-window-system@r{, and startup}
@findex window-system-initialization
@item
Если не работает в пакетном режиме, инициализируется оконная система, которую
переменная @code{initial-window-system} указывает
(@pxref{Window Systems, initial-window-system}).  Функция инициализации
@code{window-system-initialization} - это @dfn{общая функция}
(@pxref{Generic Functions}), реальная реализация которой отличается для каждой
поддерживаемой оконной системы.  Если значение @code{initial-window-system} -
@var{windowsystem}, то соответствующая реализация функции инициализации определяется
в файле @file{term/@var{windowsystem}-win.el}.  Этот файл должен был быть
скомпилирован в исполняемый файл Emacs при его сборке.

@item
Запускается нормальный перехватчик @code{before-init-hook}.

@item
При необходимости создается графический фрейм.  Как часть создания графического
фрейма, инициализируется оконная система, указанная @code{initial-frame-alist} и
@code{default-frame-alist} (@pxref{Initial Parameters}) для графического фрейма,
путем вызова функции @code{window-system-initialization} для этой оконной системы.
Это не выполняется в пакетном (не интерактивном) режиме или режиме демона.

@item
Инициализирует начальные виды отображения фрейма и при необходимости настраивает
строку меню и панель инструментов.  Если графические фреймы поддерживаются,
устанавливается панель инструментов, даже если текущий фрейм не является графическим,
поскольку графический фрейм может быть создан позже.

@item
Использует @code{custom-reevaluate-setting} для повторной инициализации элементов
списка @code{custom-delayed-init-variables}.  Это любые предварительно загруженные
пользовательские параметры, значение которых по умолчанию зависит от контекста
времени выполнения, а не времени сборки.
@xref{Building Emacs, custom-initialize-delay}.

@c @item
@c Регистрирует цвета, доступные для кадров tty.

@item
Загружается библиотека @file{site-start}, если она существует.  Этого не происходит,
если были указаны параметры @samp{-Q} или @samp{--no-site-file}.
@cindex @file{site-start.el}

@item
Загружается предоставляемый файл инициализации (@pxref{Init File}).  Этого не
происходит, если были указаны параметры @samp{-q}, @samp{-Q} или @samp{--batch}.
Если была указана опция @samp{-u}, Emacs вместо этого ищет файл инициализации в
домашнем каталоге указанного пользователя.

@item
Загружается библиотека @file{default}, если она существует.  Этого не происходит,
если @code{inhibit-default-init} равен не-@code{nil} или если были указаны параметры
@samp{-q}, @samp{-Q} и @samp{--batch}.
@cindex @file{default.el}

@item
Загружаются сокращения из файла, указанного в @code{abbrev-file-name}, если этот файл
существует и может быть прочитан (@pxref{Abbrev Files, abbrev-file-name}).  Этого не
происходит, если была указана опция @samp{--batch}.

@item
Вызывается функция @code{package-initialize} для активации любого установленного
дополнительного пакета Emacs Lisp.  @xref{Packaging Basics}.  Однако Emacs не
инициализирует пакеты, когда @code{package-enable-at-startup} имеет значение
@code{nil} или когда запускается с одним из параметров @samp{-q}, @samp{-Q} или
@samp{--batch}.  Для инициализации пакетов в последнем случае нужно явно вызвать
@code{package-initialize} (например, через опцию @samp{--funcall}).

@vindex after-init-time
@item
Устанавливается переменная @code{after-init-time} в значение @code{current-time}.
Ранее для этой переменной было установлено значение @code{nil}; установка его на
текущее время сигнализирует о завершении фазы инициализации и вместе с
@code{before-init-time} обеспечивает измерение того, сколько времени это заняло.

@item
Запускает нормальный перехватчик @code{after-init-hook}.

@item
Если буфер @file{*scratch*} существует и все еще находится в основном режиме
(как и должно быть по умолчанию), устанавливается свой основной режим в соответствии с
@code{initial-major-mode}.

@item
Если запущен на текстовом терминале, загружается специфичная для терминала библиотека
Lisp (@pxref{Terminal-Specific}) и запускается перехватчик @code{tty-setup-hook}.
Это не выполняется ни в режиме @code{--batch}, ни в том случае, если
@code{term-file-prefix} равно @code{nil}.

@c Теперь командная строка вызывает command-line-1.

@item
Отображается начальное сообщение эхо-области, если не подавлено с помощью
@code{inhibit-startup-echo-area-message}.

@item
Обрабатываются любые параметры командной строки, которые не обрабатывались ранее.

@c Следующий снова в командной строке, но оставшиеся биты
@c command-line-1 не выполняются, если они не интерактивны.
@item
Теперь закрывается, если была указана опция @code{--batch}.

@item
Если буфер @file{*scratch*} существует и пуст, вставляется
@code{(substitute-command-keys initial-scratch-message)} в этот буфер.

@item
Если @code{initial-buffer-choice} - строка, происходит обращение к файлу
(или каталогу) с этим именем.  Если это функция, вызывается функция без аргументов и
выбирается возвращаемый буфер.  Если один файл указан в качестве аргумента командной
строки, этот файл будет посещен и его буфер отображается рядом с
@code{initial-buffer-choice}.  Если указано более одного файла, все файлы будут
посещены, и буфер @file{*Buffer List*} отображается рядом с
@code{initial-buffer-choice}.

@ignore
@c Я не думаю, что об этом следует говорить.  AFAICS, это просто перехватчик 
@c вокруг inhibit-startup-screen, которую нельзя настроить для всего сайта. 
@c Если это @code{t}, выбирается буфер @file{*scratch*}.
@end ignore

@c Чтобы сделать вещи красивыми и запутанными, следующие три элемента можно вызывать
@c из двух мест.  При отображении экрана запуска они вызываются
@c в command-line-1 перед отображением экрана запуска.  Затем устанавливается
@c inhibit-startup-hooks, а для window-setup-hook устанавливается значение nil.
@c Если не отображается заставка, вызываются в
@c normal-top-level.
@c FIXME?  Кажется, их можно вызвать до или после этапа восстановления
@c демона/сеанса

@item
Запускается @code{emacs-startup-hook}.

@item
Вызывается @code{frame-notice-user-settings}, который изменяет параметры выбранного
фрейма в соответствии с тем, что указано в файлах инициализации.

@item
Запускается @code{window-setup-hook}.  Единственная разница между этим перехватчиком
и @code{emacs-startup-hook} заключается в том, что запуск происходит после ранее
упомянутых изменений параметров фрейма.

@item
@cindex startup screen
Отображается @dfn{стартовый экран}, специальный буфер, содержащий информацию об
авторском праве и базовом использовании Emacs.  Не выполняется, если
@code{inhibit-startup-screen} или @code{initial-buffer-choice} равно не-@code{nil}
или если были указаны параметры командной строки @samp{--no-splash} или @samp{-Q}.

@c Окончание описания command-line-1.

@c Вернуться к командной строке из command-line-1.

@c Это момент, когда фактически происходит выход из пакетного режима, но последние
@c несколько бит command-line-1 не выполняются в пакетном режиме.

@item
Если был запрошен демон, вызывается @code{server-start}.  (В системах POSIX, если был
запрошен фоновый демон, он затем отсоединяется от управляющего терминала.)
@xref{Emacs Server,,, emacs, The GNU Emacs Manual}.

@item
Если запускается менеджером X-сеанса, вызывается @code{emacs-session-restore} и
передаётся в качестве аргумента идентификатор предыдущего сеанса.
@xref{Session Management}.

@c Конец command-line.

@c Вернуться к normal-top-level из command-line.

@end enumerate

@noindent
Следующие параметры влияют на некоторые аспекты последовательности запуска.

@defopt inhibit-startup-screen
Переменная, если не-@code{nil}, запрещает запуск отображения.  В этом случае Emacs
обычно отображает буфер @file{*scratch*}; смотреть @code{initial-buffer-choice},
ниже.

Не устанавливать эту переменную в файле инициализации нового пользователя или таким
образом, который затрагивает более чем одного пользователя, так как это помешает
новым пользователям получать информацию об авторском прове и базовом использовании
Emacs.

@vindex inhibit-startup-message
@vindex inhibit-splash-screen
@code{inhibit-startup-message} и @code{inhibit-splash-screen} - псевдонимы для этой
переменной.
@end defopt

@defopt initial-buffer-choice
Если не-@code{nil}, переменная представляет собой строку, определяющую файл или
каталог, который Emacs будет отображать после запуска, а не экран запуска.  Если 
значением является функция, Emacs вызывает функцию, которая должна возвращать
буфер, который затем отображается.  Если значение - @code{t}, Emacs отображает
буфер @file{*scratch*}.
@end defopt

@defopt inhibit-startup-echo-area-message
Переменная управляет отображением сообщения начальной эхо-области.  Можно подавить
сообщение запуска эхо-области, добавив текст с этой формой в свой файл инициализации:

@example
(setq inhibit-startup-echo-area-message
      "@var{your-login-name}")
@end example

Emacs явно проверяет выражение, как показано выше, в файле инициализации; имя
пользователя должно появиться в выражении как строковая константа Lisp.  Также можно
использовать интерфейс настройки.  Другие методы установки того же значения
@code{inhibit-startup-echo-area-message} не запрещают запуск сообщения.  Таким
образом, можно легко заблокировать сообщение, если требуется, но бездумное копирование
файла инициализации не заблокирует сообщение для кого-то еще.
@end defopt

@defopt initial-scratch-message
Переменная, если не-@code{nil}, должна быть строкой, которая рассматривается как
документация, которая должна быть вставлена в буфер @file{*scratch*} при запуске
Emacs.  Если @code{nil}, буфер @file{*scratch*} пуст.
@end defopt

@noindent
Следующие параметры командной строки влияют на некоторые аспекты последовательности
запуска.  @xref{Initial Options,,, emacs, The GNU Emacs Manual}.

@table @code
@item --no-splash
Не отображать заставку.

@item --batch
Запускать без интерактивного терминала.  @xref{Batch Mode}.

@item --daemon
@itemx --bg-daemon
@itemx --fg-daemon
Не инициализировать никакое отображение; просто запустить сервер.  (Демон
``background'' автоматически запускается в фоновом режиме.)

@item --no-init-file
@itemx -q
Не загружать ни файл инициализации, ни библиотеку @file{default}.

@item --no-site-file
Не загружать библиотеку @file{site-start}.

@item --quick
@itemx -Q
Эквивалент @samp{-q --no-site-file --no-splash}.
@c и --no-site-lisp, но не будем упоминать об этом здесь.
@end table


@node Init File
@subsection Файл Инициализации
@cindex init file
@cindex @file{.emacs}
@cindex @file{init.el}

  Когда запускается Emacs, обычно проводится попытка загрузить
@dfn{файл инициализации}.  Это либо файл с именем @file{.emacs} или @file{.emacs.el}
в домашнем каталоге, либо файл с именем @file{init.el} в подкаталоге с именем
@file{.emacs.d} в домашнем каталоге.
@ignore
Какое бы место ни использовалось, также можно скомпилировать файл
(@pxref{Byte Compilation}); тогда фактически загруженный файл будет
@file{.emacs.elc} или @file{init.elc}.
@end ignore

  Опции командной строки @samp{-q}, @samp{-Q} и @samp{-u} определяют, нужно ли и где
искать файл инициализации; @samp{-q} (и более сильный @samp{-Q}) говорит не загружать
файл инициализации, в то время как @samp{-u @var{user}} говорит загружать файл
инициализации @var{user} вместо текущего пользователя.
@xref{Entering Emacs,,, emacs, The GNU Emacs Manual}.  Если ни одна из опций не
указана, Emacs использует переменную окружения @env{LOGNAME} или переменную @env{USER}
(большинство систем) или @env{USERNAME} (системы MS), чтобы найти домашний каталог и,
следовательно, файл инициализации; таким образом, даже если выполнить sudo, Emacs все
равно загрузит собственный файл инициализации.  Однако, если эти переменные среды
отсутствуют, Emacs использует идентификатор пользователя, чтобы найти домашний
каталог.

@cindex default init file
  В инсталляции Emacs может быть @dfn{файл инициализации по умолчанию}, библиотека
Lisp с именем @file{default.el}.  Emacs находит этот файл по стандартному пути поиска
библиотек (@pxref{How Programs Do Loading}).  Дистрибутив Emacs не поставляется с
этим файлом; предназначается для локальной настройки.  Если файл инициализации по
умолчанию существует, загружается при каждом запуске Emacs.  Но собственный личный
файл инициализации, если есть, загружается первым; если устанавливается
@code{inhibit-default-init} в значение не-@code{nil}, то Emacs впоследствии не
загружает файл @file{default.el}.  В пакетном режиме или если указать @samp{-q}
(или @samp{-Q}), Emacs не загружает ни личный файл инициализации, ни файл
инициализации по умолчанию.

  Еще один файл для настройки сайта - @file{site-start.el}.  Emacs загружает
@emph{до} файла инициализации пользователя.  Можно запретить загрузку этого файла с
помощью опции @samp{--no-site-file}.

@defopt site-run-file
Переменная указывает файл настройки сайта, загружаемый перед файлом инициализации
пользователя.  Нормальное значение - @code{"site-start"}.  Единственный способ
изменить его с реальным эффектом - это сделать это до сброса Emacs.
@c Так зачем даже упоминать об этом здесь.  Я думаю, это почти никогда не менялось.
@end defopt

  @xref{Init Examples,, Init File Examples, emacs, The GNU Emacs Manual}, где
приведены примеры того, как сделать различные часто желаемые настройки в
файле @file{.emacs}.

@defopt inhibit-default-init
Если переменная - не-@code{nil}, не позволяется Emacs загружать файл библиотеки
инициализации по умолчанию.  Значение по умолчанию - @code{nil}.
@end defopt

@defvar before-init-hook
Обычный обработчик запускается один раз перед загрузкой всех файлов инициализации
(@file{site-start.el}, файл инициализации и @file{default.el}).  (Единственный способ
изменить это с реальным эффектом - это перед сбросом Emacs.)
@end defvar

@defvar after-init-hook
Обычный обработчик запускается один раз, сразу после загрузки всех файлов
инициализации (@file{site-start.el}, файл инициализации и @file{default.el}), перед
загрузкой библиотеки, специфичной для терминала (если она запущена на текстовом
терминале) и обработкой аргументов действия командной строки.
@end defvar

@defvar emacs-startup-hook
Обычный обработчик запускается один раз сразу после обработки аргументов командной
строки.  В пакетном режиме Emacs не запускает этот перехватчик.
@end defvar

@defvar window-setup-hook
Обычный перехватчик очень похож на @code{emacs-startup-hook}.  Единственное отличие
в том, что запускается чуть позже, после установки параметров фрейма.
@xref{Startup Summary, window-setup-hook}.
@end defvar

@defvar user-init-file
Переменная содержит абсолютное имя файла инициализации пользователя.  Если фактически
загруженный файл инициализации является скомпилированным файлом, например
@file{.emacs.elc}, значение относится к соответствующему исходному файлу.
@end defvar

@defvar user-emacs-directory
Переменная содержит имя каталога @file{.emacs.d}.  Это @file{~/.emacs.d} на всех
платформах, кроме MS-DOS.
@end defvar

@node Terminal-Specific
@subsection Инициализация для Конкретного Терминала
@cindex terminal-specific initialization

  Каждый тип терминала может иметь свою собственную библиотеку Lisp, которую Emacs
загружает при запуске на терминале этого типа.  Имя библиотеки создается путем
объединения значения переменной @code{term-file-prefix} и типа терминала (указанного
переменной окружения @env{TERM}).  Обычно @code{term-file-prefix} имеет значение
@code{"term/"}; менять это не рекомендуется.  Если в списке ассоциаций
@code{term-file-aliases} есть запись, соответствующая @env{TERM}, Emacs использует
ассоциированное значение вместо @env{TERM}.  Emacs находит файл обычным способом,
просматривая каталоги @code{load-path} и пробуя суффиксы @samp{.elc} и @samp{.el}.

@cindex Termcap
  Обычная роль библиотеки, специфичной для терминала, состоит в том, чтобы разрешить
специальным клавишам отправлять последовательности, которые Emacs может распознать.
Также может потребоваться установить или добавить @code{input-decode-map}, если
запись Termcap или Terminfo не определяет все функциональные клавиши терминала.
@xref{Terminal Input}.

  Когда имя типа терминала содержит дефис или подчеркивание и не найдена библиотека,
имя которой совпадает с именем терминала, Emacs удаляет из имени терминала последний
дефис или подчеркивание и все, что следует за ним, и пытается снова.  Этот процесс
повторяется до тех пор, пока Emacs не найдет подходящую библиотеку или пока в имени
не останется дефисов или подчеркиваний (то есть нет библиотеки, специфичной для
терминала).  Например, если имя терминала - @samp{xterm-256color} и нет библиотеки
@file{term/xterm-256color.el}, Emacs пытается загрузить @file{term/xterm.el}.  При
необходимости библиотека терминала может оценить @code{(getenv "TERM")}, чтобы найти
полное имя типа терминала.

  Файл инициализации может предотвратить загрузку библиотеки, специфичную для
терминала, установив для переменной @code{term-file-prefix} значение @code{nil}.

  Также можно изменить некоторые действия библиотеки, специфичные для терминала, с
помощью @code{tty-setup-hook}.  Это обычный перехватчик, который Emacs запускает после
инициализации нового текстового терминала.  Можно использовать этот обработчик для
определения инициализации для терминалов, у которых нет собственных библиотек.
@xref{Hooks}.

@defopt term-file-prefix
@cindex @env{TERM} environment variable
Если значение этой переменной - не-@code{nil}, Emacs загружает специфичный для
терминала файл инициализации следующим образом:

@example
(load (concat term-file-prefix (getenv "TERM")))
@end example

@noindent
Можно установить для переменной @code{term-file-prefix} значение @code{nil} в вашем
файле инициализации, если не требуется загружать файл инициализации терминала.

В MS-DOS Emacs устанавливает для переменной среды @env{TERM} значение @samp{internal}.
@end defopt

@defopt term-file-aliases
Переменная представляет собой список ассоциаций, отображающий типы терминалов на их
псевдонимы.  Например, элемент формы @code{("vt102" . "vt100")} означает рассматривать
терминал типа @samp{vt102} как терминал типа @samp{vt100}.
@end defopt

@defvar tty-setup-hook
Переменная - обычный перехватчик, который Emacs запускает после инициализации нового
текстового терминала.  (Это применимо, когда Emacs запускается в безоконном режиме и
при создании соединения tty @command{emacsclient}.)  Перехватчик запускается после
загрузки файла инициализации (если применимо) и файла Lisp, специфичного для
терминала, поэтому можно использовать его для настройки определения, сделанные
этим файлом.

Для связанной функции, @pxref{Init File, window-setup-hook}.
@end defvar

@node Command-Line Arguments
@subsection Аргументы Командной Строки
@cindex command-line arguments

  Можно использовать аргументы командной строки для запроса различных действий при
запуске Emacs.  Обратить внимание, что рекомендуемый способ использования Emacs -
запустить его только один раз после входа в систему, а затем выполнить все
редактирование в том же сеансе Emacs
(@pxref{Entering Emacs,,, emacs, The GNU Emacs Manual}).  По этой причине можно не
очень часто использовать аргументы командной строки; тем не менее, они могут быть
полезны при вызове Emacs из сценариев сеанса или отладке Emacs.  В этом разделе
описывается, как Emacs обрабатывает аргументы командной строки.

@defun command-line
Функция анализирует командную строку, с которой был вызван Emacs, обрабатывает ее и
(среди прочего) загружает файл инициализации пользователя и отображает сообщения
запуска.
@end defun

@defvar command-line-processed
После обработки командной строки значение этой переменной - @code{t}.

Если перенаправляется Emacs, вызовом @code{dump-emacs} (@pxref{Building Emacs}),
можно сначала установить для этой переменной значение @code{nil}, чтобы заставить
новый выгруженный Emacs обработать свои новые аргументы командной строки.
@end defvar

@defvar command-switch-alist
@cindex switches on command line
@cindex options on command line
@cindex command-line options
Переменная представляет собой список определяемых пользователем параметров командной
строки и связанных функций-обработчиков.  По умолчанию пуст, но можно добавлять
элементы, если требуется.

@dfn{параметр командной строки} - это аргумент командной строки, имеющий вид:

@example
-@var{option}
@end example

Элементы @code{command-switch-alist} выглядят так:

@example
(@var{option} . @var{handler-function})
@end example

@sc{car}, @var{option} - это строка, имя параметра командной строки (не включая
начальный дефис).  @var{handler-function} вызывается для обработки @var{option} и
получает имя параметра в качестве единственного аргумента.

В некоторых случаях за параметром в командной строке следует аргумент.  В этих случаях
@var{handler-function} может найти все оставшиеся аргументы командной строки в
переменной @code{command-line-args-left} (смотреть ниже).  (Полный список аргументов
командной строки находится в @code{command-line-args}.)

Аргументы командной строки анализируются функцией @code{command-line-1} в файле
@file{startup.el}. Смотреть также
@ref{Emacs Invocation, , Command Line Arguments for Emacs Invocation, emacs, The
GNU Emacs Manual}.
@end defvar

@defvar command-line-args
Значение этой переменной - это список аргументов командной строки, переданных в Emacs.
@end defvar

@defvar command-line-args-left
@vindex argv
Значение этой переменной - это список аргументов командной строки, которые еще не
были обработаны.
@c Не упоминать об этом, так как это плохой
@c @code{argv} - псевдоним для этого.
@end defvar

@defvar command-line-functions
Значение этой переменной представляет собой список функций для обработки
нераспознанного аргумента командной строки.  Каждый раз, когда следующий
обрабатываемый аргумент не имеет особого значения, функции в этом списке вызываются
в порядке появления, пока одна из них не вернет значение не-@code{nil}.

Функции вызываются без аргументов.  Могут получить доступ к рассматриваемому аргументу
командной строки через переменную @code{argi}, которая временно привязана в этот
момент.  Остальные аргументы (не считая текущего) находятся в переменной
@code{command-line-args-left}.

Когда функция распознает и обрабатывает аргумент в @code{argi}, должна вернуть
значение не-@code{nil}, чтобы сказать, что она обработала этот аргумент.  Если также
имелось дело с некоторыми из следующих аргументов, может указываться на это, удалением
их из @code{command-line-args-left}.

Если все эти функции возвращают @code{nil}, то аргумент рассматривается как имя
файла для посещения.
@end defvar

@node Getting Out
@section Выход из Emacs
@cindex exiting Emacs

  Есть два способа выйти из Emacs: можно убить задание Emacs, которое завершается
навсегда, или можно приостановить, что позволит повторно войти в процесс Emacs позже.
(В графической среде, конечно, можно просто переключиться на другое приложение, не
делая ничего особенного для Emacs, а затем снова переключиться на Emacs, когда
потребуется.)

@menu
* Killing Emacs::        Безвозвратный выход из Emacs.
* Suspending Emacs::     Обратимый выход из Emacs.
@end menu

@node Killing Emacs
@subsection Убиваем Emacs
@cindex killing Emacs

  Убить Emacs означает завершить выполнение процесса Emacs.  Если запущен Emacs с
терминала, родительский процесс обычно возобновляет управление.  Низкоуровневым
примитивом для уничтожения Emacs является @code{kill-emacs}.

@deffn Command kill-emacs &optional exit-data
Команда вызывает перехватчик @code{kill-emacs-hook}, затем завершает процесс Emacs и
завершает его.

Если @var{exit-data} - целое число, оно используется как статус завершения процесса
Emacs.  (Это полезно в первую очередь при пакетной работе.; смотреть
@ref{Batch Mode}.)

Если @var{exit-data} является строкой, ее содержимое помещается во входной буфер
терминала, чтобы оболочка (или любая другая программа, которая затем считывает
входные данные) могла их прочитать.
@end deffn

@cindex SIGTERM
@cindex SIGHUP
@cindex SIGINT
@cindex operating system signal
  Функция @code{kill-emacs} обычно вызывается с помощью команды верхнего уровня
@kbd{C-x C-c} (@code{save-buffers-kill-terminal}).
@xref{Exiting,,, emacs, The GNU Emacs Manual}.
Также вызывается автоматически, если Emacs получает сигнал операционной системы
@code{SIGTERM} или @code{SIGHUP} (например, когда управляющий терминал отключен) или
если он получает сигнал @code{SIGINT} во время работы в пакетном режиме
(@pxref{Batch Mode}).

@defvar kill-emacs-hook
Этот нормальный перехватчик запускается @code{kill-emacs}, прежде чем он убьет Emacs.

Поскольку @code{kill-emacs} может быть вызвано в ситуациях, когда взаимодействие с
пользователем невозможно (например, когда терминал отключен), функции на этом
перехватчике не должны пытаться взаимодействовать с пользователем.  Если требуется
взаимодействовать с пользователем, когда Emacs завершает работу, использовать
@code{kill-emacs-query-functions}, как описано ниже.
@end defvar

  Когда Emacs завершается, вся информация в процессе Emacs, за исключением файлов,
которые были сохранены, теряется.  Поскольку непреднамеренное завершение работы Emacs
может привести к потере большого объема работы, команда
@code{save-buffers-kill-terminal} запрашивает подтверждение, если есть буферы, которые
нужно сохранить или есть запущенные подпроцессы.  Также запускается ненормальная
ловушка @code{kill-emacs-query-functions}:

@defopt kill-emacs-query-functions
Когда @code{save-buffers-kill-terminal} убивает Emacs, вызывается функция в этой
ловушке, задав стандартные вопросы и перед вызовом @code{kill-emacs}.  Функции
вызываются в порядке появления без аргументов.  Каждая функция может запрашивать у
пользователя дополнительное подтверждение.  Если какая-либо из них возвращает
@code{save-buffers-kill-emacs} установленное в @code{nil}, Emacs не уничтожается и не
запускаются остальные функции в этой ловушке.  Вызов @code{kill-emacs} напрямую не
запускает этот перехватчик.
@end defopt

@node Suspending Emacs
@subsection Приостановка Emacs
@cindex suspending Emacs

  На текстовых терминалах возможно @dfn{приостановить Emacs}, что означает временную
остановку Emacs и возвращение управления его вышестоящему процессу, которым обычно
является оболочка.  Это позволяет возобновить редактирование позже в том же процессе
Emacs, с теми же буферами, тем же кругом уничтожений, той же историей отмены и так
далее.  Чтобы возобновить работу Emacs, использовать соответствующую команду в
родительской оболочке - скорее всего, @code{fg}.

@cindex controlling terminal
  Приостановка работает только конечном устройстве, с которого был запущен сеанс
Emacs.  Называется это устройство @dfn{управляющий терминал} сеанса.  Приостановка не
допускается, если управляющий терминал является графическим.  Приостановка обычно не
актуальна в графических средах, так как можно просто переключиться на другое
приложение, не делая ничего особенного с Emacs.

@c FIXME?  Есть ли системы, которые еще поддерживает Emacs, без
@c SIGTSTP?
@cindex SIGTSTP
  Некоторые операционные системы (без @code{SIGTSTP} или MS-DOS) не поддерживают
приостановку заданий; в этих системах приостановка фактически временно создает новую
оболочку как подпроцесс Emacs.  Затем потребуется выйти из оболочки, чтобы вернуться
в Emacs.

@deffn Command suspend-emacs &optional string
Функция останавливает Emacs и возвращает управление вышестоящему процессу.  Если и
когда вышестоящий процесс возобновляет Emacs, @code{suspend-emacs} возвращает
@code{nil} вызывающей стороне в Lisp.

Функция работает только на управляющем терминале сеанса Emacs; чтобы отказаться от
управления другими устройствами tty, использовать @code{suspend-tty} (смотреть ниже).
Если сеанс Emacs использует более одного терминала, потребуется удалить фреймы на всех
других терминалах перед приостановкой Emacs, иначе эта функция сигнализирует об
ошибке.  @xref{Multiple Terminals}.

Если @var{string} равно не-@code{nil}, его символы отправляются в вышестоящую оболочку
Emacs для чтения как ввод терминала.
@c FIXME?  Мне кажется, что оболочка отображает STRING.
Символы в @var{string} не отображаются вышестоящей оболочкой; появляются только
результаты.

Перед приостановкой @code{suspend-emacs} запускает обычный обработчик
@code{suspend-hook}.  После того, как пользователь возобновляет работу Emacs,
@code{suspend-emacs} запускает обычный обработчик @code{suspend-resume-hook}.
@xref{Hooks}.

Следующее повторное отображение после возобновления приведет к перерисовке всего
экрана, если только переменная @code{no-redraw-on-reenter} не имеет значения
не-@code{nil}.  @xref{Refresh Screen}.

Вот пример того, как можно использовать эти перехватчики:

@smallexample
@group
(add-hook 'suspend-hook
          (lambda () (or (y-or-n-p "Really suspend? ")
                         (error "Suspend canceled"))))
@end group
(add-hook 'suspend-resume-hook (lambda () (message "Resumed!")
                                 (sit-for 2)))
@end smallexample
@c Функция sit-for предотвращает @code {nil}, который suspend-emacs возвращает,
@c скрывая сообщение.

Вот что видно при оценке @code{(suspend-emacs "pwd")}:

@smallexample
@group
---------- Buffer: Minibuffer ----------
Really suspend? @kbd{y}
---------- Buffer: Minibuffer ----------
@end group

@group
---------- Parent Shell ----------
bash$ /home/username
bash$ fg
@end group

@group
---------- Echo Area ----------
Resumed!
@end group
@end smallexample

@c FIXME?  AFAICS, это повторяется.
Обратить внимание, что @samp{pwd} не отображается после приостановки Emacs.
Но читается и выполняется оболочкой.
@end deffn

@defvar suspend-hook
Переменная - обычная ловушка, которую Emacs запускает перед приостановкой.
@end defvar

@defvar suspend-resume-hook
Переменная - обычная ловушка, которую Emacs запускает при возобновлении после
приостановки.
@end defvar

@defun suspend-tty &optional tty
Если @var{tty} указывает конечное устройство, используемое Emacs, функция освобождает
устройство и восстанавливает его в предыдущее состояние.  Фреймы, которые использовали
устройство, продолжают существовать, но не обновляются, и Emacs не считывает ввод с
них.  @var{tty} может быть конечным объектом, фреймом (имеется в виду терминал для
этого фрейма) или @code{nil} (что означает терминал для выбранного фрейма).
@xref{Multiple Terminals}.

Если @var{tty} уже приостановлено, эта функция ничего не делает.

@vindex suspend-tty-functions
Функция запускает ловушку @code{suspend-tty-functions}, передавая объект терминала
в качестве аргумента каждой функции.
@end defun

@defun resume-tty &optional tty
Функция возобновляет ранее приостановленное оконечное устройство @var{tty}; где
@var{tty} имеет те же возможные значения, что и @code{suspend-tty}.

@vindex resume-tty-functions
Функция повторно открывает конечное устройство, повторно инициализирует его и
перерисовывает его с выбранным фреймом этого терминала.  Затем запускается ловушка
@code{resume-tty-functions}, передаётся объект терминала в качестве аргумента каждой
функции.

Если то же устройство уже используется другим терминалом Emacs, функция сигнализирует
об ошибке.  Если @var{tty} не приостановлено, эта функция ничего не делает.
@end defun

@defun controlling-tty-p &optional tty
Функция возвращает не-@code{nil}, если @var{tty} является управляющим терминалом
сеанса Emacs; @var{tty} может быть конечным объектом, фреймом (то есть терминалом для
этого фрейма) или @code{nil} (что означает терминал для выбранного фрейма).
@end defun

@deffn Command suspend-frame
Команда @dfn{приостанавливает} фрейм.  Для GUI фреймов вызывается @code{iconify-frame}
(@pxref{Visibility of Frames}); для фреймов на текстовых терминалах вызывается либо
@code{suspend-emacs} либо @code{suspend-tty}, в зависимости от того, отображается ли
фрейм на управляющем терминальном устройстве или нет.
@end deffn

@node System Environment
@section Среда Опреционной Системы
@cindex operating system environment

  Emacs предоставляет доступ к переменным в среде операционной системы с помощью
различных функций.  Эти переменные включают имя системы, @acronym{UID} пользователя
и так далее.

@defvar system-configuration
Переменная содержит стандартное имя конфигурации GNU для аппаратной/программной
конфигурации вашей системы в виде строки.  Например, типичное значение для 64-битной
системы GNU/Linux - @samp{"x86_64-unknown-linux-gnu"}.
@end defvar

@cindex system type and name
@defvar system-type
Значение этой переменной - это символ, указывающий на тип операционной системы, в
которой работает Emacs.  Возможные значения:

@table @code
@item aix
IBM AIX.

@item berkeley-unix
Berkeley BSD и его варианты.

@item cygwin
Cygwin, слой POSIX поверх MS-Windows.

@item darwin
Дарвин (macOS).

@item gnu
Система GNU (с использованием ядра GNU, которое состоит из HURD и Mach).

@item gnu/linux
Система GNU/Linux --- то есть вариант системы GNU, использующая ядро Linux.  (Эти
системы часто называют ``Linux'', но на самом деле Linux - это просто ядро, а не вся
система.)

@item gnu/kfreebsd
Система GNU (на основе glibc) с ядром FreeBSD.

@item hpux
Операционная система Hewlett-Packard HPUX.

@item nacl
Система песочницы Google Native Client (@acronym{NaCl}).

@item ms-dos
Microsoft DOS@.  Emacs, скомпилированный с DJGPP для MS-DOS, связывает
@code{system-type} с @code{ms-dos}, даже когда запускается в MS-Windows.

@item usg-unix-v
AT&T Unix System V.

@item windows-nt
Microsoft Windows NT, 9X и новее.  Значение @code{system-type} всегда
@code{windows-nt}, например, даже в Windows 10.

@end table

Нет желания добавлять новые символы для более тонких различий, кроме случаев крайней
необходимости!  Фактически, есть надежде устранить некоторые из этих альтернатив в
будущем.  Если нужно провести более тонкое различие, чем позволяет @code{system-type},
можно протестировать @code{system-configuration}, например, с регулярным выражением.
@end defvar

@defun system-name
Функция возвращает имя компьютера, на котором происходит работа, в виде строки.
@end defun

@c FIXME кажется, этот раздел не лучшее место для этого варианта?
@defopt mail-host-address
Если переменная - не-@code{nil}, используется вместо @code{system-name} для создания
адресов электронной почты.  Например, используется при построении значения по
умолчанию @code{user-mail-address}.  @xref{User Identification}.
@end defopt

@deffn Command getenv var &optional frame
@cindex environment variable access
Функция возвращает значение переменной окружения @var{var} в виде строки.  @var{var}
должно быть строкой.  Если @var{var} в среде не определено, @code{getenv} возвращает
@code{nil}.  Возвращает @samp{""}, если @var{var} установлено, но равно нулю.  В Emacs
список переменных окружения и их значений хранится в переменной
@code{process-environment}.

@example
@group
(getenv "USER")
     @result{} "lewis"
@end group
@end example

Команда оболочки @code{printenv} печатает все или часть среды:

@example
@group
bash$ printenv
PATH=/usr/local/bin:/usr/bin:/bin
USER=lewis
@end group
@group
TERM=xterm
SHELL=/bin/bash
HOME=/home/lewis
@end group
@dots{}
@end example
@end deffn

@deffn Command setenv variable &optional value substitute
Команда устанавливает значение переменной окружения @var{variable} равное @var{value}.
@var{variable} должно быть строкой.  Внутренне Emacs Lisp может обрабатывать любую
строку.  Однако обычно @var{variable} должно быть допустимым идентификатором оболочки,
то есть последовательностью букв, цифр и символов подчеркивания, начинающейся с буквы
или символа подчеркивания.  В противном случае могут возникнуть ошибки, если
подпроцессы Emacs попытаются получить доступ к значению @var{variable}.  Если
@var{value} опущено или @code{nil} (или, в интерактивном режиме, с аргументом
префикса), @code{setenv} удаляет @var{variable} из окружения.  В противном случае
@var{value} должно быть строкой.

@c FIXME: Документировать 'replace-env-vars'?  --xfq
Если необязательный аргумент @var{substitute} - не-@code{nil}, Emacs вызывает функцию
@code{substitute-env-vars} для раскрытия любых переменных среды в @var{value}.

@code{setenv} работает путем изменения @code{process-environment}; Связывание этой
переменной с @code{let} также является разумной практикой.

@code{setenv} возвращается новое значение @var{variable} или @code{nil}, если удалено
@var{variable} из окружения.
@end deffn

@defvar process-environment
Переменная представляет собой список строк, каждая из которых описывает одну
переменную среды.  Функции @code{getenv} и @code{setenv} работают с этой переменной.

@smallexample
@group
process-environment
@result{} ("PATH=/usr/local/bin:/usr/bin:/bin"
    "USER=lewis"
@end group
@group
    "TERM=xterm"
    "SHELL=/bin/bash"
    "HOME=/home/lewis"
    @dots{})
@end group
@end smallexample

Если @code{process-environment} содержит несколько элементов, которые определяют одну
и ту же переменную среды, первый из этих элементов указывает переменную, а остальные
игнорируются.
@end defvar

@defvar initial-environment
Переменная содержит список переменных среды, унаследованных Emacs от родительского
процесса при запуске Emacs.
@end defvar

@defvar path-separator
Переменная содержит строку, которая говорит, какой символ разделяет каталоги в пути
поиска (как указано в переменной среды).  Её значение - @code{":"} для систем Unix и
GNU и @code{";"} для систем MS.
@end defvar

@defun parse-colon-path path
Функция берет строку пути поиска, такую как значение переменной среды @env{PATH}, и
разделяет ее по разделителям, возвращая список каталогов.  @code{nil} в этом списке
означает текущий каталог.  Хотя в названии функции написано ``colon'', на самом деле
она использует значение @code{path-separator}.

@example
(parse-colon-path ":/foo:/bar")
     @result{} (nil "/foo/" "/bar/")
@end example
@end defun

@defvar invocation-name
Переменная содержит имя программы, под которой был вызван Emacs.  Значение
представляет собой строку и не включает имя каталога.
@end defvar

@defvar invocation-directory
Переменная содержит каталог, в котором исполняемый файл Emacs находился при запуске,
или @code{nil}, если этот каталог не может быть определен.
@end defvar

@defvar installation-directory
Если не-@code{nil}, это каталог, в котором нужно искать подкаталоги @file{lib-src} и
@file{etc}.  В установленном Emacs это обычно @code{nil}.  Не-@code{nil}, когда Emacs
не может найти эти каталоги в их стандартных установленных местах, но может найти их
в каталоге, так или иначе связанном с тем, который содержит исполняемый файл Emacs
(то есть @code{invocation-directory}).
@end defvar

@defun load-average &optional use-float
Функция возвращает текущие средние значения загрузки системы за 1, 5 и 15 минут в виде
списка.  Средняя загрузка указывает количество процессов, пытающихся запуститься в
системе.

По умолчанию значения представляют собой целые числа, которые в 100 раз превышают
средние значения загрузки системы, но если @var{use-float} равно не-@code{nil}, они
возвращаются как числа с плавающей запятой без умножения на 100.

Если невозможно получить среднюю нагрузку, эта функция сигнализирует об ошибке.  На
некоторых платформах для доступа к средним значениям нагрузки требуется установить
Emacs как setuid или setgid, чтобы он мог читать информацию о ядре, а это обычно не
рекомендуется.
@c FIXME какие это платформы? Они все еще актуальны?

Если доступно 1-минутное среднее значение нагрузки, а 5- или 15-минутное - нет, эта
функция возвращает сокращенный список, содержащий доступные средние значения.

@example
@group
(load-average)
     @result{} (169 48 36)
@end group
@group
(load-average t)
     @result{} (1.69 0.48 0.36)
@end group
@end example

Аналогичную информацию возвращает команда оболочки @code{uptime}.
@end defun

@defun emacs-pid
Функция возвращает процесс @acronym{ID} процесса Emacs в виде целого числа.
@end defun

@defvar tty-erase-char
Переменная содержит символ стирания, который был выбран в системном драйвере
терминала до запуска Emacs.
@c FIXME?  Кажется неправдой, поскольку 23.1.2019. Для меня это 0.
@c Значение @code{nil}, если Emacs работает в оконной системе.
@end defvar

@node User Identification
@section Идентификация Пользователя
@cindex user identification

@defvar init-file-user
Переменная говорит, какие файлы инициализации пользователя должны использоваться
Emacs --- или @code{nil}, если их нет.  @code{""} обозначает пользователя, который
изначально вошел в систему.  Значение отражает параметры командной строки, такие как
@samp{-q} или @samp{-u @var{user}}.

Пакеты Lisp, которые загружают файлы настроек или любой другой тип профиля
пользователя, должны подчиняться этой переменной при принятии решения, где ее найти.
Должны загружать профиль имени пользователя, найденный в этой переменной.  Если
@code{init-file-user} равно @code{nil}, что означает, что использовалась опция
@samp{-q}, @samp{-Q} или @samp{-batch}, тогда пакеты Lisp не должны загружать никакие
файлы настройки или профиль пользователя.
@end defvar

@defopt user-mail-address
Содержит адрес электронной почты пользователя, использующего Emacs.
@end defopt

@defun user-login-name &optional uid
Функция возвращает имя, под которым пользователь вошел в систему.  Используются
переменные среды @env{LOGNAME} или @env{USER}, если они установлены.  В противном
случае значение основывается на эффективном @acronym{UID}, а не на реальном
@acronym{UID}.

Если указать @var{uid} (число), результатом будет имя пользователя, которое
соответствует @var{uid} или @code{nil}, если такого пользователя нет.
@end defun

@defun user-real-login-name
Функция возвращает имя пользователя, соответствующее реальному @acronym{UID} Emacs.
Это игнорирует эффективный @acronym{UID} и переменные окружения @env{LOGNAME} и
@env{USER}.
@end defun

@defun user-full-name &optional uid
Функция возвращает полное имя вошедшего в систему пользователя --- или значение
переменной окружения @env{NAME}, если она установлена.

Если идентификатор пользователя процесса Emacs не соответствует ни одному известному
пользователю (и при условии, что @code{NAME} не установлен), результатом будет
@code{"unknown"}.

Если @var{uid} - не-@code{nil}, то это должно быть число (идентификатор пользователя)
или строка (имя пользователя).  Затем @code{user-full-name} возвращает полное имя,
соответствующее этому идентификатору пользователя или имени входа.  Если указать
идентификатор пользователя или имя для входа, которые не определены, возвращается
@code{nil}.
@end defun

@vindex user-full-name
@vindex user-real-login-name
@vindex user-login-name
  Символы @code{user-login-name}, @code{user-real-login-name} и @code{user-full-name}
- это не только функции, но и переменные.  Функции возвращают те же значения, что и
переменные.  Эти переменные позволяют обмануть Emacs, сообщая функциям, что
возвращать.  Переменные также полезны для создания заголовков фреймов.
(@pxref{Frame Titles}).

@cindex UID
@defun user-real-uid
Функция возвращает реальный @acronym{UID} пользователя.  Значение может быть с
плавающей запятой в том (маловероятном) случае, когда UID слишком велик, чтобы
поместиться в целое число Lisp.
@end defun

@defun user-uid
Функция возвращает эффективный @acronym{UID} пользователя.  Значение может быть с
плавающей точкой.
@end defun

@cindex GID
@defun group-gid
Функция возвращает эффективный @acronym{GID} процесса Emacs.  Значение может быть
числом с плавающей точкой.
@end defun

@defun group-real-gid
Функция возвращает реальный @acronym{GID} процесса Emacs.  Значение может быть
числом с плавающей точкой.
@end defun

@defun system-users
Функция возвращает список строк, в котором перечислены имена пользователей в системе.
Если Emacs не может получить эту информацию, возвращается значение - список,
содержащий только значение @code{user-real-login-name}.
@end defun

@cindex user groups
@defun system-groups
Функция возвращает список строк, в котором перечислены имена групп пользователей в
системе.  Если Emacs не может получить эту информацию, возвращается значение
@code{nil}.
@end defun


@node Time of Day
@section Время Суток
@cindex time of day

  В этом разделе объясняется, как определить текущее время и часовой пояс.

@cindex epoch
  Большинство этих функций представляют время в виде списка из четырех целых чисел
@code{(@var{sec-high} @var{sec-low} @var{microsec} @var{picosec})}.  Представляется
количество секунд от @dfn{эпохи} (1 января 1970 г., 00:00 UTC) по формуле:
@ifnottex
@var{high} * 2**16 + @var{low} + @var{micro} * 10**@minus{}6 +
@var{pico} * 10**@minus{}12.
@end ifnottex
@tex
$high*2^{16} + low + micro*10^{-6} + pico*10^{-12}$.
@end tex
Возвращаемое значение @code{current-time} представляет время с использованием
этой формы, как и временные метки в возвращаемых значениях других функций, таких как
@code{file-attributes} (@pxref{Definition of file-attributes}).  В некоторых случаях
функции могут возвращать двух- или трехэлементные списки, при этом пропущенные
компоненты @var{microsec} и @var{picosec} по умолчанию равны нулю.

@cindex time value
  Аргументы функции, например, аргумент @var{time} для @code{current-time-string},
принимают более общий формат @dfn{временного значения}, который может быть списком
целых чисел, как указано выше, или одним числом в секундах с эпохи, или @code{nil}
для текущего времени.  Можно преобразовать значение времени в удобочитаемую строку с
помощью @code{current-time-string} и @code{format-time-string}, в список целых чисел
с помощью @code{seconds-to-time} и в другие формы с помощью @code{decode-time} и
@code{float-time}.  Эти функции описаны в следующих разделах.

@defun current-time-string &optional time zone
Функция возвращает текущее время и дату в виде удобочитаемой строки.  Формат не
меняется для начальной части строки, которая содержит день недели, месяц, день месяца
и время суток в указанном порядке: количество символов, используемых в этих полях,
всегда одинаково, поэтому можно надежно использовать @code{подстроку} для их
извлечения.  Должны считаться символы с начала строки, а не с конца, так как год может
не содержать ровно четырех цифр, и в какой-то день в конце может быть добавлена
дополнительная информация.

Аргумент @var{time}, если он задан, указывает время форматирования вместо текущего
времени.  Необязательный аргумент @var{zone} по умолчанию соответствует правилу
текущего часового пояса.  @xref{Time Zone Rules}.

@example
@group
(current-time-string)
     @result{} "Wed Oct 14 22:21:05 1987"
@end group
@end example
@end defun

@defun current-time
Функция возвращает текущее время, представленное списком из четырех целых чисел
@code{(@var{sec-high} @var{sec-low} @var{microsec} @var{picosec})}.  Эти целые числа
имеют конечные нули в системах, которые возвращают время с более низким разрешением.
На всех современных машинах @var{picosec} кратно 1000, но это может измениться, когда
станут доступны часы с более высоким разрешением.
@end defun

@defun float-time &optional time
Функция возвращает текущее время в виде числа секунд с плавающей запятой, прошедших с
начала эпохи.  Необязательный аргумент @var{time}, если он задан, указывает время для
преобразования вместо текущего времени.

@emph{Предупреждение}: Поскольку результат - с плавающей запятой, может быть
неточность.  Не использовать эту функцию, если требуются точные отметки времени.

@code{time-to-seconds} - это псевдоним для этой функции.
@end defun

@defun seconds-to-time time
Функция преобразует значение времени в целочисленный список.  Например, если
@var{time} - число, @code{(time-to-seconds (seconds-to-time @var{time}))} равно этому
числу, если не возникают ошибки переполнения или округления.
@end defun

@node Time Zone Rules
@section Правила Часовых Поясов
@cindex time zone rules

@vindex TZ@r{, environment variable}
Часовой пояс по умолчанию определяется переменной среды @env{TZ}.
@xref{System Environment}.  Например, можно указать Emacs по умолчанию использовать
универсальное время с помощью @code{(setenv "TZ" "UTC0")}.  Если @env{TZ} отсутствует
в среде, Emacs использует время системных часов, которое является часовым поясом по
умолчанию, зависящим от платформы.

Набор поддерживаемых строк @env{TZ} зависит от системы.  GNU и многие другие системы
поддерживают базу данных tzdata, например, @samp{"America/New_York"} указывает часовой
пояс и историю перехода на летнее время для мест около Нью-Йорка.  GNU и большинство
других систем поддерживают строки @env{TZ} в стиле POSIX, например,
@samp{"EST+5EDT,M4.1.0/2,M10.5.0/2"} определяет правила, используемые в Нью-Йорке с
1987 по 2006 год.  Все системы поддерживают строку @samp{"UTC0"}, означающую
всемирное время.

@cindex time zone rule
Функции, выполняющие преобразование в местное время и обратно, принимают
необязательный аргумент @dfn{правило часового пояса}, который указывает часовой пояс
преобразования и историю перехода на летнее время.  Если правило часового пояса
опущено или @code{nil}, преобразование использует часовой пояс Emacs по умолчанию.
Если это @code{t}, при преобразовании используется всемирное время.  Если это
@code{wall}, при преобразовании используются настенные системные часы.  Если это
строка, преобразование использует правило часового пояса, эквивалентное установке
@env{TZ} для этой строки.  Если это список (@var{offset} @var{abbr}), где @var{offset}
- целое число секунд к востоку от всемирного времени, а @var{abbr} - строка, при
преобразовании используется фиксированный часовой пояс с заданным смещением и
сокращением.  Целое число @var{offset} обрабатывается так, как если бы оно было
(@var{offset} @var{abbr}), где @var{abbr} - это числовое сокращение на
POSIX-совместимых платформах и не определено в MS-Windows.

@defun current-time-zone &optional time zone
@cindex time zone, current
Функция возвращает список с описанием часового пояса, в котором находится
пользователь.

Значение имеет вид @code{(@var{offset} @var{abbr})}.  Здесь @var{offset} - целое
число, дающее количество секунд до всемирного времени (к востоку от Гринвича).
Отрицательное значение означает запад от Гринвича.  Второй элемент, @var{abbr},
представляет собой строку, дающую сокращенное обозначение часового пояса, например,
@samp{"CST"} для китайского стандартного времени или для центрального стандартного
времени США.  Оба элемента могут измениться, когда начинается или заканчивается
летнее время; если пользователь указал часовой пояс, в котором не используется
сезонная корректировка времени, то значение будет постоянным во времени.

Если операционная система не предоставляет всю информацию, необходимую для вычисления
значения, неизвестными элементами списка являются @code{nil}.

Аргумент @var{time}, если он задан, указывает значение времени для анализа вместо
текущего времени.  Необязательный аргумент @var{zone} по умолчанию соответствует
правилу текущего часового пояса.
@end defun

@node Time Conversion
@section Преобразование Dремени
@cindex calendrical information
@cindex time conversion

  Функции преобразуют значения времени (@pxref{Time of Day}) в календарную информацию
и наоборот.

  Многие 32-разрядные операционные системы ограничены системным временем, содержащим
32 бита информации в их секундном компоненте; эти системы обычно обрабатывают только
время с 1901-12-13 20:45:52 по 19.01.2038 03:14:07 всемирного времени.  Однако
64-разрядные и некоторые 32-разрядные операционные системы имеют компоненты с более
крупными секундами и могут отображать времена в далеком прошлом или будущем.

  Функции преобразования времени всегда используют григорианский календарь, даже для
дат до того, как григорианский календарь был введен.  Цифры в годах подсчитывают
количество лет, прошедших с 1 года до нашей эры, и не пропускают ноль, как это делают
традиционные григорианские годы; например, номер года @minus{}37 представляет 38-й
год по григорианскому календарю.

@defun decode-time &optional time zone
Функция преобразует значение времени в календарную информацию.  Если не указать
@var{time}, декодируется текущее время, и аналогично @var{zone} по умолчанию
использует правило текущего часового пояса.  @xref{Time Zone Rules}.
Возвращаемое значение - это список из девяти элементов, как показано ниже:

@example
(@var{seconds} @var{minutes} @var{hour} @var{day} @var{month} @var{year} @var{dow} @var{dst} @var{utcoff})
@end example

Вот что означают элементы:

@table @var
@item seconds
Число секунд после минуты в виде целого числа от 0 до 59.  В некоторых операционных
системах это 60 секунд прыжка.
@item minutes
Количество минут после часа в виде целого числа от 0 до 59.
@item hour
Час дня в виде целого числа от 0 до 23.
@item day
День месяца в виде целого числа от 1 до 31.
@item month
Месяц года в виде целого числа от 1 до 12.
@item year
Год, обычно целое число больше 1900.
@item dow
День недели в виде целого числа от 0 до 6, где 0 означает воскресенье.
@item dst
@code{t}, если действует летнее время, иначе @code{nil}.
@item utcoff
Целое число, указывающее смещение всемирного времени в секундах, то есть количество
секунд к востоку от Гринвича.
@end table

@strong{Common Lisp Примечание:} Common Lisp имеет другое значение для @var{dow} и
@var{utcoff}.
@end defun

@defun encode-time seconds minutes hour day month year &optional zone
Функция является обратной для @code{decode-time}.  Преобразуется семь элементов
календарных данных в целочисленное значение времени.  Значения аргументов смотреть в
таблице выше под @code{decode-time}.

Годовые числа меньше 100 специально не обрабатываются.  Если требуется, чтобы они
оставались более 1900 или более 2000 лет, следует изменить их самостоятельно, прежде
чем вызывать @code{encode-time}.

Необязательный аргумент @var{zone} по умолчанию соответствует правилу текущего
часового пояса.  @xref{Time Zone Rules}.

Если передать более семи аргументов в @code{encode-time}, первые шесть используются
как @var{seconds} - @var{year}, последний аргумент используется как @var{zone}, а
аргументы между ними игнорируются.  Функция позволяет использовать элементы списка,
возвращаемого @code{decode-time}, в качестве аргументов @code{encode-time}, например:

@example
(apply 'encode-time (decode-time @dots{}))
@end example

Можно выполнить простую арифметику даты, используя значения вне диапазона для
аргументов @var{seconds}, @var{minutes}, @var{hour}, @var{day} и @var{month};
например, день 0 означает день, предшествующий данному месяцу.

Операционная система ограничивает диапазон возможных значений времени; если попытаться
закодировать время, выходящее за пределы допустимого диапазона, возникнет ошибка.
Например, годы до 1970 года не работают на некоторых системах; в других, годы уже
1901 года действительно работают.
@end defun

@node Time Parsing
@section Время Синтаксического Анализа и Форматирования
@cindex time parsing
@cindex time formatting
@cindex formatting time values

  Функции преобразуют значения времени в текст в строке и наоборот.  Значения времени
включают @code{nil}, числа и списки от двух до четырех целых чисел
(@pxref{Time of Day}).

@defun date-to-time string
Функция анализирует строку времени @var{string} и возвращает соответствующее значение
времени.  Аргумент @var{string} должен представлять дату и время и должен быть в одной
из форм, распознаваемых @code{parse-time-string} (смотреть ниже).  Эта функция
принимает часовой пояс по Гринвичу, если в @var{string} отсутствует явная информация
о часовом поясе.
@end defun

@defun parse-time-string string
Функция анализирует строку времени @var{string} в список следующего вида:

@example
(@var{sec} @var{min} @var{hour} @var{day} @var{mon} @var{year} @var{dow} @var{dst} @var{tz})
@end example

@noindent
Формат этого списка такой же, как у @code{decode-time}, который принимает
(@pxref{Time Conversion}), и более подробно описан там.  Любой элемент, который не
может быть определен из ввода, будет установлен в @code{nil}.  Аргумент @var{string}
должен напоминать строку RFC 822 (или новее) или ISO 8601, например
``Fri, 25 Mar 2016 16:24:56 +0100'' или ``1998-09-12T12:21:54-0200'', но эта функция
также попытается проанализировать менее правильно сформированные строки времени.
@end defun

@defun format-time-string format-string &optional time zone

Функция конвертирует @var{time} (или текущее время, если @var{time} опущено или
@code{nil}) в строку в соответствии с @var{format-string}.  При преобразовании
используется правило часового пояса @var{zone}, которое по умолчанию соответствует
правилу текущего часового пояса.  @xref{Time Zone Rules}.  Аргумент
@var{format-string} может содержать @samp{%}-последовательности, которые указывают,
что заменяют части времени.  Вот таблица того, что означают
@samp{%}-последовательности:

@table @samp
@item %a
Сокращенное название дня недели.
@item %A
Полное название дня недели.
@item %b
Сокращенное название месяца.
@item %B
Полное название месяца.
@item %c
Синоним @samp{%x %X}.
@item %C
Означает век, то есть год, разделенный на 100, с усечением до нуля.  Ширина поля по
умолчанию - 2.
@item %d
Означает день месяца с нуля.
@item %D
Синоним @samp{%m/%d/%y}.
@item %e
Означает день месяца, заполненный пробелами.
@item %F
Означает формат даты ISO 8601, то есть @samp{"%Y-%m-%d"}.
@item %g
Год, соответствующий неделе ISO в столетии.
@item %G
Год, соответствующий неделе ISO.
@item %h
Синоним @samp{%b}.
@item %H
Означает час (00-23).
@item %I
Означает час (01-12).
@item %j
Означает день года (001-366).
@item %k
Означает час (0-23), дополненный пробелами.
@item %l
Означает час (1-12), дополненный пробелами.
@item %m
Означает месяц (01-12).
@item %M
Означает минуты (00-59).
@item %n
Означает новую строку.
@item %N
Обозначает наносекунды (000000000--999999999).  Чтобы запросить меньшее количество
цифр, использовать @samp{%3N} для миллисекунд, @samp{%6N} для микросекунд и так далее.
Любые лишние цифры отбрасываются без округления.
@item %p
Означает @samp{AM} или @samp{PM}, соответственно.
@item %q
Означает календарный квартал (1-4).
@item %r
Синоним @samp{%I:%M:%S %p}.
@item %R
Синоним @samp{%H:%M}.
@item %s
Означает целое число секунд с начала эпохи.
@item %S
Означает секунду (00-59 или 00-60 на платформах, поддерживающих дополнительные
секунды).
@item %t
Символ табуляции.
@item %T
Синоним @samp{%H:%M:%S}.
@item %u
День недели числом (1-7).  Понедельник - день 1.
@item %U
Означает неделю в году (01-52), при условии, что недели начинаются в воскресенье.
@item %V
Означает неделю в году согласно ISO 8601.
@item %w
День недели числом (0-6).  Воскресенье - день 0.
@item %W
Означает неделю в году (01-52), при условии, что недели начинаются в понедельник.
@item %x
Имеет значение, зависящее от локали.  В локали по умолчанию (с именем @samp{C}) 
эквивалентно @samp{%D}.
@item %X
Имеет значение, зависящее от локали.  В локали по умолчанию (с именем @samp{C})
эквивалентно @samp{%T}.
@item %y
Означает год без века (00-99).
@item %Y
Год со столетием.
@item %Z
Аббревиатура часового пояса (например, @samp{EST}).
@item %z
Числовое смещение часового пояса.  Перед @samp{z} может стоять одно, два или три
двоеточия; если простой @samp{%z} обозначает @samp{-0500}, тогда @samp{%:z} обозначает
@samp{-05:00}, @samp{%::z}, обозначает @samp{-05:00:00} и @samp{%:::z}, аналогично
@samp{%::z}, за исключением того, что подавляются конечные экземпляры @samp{:00},
поэтому в том же примере это обозначает @samp{-05}.
@item %%
Означает одиночный @samp{%}.
@end table

Один или несколько символов флага могут появиться сразу после @samp{%}.  @samp{0}
заполняет нулями, @samp{_} дополняет пробелами, @samp{-} подавляет заполнение,
@samp{^} заглавные буквы, а @samp{#} меняет регистр букв.

Также можно указать ширину поля и тип заполнения для любой из этих
@samp{%}-последовательностей.  Это работает как в @code{printf}: записывается ширина
поля цифрами в @samp{%}-последовательности после любых флагов.  Например, @samp{%S}
указывает количество секунд с минуты; @samp{%03S} означает заполнить это нулями до 3
позиций, @samp{%_3S} - заполнить пробелами до трех позиций.  Обычные контактные
площадки @samp{%3S} с нулями, потому что именно так @samp{%S} обычно приводит к двум
позициям.

Символы @samp{E} и @samp{O} действуют как модификаторы при использовании после любых
флагов и ширины полей в @samp{%}-sequence.  @samp{E} указывает использование
альтернативной версии даты и времени для текущей локали.  Например, в японском языке
@code{%Ex} может дать формат даты, основанный на правлении японских императоров.
@samp{E} допускается в @samp{%Ec}, @samp{%EC}, @samp{%Ex}, @samp{%EX}, @samp{%Ey} и
@samp{%EY}.

@samp{O} означает использование альтернативного представления чисел текущей локали
вместо обычных десятичных цифр.  Разрешено для большинства букв, всех тех, которые
выводят числа.

Чтобы облегчить отладку программ, нераспознанные @samp{%}-последовательности
обозначают сами себя и выводятся как есть.  Программы не должны полагаться на это
поведение, поскольку будущие версии Emacs могут распознавать новые
@samp{%}-последовательности как расширения.

Функция использует библиотечную функцию @code{strftime}
(@pxref{Formatting Calendar Time,,, libc, The GNU C Library Reference Manual}) для
выполнения большей части работы.  Чтобы связаться с этой функцией, сначала кодируется
аргумент, используя систему кодирования, указанную в @code{locale-coding-system}
(@pxref{Locales}); после того, как @code{strftime} вернет результирующую строку,
@code{format-time-string} декодирует строку, используя ту же систему кодирования.
@end defun

@defun format-seconds format-string seconds
Функция преобразует свой аргумент @var{seconds} в строку лет, дней, часов и так далее.
В соответствии с @var{format-string}, аргумент @var{format-string} может содержать
@samp{%}-последовательности, которые управляют преобразованием.  Вот таблица значений
@samp{%}-последовательностей:

@table @samp
@item %y
@itemx %Y
Целое число 365-дневных лет.
@item %d
@itemx %D
Целое число дней.
@item %h
@itemx %H
Целое число часов.
@item %m
@itemx %M
Целое число минут.
@item %s
@itemx %S
Целое число секунд.
@item %z
Контрольный флаг непечатаемого изображения.  Когда используется, другие спецификаторы
должны быть указаны в порядке убывания размера, то есть годы перед днями, часы перед
минутами и так далее.  Ничего не будет произведено в строке результата слева от
@samp{%z} до тех пор, пока не будет выполнено первое попавшееся ненулевое
преобразование.  Например, формат по умолчанию, используемый @code{emacs-uptime}
(@pxref{Processor Run Time, emacs-uptime}) @w{@code{"%Y, %D, %H, %M, %z%S"}},
означает, что всегда будет производиться количество секунд, но годы, дни, часы и
минуты будут отображаться только в том случае, если они не равны нулю.
@item %%
Создается @samp{%} буквально.
@end table

Последовательности формата в верхнем регистре производят единицы в дополнение к
числам, форматы в нижнем регистре производят только числа.

Также можно указать ширину поля, поставив после @samp{%} номер; короткие номера будут
дополнены пробелами.  Необязательная точка перед шириной запрашивает заполнение
нулями.  Например, @code{"%.3Y"} может создать @code{"004 years"}.

@emph{Предупреждение:} Функция работает только со значениями @var{seconds}, которые
не превышают @code{most-positive-fixnum}
(@pxref{Integer Basics, most-positive-fixnum}).
@end defun

@node Processor Run Time
@section Время Работы Процессора
@cindex processor run time
@cindex Emacs process run time

  Emacs предоставляет несколько функций и примитивов, которые возвращают время, как
прошедшее, так и время процессора, используемое процессом Emacs.

@deffn Command emacs-uptime &optional format
@cindex uptime of Emacs
Функция возвращает строку, представляющую Emacs @dfn{время безотказной работы} -
время, прошедшее с начала работы этого экземпляра Emacs.  Строка форматируется
@code{format-seconds} в соответствии с необязательным аргументом @var{format}.  Для
доступных дескрипторов формата смотреть @ref{Time Parsing, format-seconds}.  Если
@var{format} равно @code{nil} или опущено, по умолчанию используется
@code{"%Y, %D, %H, %M, %z%S"}.

При интерактивном вызове выводится время безотказной работы в эхо-области.
@end deffn

@defun get-internal-run-time
Функция возвращает время работы процессора, используемое Emacs, в виде списка из
четырех целых чисел:
@code{(@var{sec-high} @var{sec-low} @var{microsec} @var{picosec})}, используя тот же
формат, что и @code{current-time} (@pxref{Time of Day}).

Обратить внимание, что время, возвращаемое этой функцией, не включает время, в течение
которого Emacs не использовал процессор, и если процесс Emacs имеет несколько потоков,
возвращаемое значение является суммой времени процессора, использованного всеми
потоками Emacs.

Если система не позволяет определить время работы процессора,
@code{get-internal-run-time} возвращает то же время, что и @code{current-time}.
@end defun

@deffn Command emacs-init-time
Функция возвращает продолжительность (@pxref{Startup Summary}) инициализации Emacs в
секундах в виде строки.  При интерактивном вызове выводит продолжительность в
эхо-области.
@end deffn

@node Time Calculations
@section Расчет Времени
@cindex time calculations
@cindex comparing time values
@cindex calendrical computations

  Функции выполняют календарные вычисления, используя значения времени
(@pxref{Time of Day}).  Значение @code{nil} для любого из их аргументов значения
времени обозначает текущее системное время, а одно целое число обозначает количество
секунд с начала эпохи.

@defun time-less-p t1 t2
Возвращается @code{t}, если значение времени @var{t1} меньше значения времени
@var{t2}.
@end defun

@defun time-subtract t1 t2
Возвращается разница во времени @var{t1} @minus{} @var{t2} между двумя значениями
времени как значение времени.  Если требуется разница в единицах прошедших секунд,
использовать @code{float-time} (@pxref{Time of Day, float-time}) для преобразования
результата в секунды.
@end defun

@defun time-add t1 t2
Возвращается сумма двух значений времени как значение времени.  Один аргумент должен
представлять разницу во времени, а не момент времени, либо в виде списка, либо в виде
одного числа прошедших секунд.  Вот как добавить количество секунд к значению времени:

@example
(time-add @var{time} @var{seconds})
@end example
@end defun

@defun time-to-days time-value
Функция возвращает количество дней между началом года 1 и @var{time-value}.
@end defun

@defun time-to-day-in-year time-value
Возвращается номер дня в году, соответствующего @var{time-value}.
@end defun

@defun date-leap-year-p year
Функцией возвращается @code{t}, если @var{year} - високосный год.
@end defun

@node Timers
@section Таймеры для Отложенного Выполнения
@cindex timers

  Можно настроить @dfn{таймер} для вызова функции в указанное время в будущем или
после определенного периода бездействия.  Таймер - это специальный объект, в котором
хранится информация о времени следующего вызова и вызываемой функции.

@defun timerp object
Функция-предикат возвращается не-@code{nil}, если @code{object} - таймер.
@end defun

  Emacs не может запускать таймеры в любой произвольной точке программы на Lisp; может
запускать их только тогда, когда Emacs может принимать вывод от подпроцесса: а именно,
во время ожидания или внутри некоторых примитивных функций, таких как @code{sit-for}
или @code{read-event}, которые @emph{могут} ждать.  Следовательно, выполнение таймера
может быть отложено, если Emacs занят.  Однако время выполнения очень точное, если
Emacs простаивает.

  Emacs связывает @code{inhibit-quit} с @code{t} перед вызовом функции таймера, потому
что выход из многих функций таймера может оставить вещи в несогласованном состоянии.
Обычно это не вызывает проблем, потому что большинство функций таймера мало работают.
Действительно, вызов таймером функции, выполнение которой требует значительного
времени, может раздражать.  Если функция таймера должна разрешить выход, она должна
использовать @code{with-local-quit} (@pxref{Quitting}).  Например, если функция
таймера вызывает @code{accept-process-output} для получения вывода от внешнего
процесса, этот вызов должен быть заключен в @code{with-local-quit}, чтобы
гарантировать, что @kbd{C-g} работает, если внешний процесс зависает.

  Как правило, изменение содержимого буфера для функций таймера - плохая идея.  Когда
это делается, обычно должно вызываться @code{undo-boundary} как до, так и после
изменения буфера, чтобы отделить изменения таймера от изменений пользовательских
команд и предотвратить рост одной записи отмены до довольно большого размера.

  Функции таймера также должны избегать вызова функций, которые заставляют Emacs
ждать, например @code{sit-for} (@pxref{Waiting}).  Это может привести к
непредсказуемым эффектам, поскольку во время ожидания могут работать другие таймеры
(или даже тот же таймер).  Если функции таймера необходимо выполнить действие по
истечении определенного времени, она может сделать это, запланировав новый таймер.

  Если функция таймера вызывает функции, которые могут изменять данные соответствия,
она должна сохранять и восстанавливать данные соответствия.  @xref{Saving Match Data}.

@deffn Command run-at-time time repeat function &rest args
Устанавливается таймер, который вызывает функцию @var{function} с аргументами
@var{args} в момент времени @var{time}.  Если @var{repeat} - это число (целое или с
плавающей запятой), таймер будет запускаться заново каждые @var{repeat} секунды после
@var{time}.  Если @var{repeat} равно @code{nil}, таймер запускается только один раз.

@var{time} может указывать абсолютное или относительное время.

Абсолютное время может быть указано с использованием строки с ограниченным набором
форматов, и считается, что это @emph{настоящее} время, даже если оно уже было в
прошлом.  Распознаваемые формы: @samp{@var{xxxx}}, @samp{@var{x}:@var{xx}} или
@samp{@var{xx}:@var{xx}} (военное время) и @samp{@var{xx}am}, @samp{@var{xx}AM},
@samp{@var{xx}pm}, @samp{@var{xx}PM}, @samp{@var{xx}:@var{xx}am},
@samp{@var{xx}:@var{xx}AM}, @samp{@var{xx}:@var{xx}pm} или @samp{@var{xx}:@var{xx}PM}.
Для разделения часов и минут вместо двоеточия можно использовать точку.

Чтобы указать относительное время в виде строки, использовать числа, за которыми
следуют единицы.  Например:

@table @samp
@item 1 min
обозначает 1 минуту с этого момента.
@item 1 min 5 sec
обозначает 65 секунд с этого момента.
@item 1 min 2 sec 3 hour 4 day 5 week 6 fortnight 7 month 8 year
обозначает ровно 103 месяца, 123 дня и 10862 секунды с этого момента.
@end table

Для относительных значений времени Emacs считает месяц ровно тридцатью днями, а год -
точно 365,25 днями.

Не все удобные форматы - это строки.  Если @var{time} - это число (целое или с
плавающей запятой), это указывает относительное время, измеряемое в секундах.
Результат @code{encode-time} также можно использовать для указания абсолютного
значения @var{time}.

В большинстве случаев @var{repeat} не влияет на то, когда происходит @emph{первый}
вызов - это определяет только @var{time}.  Есть одно исключение: если @var{time} равно
@code{t}, то таймер запускается всякий раз, когда время кратно @var{repeat} секундам
после эпохи.  Это полезно для таких функций, как @code{display-time}.

Функция @code{run-at-time} возвращает значение таймера, которое идентифицирует
конкретное запланированное будущее действие.  Можно использовать это значение для
вызова @code{cancel-timer} (смотреть ниже).
@end deffn

  Повторяющийся таймер номинально должен запускаться каждые @var{repeat} секунд, но
помнить, что любой вызов таймера может быть запоздалым.  Задержка одного повторения не
влияет на запланированное время следующего повторения.  Например, если Emacs занят
вычислениями достаточно долго, чтобы покрыть три запланированных повтора таймера, а
затем начинает ждать, он немедленно вызовет функцию таймера три раза подряд (при
условии, что другие таймеры не сработают до или между ними).  Если требуется, чтобы
таймер запускался снова не менее чем через @var{n} секунд после последнего вызова, не
использовать аргумент @var{repeat}.  Вместо этого функция таймера должна явно
перепланировать таймер.

@defopt timer-max-repeats
Значение этой переменной указывает максимальное количество раз для повторения вызова
функции таймера в строке, когда многие ранее запланированные вызовы неизбежно
откладывались.
@end defopt

@defmac with-timeout (seconds timeout-forms@dots{}) body@dots{}
Выполнить @var{body}, но завершить через @var{seconds} секунды.  Если @var{body}
завершается до истечения времени, @code{with-timeout} возвращает значение последней
формы в @var{body}.  Если же выполнение @var{body} прерывается таймаутом, то
@code{with-timeout} выполняются все @var{timeout-forms} и возвращается значение
последнего из них.

Макрос работает, устанавливая таймер на запуск через @var{seconds} секунд.  Если
@var{body} завершает работу до этого времени, таймер отменяется.  Если таймер
действительно работает, он прекращает выполнение @var{body}, а затем выполняет
@var{timeout-forms}.

Поскольку таймеры могут работать в программе на Lisp только тогда, когда программа
вызывает примитив, который может ждать, @code{with-timeout} не может остановить
выполнение @var{body}, пока находится в процессе вычисления - только когда вызывается
один из этих примитивов.  Поэтому использовать @code{with-timeout} только с
@var{body}, который ожидает ввода, а не с тем, что выполняет долгие вычисления.
@end defmac

  Функция @code{y-or-n-p-with-timeout} предоставляет простой способ использования
таймера, чтобы избежать слишком долгого ожидания ответа.  @xref{Yes-or-No Queries}.

@defun cancel-timer timer
Отменяет запрошенное действие для @var{timer}, которым должен быть таймер - обычно
тот, который ранее был возвращен @code{run-at-time} или @code{run-with-idle-timer}.
Это отменяет эффект вызова одной из этих функций; указанное время не
вызовет ничего особенного.
@end defun

@findex list-timers
Команда @code{list-timers} выводит список всех активных в данный момент таймеров.
В отображаемом буфере доступна только одна команда: @kbd{c}
(@code{timer-list-cancel}), которая отменяет таймер в строке под точкой.

@node Idle Timers
@section Таймеры Простоя
@cindex idle timers

  Вот как настроить таймер, который запускается, когда Emacs бездействует в течение
определенного периода времени.  Помимо того, как это настроить, таймеры простоя
работают так же, как и обычные таймеры.

@deffn Command run-with-idle-timer secs repeat function &rest args
Установить таймер, который запустится в следующий раз, когда Emacs будет
бездействовать в течение @var{secs} секунд.  Значение @var{secs} может быть числом
или значением типа, возвращаемого @code{current-idle-time}.

Если @var{repeat} равно @code{nil}, таймер запускается только один раз, первый раз,
когда Emacs простаивает достаточно долгое время.  Чаще @var{repeat} - это
не-@code{nil}, что означает запускать таймер @emph{каждый раз}, когда  Emacs
бездействует в течение @var{secs} секунд.

Функция @code{run-with-idle-timer} возвращает значение таймера, которое можно
использовать при вызове @code{cancel-timer} (@pxref{Timers}).
@end deffn

@cindex idleness
  Emacs переходит в режим @dfn{ожидания}, когда начинает ожидать ввода данных
пользователем, и остается в режиме ожидания, пока пользователь не предоставит
какой-либо ввод.  Если таймер установлен на пять секунд бездействия, он запускается
примерно через пять секунд после того, как Emacs впервые перейдет в режим ожидания.
Даже если @var{repeat} равно не-@code{nil}, этот таймер не будет работать снова, пока
Emacs остается в режиме ожидания, потому что продолжительность бездействия будет
продолжать увеличиваться и больше не снизится до пяти секунд.

  Emacs может делать разные вещи в режиме ожидания: собирать мусор, автосохранение или
обрабатывать данные из подпроцесса.  Но эти перерывы во время простоя не влияют на
таймеры простоя, потому что они не сбрасывают часы простоя на ноль.  Таймер простоя,
установленный на 600 секунд, запустится по истечении десяти минут с момента завершения
последней пользовательской команды, даже если выходные данные подпроцесса были приняты
тысячи раз в течение этих десяти минут, и даже если был сбор мусора и
автосохранение.

  Когда пользователь вводит ввод, Emacs переходит в режим ожидания во время выполнения
ввода.  Затем снова переходит в режим ожидания, и все таймеры простоя, настроенные на
повторение, впоследствии будут работать в другой раз, один за другим.

  Не писать функцию таймера простоя, содержащую цикл, который каждый раз выполняет
определенную обработку и завершается, когда @code{(input-pending-p)} равно
не-@code{nil}.  Такой подход кажется очень естественным, но имеет две проблемы:

@itemize
@item
Блокируется весь вывод процесса (поскольку Emacs принимает вывод процесса только во
время ожидания).

@item
Блокируются любые таймеры простоя, которые должны работать в течение этого времени.
@end itemize

@noindent
Точно так же не писать функцию таймера простоя, которая устанавливает другой таймер
простоя (включая тот же таймер простоя) с аргументом @var{secs}, меньшим или равным
текущему времени простоя.  Такой таймер запустится почти сразу и продолжит работу
снова и снова, вместо того, чтобы ждать, когда Emacs в следующий раз перейдет в режим
ожидания.  Правильный подход - перепланировать с соответствующим приращением текущего
значения времени простоя, как описано ниже.

@defun current-idle-time
Если Emacs простаивает, функция возвращает продолжительность простоя Emacs в виде
списка из четырех целых чисел:
@code{(@var{sec-high} @var{sec-low} @var{microsec} @var{picosec})}, используя тот же
формат, что и @code{current-time} (@pxref{Time of Day}).

Когда Emacs не простаивает, @code{current-idle-time} возвращается @code{nil}.  Это
удобный способ проверить, простаивает ли Emacs.
@end defun

  Основное использование @code{current-idle-time} - это когда функция таймера простоя
хочет на время ``сделать перерыв''.  Может настроить другой таймер простоя для
повторного вызова той же функции через несколько секунд простоя.  Вот пример:

@example
(defvar my-resume-timer nil
  "Timer for `my-timer-function' to reschedule itself, or nil.")

(defun my-timer-function ()
  ;; @r{Если пользователь набирает команду, пока @code{my-resume-timer}}
  ;; @r{активно, в следующий раз, когда функция будет вызвана из основного}
  ;; @r{таймера ожидания, деактивировать @code{my-resume-timer}.}
  (when my-resume-timer
    (cancel-timer my-resume-timer))
  ...@var{do the work for a while}...
  (when @var{taking-a-break}
    (setq my-resume-timer
          (run-with-idle-timer
            ;; Вычислить время простоя @var{break-length}
            ;; большего текущего значения.
            (time-add (current-idle-time) @var{break-length})
            nil
            'my-timer-function))))
@end example

@node Terminal Input
@section Терминальный Вход
@cindex terminal input

  В этом разделе описаны функции и переменные для записи или управления вводом
терминала.  Смотреть @ref{Display}, для связанных функций.

@menu
* Input Modes::         Варианты обработки ввода.
* Recording Input::     Сохранение истории недавних или всех входных событий.
@end menu

@node Input Modes
@subsection Режимы Ввода
@cindex input modes
@cindex terminal input modes

@defun set-input-mode interrupt flow meta &optional quit-char
Функция устанавливает режим чтения ввода с клавиатуры.  Если @var{interrupt} равно
не-@code{nil}, то Emacs использует входные прерывания.  Если это @code{nil}, то
используется режим @sc{cbreak}.  Настройка по умолчанию зависит от системы.  Некоторые
системы всегда используют режим @sc{cbreak} независимо от того, что указано.

Когда Emacs напрямую связывается с X, игнорируется этот аргумент и используется
прерывания, если известно, как общаться таким образом.

Если @var{flow} равно не-@code{nil}, то Emacs использует управление потоком
@sc{xon/xoff} (@kbd{C-q}, @kbd{C-s}) для вывода на терминал.  Это не действует, кроме
режима @sc{cbreak}.

Аргумент @var{meta} управляет поддержкой кодов входных символов выше 127.  Если
@var{meta} равно @code{t}, Emacs преобразует символы с 8-м битом в мета-символы.  Если
@var{meta} равно @code{nil}, Emacs игнорирует 8-й бит; это необходимо, когда терминал
использует его как бит четности.  Если @var{meta} не является ни @code{t}, ни
@code{nil}, Emacs использует все 8 битов ввода без изменений.  Это хорошо для
терминалов, использующих 8-битные наборы символов.

Если @var{quit-char} равно не-@code{nil}, указывается символ, используемый для выхода.
Обычно это символ @kbd{C-g}.  @xref{Quitting}.
@end defun

Функция @code{current-input-mode} возвращает настройки режима ввода, которые Emacs
использует в настоящее время.

@defun current-input-mode
Функция возвращает текущий режим чтения ввода с клавиатуры.  Возвращается список,
соответствующий аргументам @code{set-input-mode}, в форме
@code{(@var{interrupt} @var{flow} @var{meta} @var{quit})}, в котором:
@table @var
@item interrupt
равно не-@code{nil}, когда Emacs использует ввод, управляемый прерываниями.  Если
@code{nil}, Emacs использует режим @sc{cbreak}.
@item flow
равно не-@code{nil}, если Emacs использует управление потоком @sc{xon/xoff}
(@kbd{C-q}, @kbd{C-s}) для вывода на терминал.  Это значение имеет смысл только тогда,
когда @var{interrupt} равно @code{nil}.
@item meta
есть @code{t}, если Emacs обрабатывает восьмой бит входных символов как мета-бит;
@code{nil} означает, что Emacs очищает восьмой бит каждого входного символа; любое
другое значение означает, что Emacs использует все восемь битов в качестве основного
кода символа.
@item quit
это символ, который Emacs в настоящее время использует для выхода, обычно @kbd{C-g}.
@end table
@end defun

@node Recording Input
@subsection Запись Ввода
@cindex recording input

@defun recent-keys
Функция возвращает вектор, содержащий последние 300 событий ввода с клавиатуры или
мыши.  Включены все входные события, независимо от того, использовались ли они как
части последовательности ключей.  Таким образом, всегда получаются последние 300
событий ввода, не считая событий, сгенерированных макросами клавиатуры.  (Они
исключены, потому что менее интересны для отладки; этого должно быть достаточно,
чтобы увидеть события, вызвавшие макросы.)

Вызов @code{clear-this-command-keys} (@pxref{Command Loop Info}) заставляет эту
функцию сразу же после этого возвращать пустой вектор.
@end defun

@deffn Command open-dribble-file filename
@cindex dribble file
Функция открывает @dfn{сопутствующий файл} с именем @var{filename}.  Когда файл
открыт, каждое событие ввода с клавиатуры или мыши (но не от макроса клавиатуры)
записывается в этот файл.  Несимвольное событие выражается с использованием его
печатного представления, окруженного @samp{<@dots{}>}.  Иметь в виду, что
конфиденциальная информация (например, пароли) может быть записана в этот файл.

Закрывается сопутствующий файл dribble, вызовом функции с аргументом @code{nil}.
@end deffn

  Смотреть также функцию @code{open-termscript} (@pxref{Terminal Output}).

@node Terminal Output
@section Терминальный Вывод
@cindex terminal output

  Функции вывода терминала отправляют вывод на текстовый терминал или отслеживают
вывод, отправленный на терминал.  Переменная @code{baud-rate} сообщает, скорость
считывания Emacs вывода терминала.

@defopt baud-rate
Насколько известно Emacs, значение этой переменной - это скорость вывода терминала.
Установка этой переменной не изменяет скорость фактической передачи данных, но
значение используется для вычислений, таких как заполнение.

  Это также влияет на решения о том, прокручивать ли часть экрана или перерисовывать
текстовые терминалы.  @xref{Forcing Redisplay},
для соответствующей функциональности на графических терминалах.

Значение измеряется в бодах.
@end defopt

  Если работа в сети, и разные части сети работают с разной скоростью передачи,
значение, возвращаемое Emacs, может отличаться от значения, используемого вашим
локальным терминалом.  Некоторые сетевые протоколы сообщают скорость локального
терминала удаленному компьютеру, чтобы Emacs и другие программы могли получить
правильное значение, а другие - нет.  Если Emacs имеет неправильное значение, он
принимает менее чем оптимальные решения.  Чтобы устранить проблему, установить
@code{baud-rate}.

@defun send-string-to-terminal string &optional terminal
Функция отправляет @var{string} в @var{terminal} без изменений.  Управляющие символы
в @var{string} имеют эффекты, зависящие от терминала.  (Если нужно отобразить на
терминале не-ASCII текст, закодировать его с помощью одной из функций, описанных в
@ref{Explicit Encoding}.)  Эта функция работает только на текстовых терминалах.
@var{terminal} может быть конечным объектом, фреймом или @code{nil} для терминала
выбранного фрейма.  В пакетном режиме @var{string} отправляется в @code{stdout},
когда @var{terminal} имеет значение @code{nil}.

Одно из применений этой функции - определение функциональных клавиш на терминалах,
которые имеют загружаемые определения функциональных клавиш.  Например, вот как (на
некоторых терминалах) определить функциональную клавишу 4 для перемещения вперед на
четыре символа (путем передачи символов @kbd{C-u C-f} на компьютер):

@example
@group
(send-string-to-terminal "\eF4\^U\^F")
     @result{} nil
@end group
@end example
@end defun

@deffn Command open-termscript filename
@cindex termscript file
Функция используется для открытия @dfn{терминологического файла}, который будет
записывать все символы, отправленные Emacs на терминал.  Возвращается @code{nil}.
Файлы Termscript полезны для исследования проблем, при которых Emacs искажает экран,
проблем, которые возникают из-за неправильных записей Termcap или нежелательных
настроек параметров терминала чаще, чем из-за фактических ошибок Emacs.  Как только
есть уверенность, какие символы были фактически выведены, можно надежно определить,
соответствуют ли они используемым спецификациям Termcap.

@example
@group
(open-termscript "../junk/termscript")
     @result{} nil
@end group
@end example

Закрывается файл termscript, вызовом этой функции с аргументом @code{nil}.

Смотреть также @code{open-dribble-file} в @ref{Recording Input}.
@end deffn

@node Sound Output
@section Звуковой Вывод
@cindex sound

  Чтобы воспроизводить звук с помощью Emacs, используется функция @code{play-sound}.
Поддерживаются только определенные системы; если вызывается @code{play-sound} в
системе, которая действительно не может выполнять эту работу, выдается ошибка.

@c FIXME: Добавить индексы для Au и WAV?  --xfq
  Звук необходимо сохранить в виде файла в формате RIFF-WAVE (@samp{.wav}) или Sun
Audio в формате (@samp{.au}).

@defun play-sound sound
Функция воспроизводит указанный звук.  Аргумент @var{sound} имеет вид
@code{(sound @var{properties}...)}, где @var{properties} состоит из чередующихся
ключевых слов (определенные символы распознаются особым образом) и соответствующих
им значений.

Вот таблица ключевых слов, которые в настоящее время имеют значение в
@var{sound}, и их значений:

@table @code
@item :file @var{file}
Определяется файл, содержащий звук для воспроизведения.  Если имя файла не является
абсолютным, оно раскрывается в каталоге @code{data-directory}.

@item :data @var{data}
Определяется звук для воспроизведения без необходимости ссылаться на файл.  Значение
@var{data} должно быть строкой, содержащей те же байты, что и звуковой файл.
Рекомендуется использовать однобайтную строку.

@item :volume @var{volume}
Определяет, насколько громко воспроизводить звук.  Должно быть число в диапазоне от
0 до 1.  По умолчанию используется тот объем, который был указан ранее.

@item :device @var{device}
Определяется системное устройство, на котором воспроизводится звук в виде строки.
Устройство по умолчанию зависит от системы.
@end table

Перед фактическим воспроизведением звука @code{play-sound} вызывает функции из списка
@code{play-sound-functions}.  Каждая функция вызывается с одним
аргументом @var{sound}.
@end defun

@deffn Command play-sound-file file &optional volume device
Функция является альтернативным интерфейсом для воспроизведения звука @var{file} с
указанием необязательного @var{volume} и @var{device}.
@end deffn

@defvar play-sound-functions
Список функций, которые необходимо вызвать перед воспроизведением звука.
Каждая функция вызывается с одним аргументом - списком свойств, описывающим звук.
@end defvar

@node X11 Keysyms
@section Работа с Символами Ключей X11
@cindex X11 keysyms

Чтобы определить системные символы ключей X11, установить переменную
@code{system-key-alist}.

@defvar system-key-alist
Значение переменной должно быть списком с одним элементом для каждого ключевого
символа системы.  Каждый элемент имеет форму @code{(@var{code} . @var{symbol})}, где
@var{code} - это числовой символьный код (не включая бит, зависящий от производителя,
@ifnottex
@minus{}2**28),
@end ifnottex
@tex
$-2^{28}$),
@end tex
а @var{symbol} - это имя функционального ключа.

Например, @code{(168 . mute-acute)} определяет системный ключ (используемый серверами
HP X), числовой код которого
@ifnottex
@minus{}2**28
@end ifnottex
@tex
$-2^{28}$
@end tex
+ 168.

Не обязательно исключать из списка ключевые слова других X-серверов; они не причиняют
вреда, пока они не конфликтуют с теми, которые используются фактически используемым
X-сервером.

Переменная всегда является локальной для текущего терминала и не может быть локальной
для буфера.  @xref{Multiple Terminals}.
@end defvar

Можно указать, какие ключевый символы Emacs должен использовать для модификаторов
Control, Meta, Alt, Hyper и Super, установив эти переменные:

@defvar x-ctrl-keysym
@defvarx x-alt-keysym
@defvarx x-meta-keysym
@defvarx x-hyper-keysym
@defvarx x-super-keysym
Название ключевого символа, который должен обозначать модификатор Control
(соответственно для Alt, Meta, Hyper и Super).  Например, вот как поменять местами
модификаторы Meta и Alt в Emacs:
@lisp
(setq x-alt-keysym 'meta)
(setq x-meta-keysym 'alt)
@end lisp
@end defvar

@node Batch Mode
@section Пакетный Режим
@cindex batch mode

  Параметр командной строки @samp{-batch} заставляет Emacs работать без
взаимодействия.  В этом режиме Emacs не считывает команды с терминала, не изменяет
режимы терминала и не ожидает вывода на стираемый экран.  Идея состоит в том, что
указываются программы на Lisp для запуска; когда они закончатся, Emacs должен
завершиться.  Можно указать программы для запуска с помощью @samp{-l @var{file}},
который загружает библиотеку с именем @var{file}, или @samp{-f @var{function}},
что вызывает @var{function} без аргументов, или @samp{--eval=@var{form}}.

  Любой вывод программы Lisp, который обычно попадает в эхо-область, либо с
использованием @code{message}, либо с использованием @code{prin1} и так далее, с
@code{t} в качестве потока, вместо этого отправляется в стандартные дескрипторы Emacs
в пакетном режиме: @code{message} записывает в стандартный дескриптор ошибки, в то
время как @code{prin1} и другие функции печати записывают в стандартный вывод.  Точно
так же ввод, который обычно поступает из минибуфера, читается из стандартного
дескриптора ввода.  Таким образом, Emacs ведет себя как неинтерактивная прикладная
программа.  (Вывод эхо-области, который обычно генерируется самим Emacs, например,
эхо-сигнал команды, полностью подавляется.)

Текст Не-ASCII, записываемый в стандартный вывод или дескрипторы ошибок, по умолчанию
кодируется с использованием @code{locale-coding-system} (@pxref{Locales}), если это
не-@code{nil}; можно изменить это, привязав @code{coding-system-for-write} к выбранной
системе кодирования (@pxref{Explicit Encoding}).

@defvar noninteractive
Переменная - не-@code{nil}, когда Emacs работает в пакетном режиме.
@end defvar

@node Session Management
@section Управление Сессией
@cindex session manager

Emacs поддерживает протокол управления сеансом X, который используется для
приостановки и перезапуска приложений.  В системе X Window за отслеживание запущенных
приложений отвечает программа @dfn{менеджер сеанса}.  Когда X-сервер завершает работу,
диспетчер сеанса просит приложения сохранить свое состояние и откладывает фактическое
завершение работы до тех пор, пока они не ответят.  Приложение также может отменить
выключение.

Когда диспетчер сеанса перезапускает приостановленный сеанс, предписывается этим
приложениям по отдельности перезагружать свое сохраненное состояние.  Это достигается
путем указания специального аргумента командной строки, в котором указывается, какой
сохраненный сеанс нужно восстановить.  Для Emacs это аргумент
@samp{--smid @var{session}}.

@defvar emacs-save-session-functions
@cindex session file
Emacs поддерживает сохранение состояния с помощью перехватчика
@code{emacs-save-session-functions}.  Emacs запускает эту ловушку, когда менеджер
сеанса сообщает ему, что оконная система закрывается.  Функции вызываются без
аргументов и с текущим буфером, установленным во временный буфер.  Каждая функция
может использовать @code{insert} для добавления кода Lisp в этот буфер.  В конце
Emacs сохраняет буфер в файл, называемый @dfn{файл сеанса}.

@findex emacs-session-restore
Впоследствии, когда менеджер сеанса перезапускает Emacs, автоматически загружается
файл сеанса (@pxref{Loading}).  Это выполняется функцией @code{emacs-session-restore},
которая вызывается при запуске.  @xref{Startup Summary}.

Если функцией в @code{emacs-save-session-functions} возвращается не-@code{nil}, Emacs
сообщает диспетчеру сеансов отменить завершение работы.
@end defvar

Вот пример, который просто вставляет некоторый текст в @file{*scratch*}, когда Emacs
перезапускается менеджером сеанса.

@example
@group
(add-hook 'emacs-save-session-functions 'save-yourself-test)
@end group

@group
(defun save-yourself-test ()
  (insert "(save-current-buffer
  (switch-to-buffer \"*scratch*\")
  (insert \"I am restored\"))")
  nil)
@end group
@end example

@node Desktop Notifications
@section Уведомления на Рабочем Столе
@cindex desktop notifications
@cindex notifications, on desktop

Emacs может отправлять @dfn{уведомления} в системах, которые поддерживают спецификацию
уведомлений рабочего стола freedesktop.org и в MS-Windows.  Чтобы использовать эту
функциональность на хостах POSIX, Emacs должен быть скомпилирован с поддержкой D-Bus
и должна быть загружена библиотека @code{notifications}.
@xref{Top, , D-Bus,dbus,D-Bus integration in Emacs}.
При наличии поддержки D-Bus поддерживается следующая функция:

@defun notifications-notify &rest params
Функция отправляет уведомление на рабочий стол через D-Bus, состоящее из параметров,
заданных аргументами @var{params}.  Аргументы должны состоять из чередующихся пар
ключевых слов и значений.  Поддерживаются следующие ключевые слова и значения:

@table @code
@item :bus @var{bus}
D-Bus bus.  Этот аргумент необходим только в том случае, если должна использоваться
шина, отличная от @code{:session}.

@item :title @var{title}
Заголовок уведомления.

@item :body @var{text}
Текст сообщения.  В зависимости от реализации сервера уведомлений текст может
содержать разметку HTML, например @samp{"<b>bold text</b>"}, гиперссылки или
изображения.  Специальные символы HTML должны быть закодированы как
@samp{"Contact &lt;postmaster@@localhost&gt;!"}.

@item :app-name @var{name}
Название приложения, отправляющего уведомление.  По умолчанию
@code{notifications-application-name}.

@item :replaces-id @var{id}
Уведомление @var{id}, которое заменяет это уведомление.  @var{id} должно быть
результатом предыдущего вызова @code{notifications-notify}.

@item :app-icon @var{icon-file}
Имя файла значка уведомления.  Если установлено значение @code{nil}, значок не
отображается.  По умолчанию @code{notifications-application-icon}.

@item :actions (@var{key} @var{title} @var{key} @var{title} ...)
Список действий, которые нужно применить.  @var{key} и @var{title} - это строки.
Действие по умолчанию (обычно вызываемое щелчком по уведомлению) должно иметь ключ с
именем @samp{"default"}.  Заголовок может быть любым, хотя реализации могут не
отображать его.

@item :timeout @var{timeout}
Время ожидания в миллисекундах с момента отображения уведомления, по истечении
которого уведомление должно автоматически закрыться.  Если @minus{}1, время истечения
срока действия уведомления зависит от настроек сервера уведомлений и может различаться
в зависимости от типа уведомления.  Если 0, срок уведомления никогда не истекает.
Значение по умолчанию - @minus{}1.

@item :urgency @var{urgency}
Уровень срочности.  Это может быть @code{low}, @code{normal} или @code{critical}.

@item :action-items
Когда задано это ключевое слово, строка действий @var{title} интерпретируется как
имя значка.

@item :category @var{category}
Тип уведомления - строка.  Список стандартных категорий смотреть в
@uref{http://developer.gnome.org/notification-spec/#categories, Desktop Notifications Specification}.

@item :desktop-entry @var{filename}
Определяет имя файла рабочего стола, представляющего вызывающую программу, например
@samp{"emacs"}.

@item :image-data (@var{width} @var{height} @var{rowstride} @var{has-alpha} @var{bits} @var{channels} @var{data})
Формат изображения необработанных данных, который описывает ширину, высоту, строку,
наличие альфа-канала, количество бит на выборку, каналы и данные изображения
соответственно.

@item :image-path @var{path}
Представлено либо как URI (@samp{file://} - единственная поддерживаемая сейчас схема
URI), либо как имя в теме значков, совместимой с freedesktop.org, из
@samp{$XDG_DATA_DIRS/icons}.

@item :sound-file @var{filename}
Путь к звуковому файлу, который будет воспроизводиться при появлении уведомления.

@item :sound-name @var{name}
Тематический именованный звук из спецификации именования звуков freedesktop.org от
@samp{$XDG_DATA_DIRS/sounds}, который воспроизводится при появлении уведомления.
Аналогично названию значка, только для звуков.  Например,
@samp{"message-new-instant"}.

@item :suppress-sound
Заставляет сервер подавлять воспроизведение любых звуков, если у него есть
такая возможность.

@item :resident
Если установлено, сервер не будет автоматически удалять уведомление при вызове
действия.  Уведомление будет оставаться на сервере до тех пор, пока оно не будет явно
удалено пользователем или отправителем.  Эта подсказка, вероятно, полезна только
тогда, когда сервер имеет возможность @code{:persistence}.

@item :transient
Если установлено, сервер будет рассматривать уведомление как временное и игнорировать
возможность персистентности сервера, если она должна существовать.

@item :x @var{position}
@itemx :y @var{position}
Указывает положение X, Y на экране, на которое должно указывать уведомление.
Оба аргумента необходимо использовать вместе.

@item :on-action @var{function}
Функция, вызываемая при вызове действия.  Уведомление @var{id} и @var{key} действия
передаются в качестве аргументов функции.

@item :on-close @var{function}
Функция для вызова, когда уведомление было закрыто по таймауту или пользователем.
Функция получает в качестве аргументов уведомление @var{id} и закрывающий
@var{reason}:

@itemize
@item @code{expired} if the notification has expired
@item @code{dismissed} if the notification was dismissed by the user
@item @code{close-notification} if the notification was closed by a call to
@code{notifications-close-notification}
@item @code{undefined} if the notification server hasn't provided a reason
@end itemize
@end table

Какие параметры принимает сервер уведомлений, можно проверить через
@code{notifications-get-capabilities}.

Функция возвращает идентификатор уведомления, целое число, которое можно использовать
для управления элементом уведомления с помощью @code{notifications-close-notification}
или аргумента @code{:replaces-id} другого вызова @code{notifications-notify}.
Например:

@example
@group
(defun my-on-action-function (id key)
  (message "Message %d, key \"%s\" pressed" id key))
     @result{} my-on-action-function
@end group

@group
(defun my-on-close-function (id reason)
  (message "Message %d, closed due to \"%s\"" id reason))
     @result{} my-on-close-function
@end group

@group
(notifications-notify
 :title "Title"
 :body "This is <b>important</b>."
 :actions '("Confirm" "I agree" "Refuse" "I disagree")
 :on-action 'my-on-action-function
 :on-close 'my-on-close-function)
     @result{} 22
@end group

@group
A message window opens on the desktop.  Press ``I agree''.
     @result{} Message 22, key "Confirm" pressed
        Message 22, closed due to "dismissed"
@end group
@end example
@end defun

@defun notifications-close-notification id &optional bus
Функция закрывает уведомление с идентификатором @var{id}.  @var{bus} может быть
строкой, обозначающей соединение D-Bus, по умолчанию - @code{:session}.
@end defun

@defun notifications-get-capabilities &optional bus
Возвращает возможности сервера уведомлений, список символов.  @var{bus} может быть
строкой, обозначающей соединение D-Bus, по умолчанию - @code{:session}.  Ожидаются
следующие возможности:

@table @code
@item :actions
Сервер предоставит пользователю указанные действия.

@item :body
Поддерживает основной текст.

@item :body-hyperlinks
Сервер поддерживает гиперссылки в уведомлениях.

@item :body-images
Сервер поддерживает изображения в уведомлениях.

@item :body-markup
Поддерживает разметку в основном тексте.

@item :icon-multi
Сервер отобразит анимацию всех фреймов в заданном массиве изображений.

@item :icon-static
Поддерживает отображение ровно 1 кадра любого заданного массива изображений.
Это значение является взаимоисключающим с @code{:icon-multi}.

@item :persistence
Сервер поддерживает постоянство уведомлений.

@item :sound
Сервер поддерживает звуки уведомлений.
@end table

Дальнейшие ограничения, зависящие от производителя, начинаются с @code{:x-vendor},
например @code{:x-gnome-foo-cap}.
@end defun

@defun notifications-get-server-information &optional bus
Возврат информации на сервере уведомлений, список строк.  @var{bus} может быть
строкой, обозначающей соединение D-Bus, по умолчанию - @code{:session}.  Возвращенный
список @code{(@var{name} @var{vendor} @var{version} @var{spec-version})}.

@table @var
@item name
Название продукта сервера.

@item vendor
Имя поставщика.  Например, @samp{"KDE"}, @samp{"GNOME"}.

@item version
Номер версии сервера.

@item spec-version
Версия спецификации, которой соответствует сервер.
@end table

Если @var{spec_version} равно @code{nil}, сервер поддерживает спецификацию до
@samp{"1.0"}.
@end defun

@cindex tray notifications, MS-Windows
Когда Emacs запускается в MS-Windows в качестве сеанса графического интерфейса
пользователя, он поддерживает небольшое подмножество функций уведомлений D-Bus через
собственный примитив:

@defun w32-notification-notify &rest params
Функция отображает уведомление на панели задач MS-Windows, как указано в @var{params}.
Уведомления в области уведомлений MS-Windows отображаются в виде всплывающего окна с
помощью значка в области уведомлений на панели задач.

Value - целочисленный уникальный идентификатор уведомления, который можно
использовать для удаления уведомления с помощью @code{w32-notification-close}, как
описано ниже.  В случае сбоя функции возвращается значение @code{nil}.

Аргументы @var{params} указываются как пары ключевое слово/значение.  Все параметры
необязательны, но если параметры не указаны, функция ничего не сделает и вернет
@code{nil}.

Поддерживаются следующие параметры:

@table @code
@item :icon @var{icon}
Отображение @var{icon} в системном трее.  Если @var{icon} - строка, должна указывать
имя файла, из которого загружается значок; указанный файл должен быть файлом значка
Windows @file{.ico}.  Если @var{icon} не является строкой или если этот параметр не
указан, будет использоваться стандартный значок Emacs.

@item :tip @var{tip}
Использовать @var{tip} как всплывающую подсказку для уведомления.  Если @var{tip}
является строкой, это текст всплывающей подсказки, которая будет отображаться при
наведении указателя мыши на значок в трее, добавленный уведомлением.  Если @var{tip}
не является строкой или этот параметр не указан, текст всплывающей подсказки по
умолчанию - @samp{Emacs notification}.  Текст всплывающей подсказки может содержать до
127 символов (63 в версиях Windows до W2K).  Более длинные строки будут обрезаны.

@item :level @var{level}
Уровень важности уведомления, один из @code{info}, @code{warning} или @code{error}.
Если задано, значение определяет значок, отображаемый слева от заголовка уведомления,
но только если параметр @code{:title} (смотреть ниже) также указан и является строкой.

@item :title @var{title}
Заголовок уведомления.  Если @var{title} является строкой, она отображается более
крупным шрифтом непосредственно над основным текстом.  Текст заголовка может содержать
до 63 символов; более длинный текст будет обрезан.

@item :body @var{body}
Тело уведомления.  Если @var{body} - строка, она определяет текст сообщения
уведомления.  Использовать встроенные символы новой строки, чтобы контролировать, как
текст разбивается на строки.  Основной текст может иметь длину до 255 символов и будет
обрезан, если он длиннее.  В отличие от D-Bus, основной текст должен быть простым
текстом без разметки.
@end table

Обратить внимание, что версии Windows до W2K поддерживают только @code{:icon} и
@code{:tip}.  Остальные параметры можно передавать, но они будут игнорироваться в
этих старых системах.

В любой момент времени может быть не более одного активного уведомления.  Активное
уведомление необходимо удалить, вызвав @code{w32-notification-close}, прежде чем
можно будет отобразить новое.
@end defun

Чтобы удалить уведомление и его значок с панели задач, использовать следующую функцию:

@defun w32-notification-close id
Функция удаляет уведомление в трее, заданное его уникальным @var{id}.
@end defun

@node File Notifications
@section Уведомления об Изменениях Файлов
@cindex file notifications
@cindex watch, for filesystem events

Некоторые операционные системы поддерживают наблюдение за файловыми системами на
предмет изменений файлов.  При правильной настройке Emacs связывает соответствующую
библиотеку, например @file{inotify}, @file{kqueue}, @file{gfilenotify} или
@file{w32notify}, статически.  Эти библиотеки позволяют наблюдать за файловыми
системами на локальном компьютере.

Также возможно наблюдать за файловыми системами на удаленных машинах,
@pxref{Remote Files,, Remote Files, emacs, The GNU Emacs Manual}.  Это не зависит от
одной из библиотек, связанных с Emacs.

Поскольку все эти библиотеки генерируют разные события при уведомлении об изменениях
файлов, существует библиотека Emacs @code{filenotify}, которая обеспечивает
унифицированный интерфейс.  Программы на Lisp, которые хотят получать уведомления о
файлах, всегда должны использовать эту библиотеку вместо собственных.


@defun file-notify-add-watch file flags callback
Добавьте наблюдение за событиями файловой системы, относящимися к @var{file}.  Это
позволяет сообщать Emacs о событиях файловой системы, относящихся к @var{file}.

Возвращаемое значение является дескриптором добавленных наблюдателей.  Их тип зависит
от базовой библиотеки, не может быть целым числом, как в примере ниже.  Его следует
использовать только для сравнения с помощью @code{equal}.

Если @var{file} по какой-то причине не может быть просмотрено, эта функция
сигнализирует об ошибке @code{file-notify-error}.

Иногда смонтированные файловые системы невозможно отслеживать на предмет изменений
файлов.  Это не обнаруживается этой функцией, возвращаемое значение не-@code{nil} не
гарантирует уведомления об изменениях в @var{file}.

@var{flags} - это список условий для установки того, за чем будет проводиться
наблюдение.  Он может включать следующие символы:

@table @code
@item change
следить за изменениями файлов
@item attribute-change
следить за изменениями атрибутов файла, такими как разрешения или время модификации
@end table

Если @var{file} - это каталог, будут уведомлены изменения для всех файлов в этом
каталоге.  Это не работает рекурсивно.

Когда происходит какое-либо событие, Emacs вызывает функцию @var{callback}, передавая
ей единственный аргумент @var{event}, который имеет форму

@lisp
(@var{descriptor} @var{action} @var{file} [@var{file1}])
@end lisp

@var{descriptor} - это тот же объект, что и возвращаемый этой функцией.  @var{action}
- описание события.  Это может быть любой из следующих символов:

@table @code
@item created
@var{file} был создан
@item deleted
@var{file} был удален
@item changed
содержимое @var{file}-ов изменилось; с библиотекой @file{w32notify}, также
сообщает об изменении атрибутов
@item renamed
@var{file} был переименован в @var{file1}
@item attribute-changed
атрибут @var{file} был изменен
@item stopped
просмотр @var{file} был остановлен
@end table

Обратить внимание, что библиотека @file{w32notify} не сообщает о событиях
@code{attribute-changed}.  Когда какой-либо атрибут файла, например права доступа или
время модификации, изменился, библиотека сообщает о событии @code{changed}.  Точно
так же библиотека @file{kqueue} не сообщает достоверно об изменениях атрибутов файла
при просмотре каталога.

Событие @code{stopped} сообщает, что просмотр файла остановлен.  Это могло произойти
из-за того, что был вызван @code{file-notify-rm-watch} (смотреть ниже), или из-за
того, что наблюдаемый файл был удален, или из-за другой ошибки, полученной из базовой
библиотеки.

@var{file} and @var{file1} - это имя файла(ов), о событии которого сообщается.
Например:

@example
@group
(require 'filenotify)
     @result{} filenotify
@end group

@group
(defun my-notify-callback (event)
  (message "Event %S" event))
     @result{} my-notify-callback
@end group

@group
(file-notify-add-watch
  "/tmp" '(change attribute-change) 'my-notify-callback)
     @result{} 35025468
@end group

@group
(write-region "foo" nil "/tmp/foo")
     @result{} Event (35025468 created "/tmp/.#foo")
        Event (35025468 created "/tmp/foo")
        Event (35025468 changed "/tmp/foo")
        Event (35025468 deleted "/tmp/.#foo")
@end group

@group
(write-region "bla" nil "/tmp/foo")
     @result{} Event (35025468 created "/tmp/.#foo")
        Event (35025468 changed "/tmp/foo")
        Event (35025468 deleted "/tmp/.#foo")
@end group

@group
(set-file-modes "/tmp/foo" (default-file-modes))
     @result{} Event (35025468 attribute-changed "/tmp/foo")
@end group
@end example

Будет ли возвращено действие @code{renamed}, зависит от используемой библиотеки
наблюдателя.  В противном случае действия @code{deleted} и @code{created} могли быть
возвращены в случайном порядке.

@example
@group
(rename-file "/tmp/foo" "/tmp/bla")
     @result{} Event (35025468 renamed "/tmp/foo" "/tmp/bla")
@end group

@group
(delete-file "/tmp/bla")
     @result{} Event (35025468 deleted "/tmp/bla")
@end group
@end example
@end defun

@defun file-notify-rm-watch descriptor
Удаляет существующее наблюдение за файлом, указанное его @var{descriptor}.
@var{descriptor} должен быть объектом, возвращаемым @code{file-notify-add-watch}.
@end defun

@defun file-notify-valid-p descriptor
Проверяет наблюдаетелей, указанных в @var{descriptor}, на достоверность.
@var{descriptor} должен быть объектом, возвращаемым @code{file-notify-add-watch}.

Наблюдение может стать недействительным, если файл или каталог, который отслеживается,
будет удален, или если поток-наблюдатель завершится ненормально по любой другой
причине.  Удаление наблюдения с помощью вызова @code{file-notify-rm-watch} также
делает наблюдателей недействительными.

@example
@group
(make-directory "/tmp/foo")
     @result{} Event (35025468 created "/tmp/foo")
@end group

@group
(setq desc
      (file-notify-add-watch
        "/tmp/foo" '(change) 'my-notify-callback))
     @result{} 11359632
@end group

@group
(file-notify-valid-p desc)
     @result{} t
@end group

@group
(write-region "bla" nil "/tmp/foo/bla")
     @result{} Event (11359632 created "/tmp/foo/.#bla")
        Event (11359632 created "/tmp/foo/bla")
        Event (11359632 changed "/tmp/foo/bla")
        Event (11359632 deleted "/tmp/foo/.#bla")
@end group

@group
;; Удаление файла в каталоге не делает наблюдателей недействительными.
(delete-file "/tmp/foo/bla")
     @result{} Event (11359632 deleted "/tmp/foo/bla")
@end group

@group
(write-region "bla" nil "/tmp/foo/bla")
     @result{} Event (11359632 created "/tmp/foo/.#bla")
        Event (11359632 created "/tmp/foo/bla")
        Event (11359632 changed "/tmp/foo/bla")
        Event (11359632 deleted "/tmp/foo/.#bla")
@end group

@group
;; Deleting the directory invalidates the watch.
;; Events arrive for different watch descriptors.
(delete-directory "/tmp/foo" 'recursive)
     @result{} Event (35025468 deleted "/tmp/foo")
        Event (11359632 deleted "/tmp/foo/bla")
        Event (11359632 deleted "/tmp/foo")
        Event (11359632 stopped "/tmp/foo")
@end group

@group
(file-notify-valid-p desc)
     @result{} nil
@end group
@end example
@end defun

@node Dynamic Libraries
@section Динамически Загружаемые Библиотеки
@cindex dynamic libraries

  @dfn{Динамически загружаемая библиотека} - это библиотека, которая загружается по
запросу, когда ее средства необходимы.  Emacs поддерживает такую загрузку библиотек
поддержки по запросу для некоторых своих функций.

@defvar dynamic-library-alist
Список динамических библиотек и файлов внешних библиотек, реализующих их.

Каждый элемент представляет собой список вида
@w{@code{(@var{library} @var{files}@dots{})}}, где @code{car} - это символ,
представляющий поддерживаемую внешнюю библиотеку, а остальные - строки, дающие
альтернативные имена файлов для этой библиотеки.

Emacs пытается загрузить библиотеку из файлов в том порядке, в котором они появляются
в списке; если ничего не найдено, сеанс Emacs не будет иметь доступа к этой
библиотеке, и функции, которые он предоставляет, будут недоступны.

Поддержка изображений на некоторых платформах использует эту возможность.  Вот пример
установки этой переменной для поддержки изображений в MS-Windows:

@example
(setq dynamic-library-alist
      '((xpm "libxpm.dll" "xpm4.dll" "libXpm-nox4.dll")
        (png "libpng12d.dll" "libpng12.dll" "libpng.dll"
             "libpng13d.dll" "libpng13.dll")
        (jpeg "jpeg62.dll" "libjpeg.dll" "jpeg-62.dll"
              "jpeg.dll")
        (tiff "libtiff3.dll" "libtiff.dll")
        (gif "giflib4.dll" "libungif4.dll" "libungif.dll")
        (svg "librsvg-2-2.dll")
        (gdk-pixbuf "libgdk_pixbuf-2.0-0.dll")
        (glib "libglib-2.0-0.dll")
        (gobject "libgobject-2.0-0.dll")))
@end example

Обратить внимание, что типы изображений @code{pbm} и @code{xbm} не нуждаются в записях
в этой переменной, потому что они не зависят от внешних библиотек и всегда доступны в
Emacs.

Также обратить внимание, что эта переменная не предназначена для использования в
качестве универсального средства доступа к внешним библиотекам; только те, которые
уже известны Emacs, могут быть загружены через него.

Переменная игнорируется, если данная @var{library} статически связана с Emacs.
@end defvar

@node Security Considerations
@section Соображения Безопасности
@cindex security
@cindex hardening

Как и любое приложение, Emacs можно запускать в безопасной среде, где операционная
система применяет правила доступа и тому подобное.  При некоторой осторожности
приложения на основе Emacs также могут быть частью периметра безопасности, который
проверяет такие правила.  Хотя настройки Emacs по умолчанию хорошо работают в типичной
среде разработки программного обеспечения, они могут потребовать корректировки в
средах, содержащих ненадежных пользователей, в том числе злоумышленников.  Вот список
проблем безопасности, которые могут быть полезны при разработке таких приложений.  Это
ни в коем случае не является полным; он предназначен для того, чтобы дать
представление о проблемах безопасности, а не быть контрольным списком безопасности.

@table @asis
@item File local variables
@cindex file local variables
Файл, который посещает Emacs, может содержать настройки переменных, которые влияют на
буфер, обращающийся к этому файлу; @xref{File Local Variables}.  Точно так же каталог
может указывать значения локальных переменных, общие для всех файлов в этом каталоге;
смотреть @ref{Directory Local Variables}.  Хотя Emacs прилагает некоторые усилия для
защиты от неправильного использования этих переменных, дыра в безопасности может быть
создана просто из-за слишком оптимистичной установки пакета
@code{safe-local-variable}, что является очень распространенной проблемой.  Чтобы
отключить эту функцию как для файлов, так и для каталогов, установить для
@code{enable-local-variables} значение @code{nil}.

@item Access control
Хотя Emacs обычно уважает права доступа базовой операционной системы, в некоторых
случаях он обрабатывает доступ особым образом.  Например, имена файлов могут иметь
обработчики, которые обрабатывают файлы особым образом, со своей собственной проверкой
доступа.  @xref{Magic File Names}.  Кроме того, буфер может быть доступен только для
чтения, даже если соответствующий файл доступен для записи, и наоборот, что может
привести к появлению таких сообщений, как
@samp{File passwd is write-protected; try to save anyway? (yes or no)}.
@xref{Read Only Buffers}.

@item Authentication
В Emacs есть несколько функций, которые работают с паролями, например,
@code{read-passwd}.  @xref{Reading a Password}.  Хотя эти функции не пытаются
транслировать пароли в мир, их реализация не защищает от решительных злоумышленников,
имеющих доступ к внутреннему устройству Emacs.  Например, даже если код Elisp
использует @code{clear-string} для удаления пароля из своей памяти после его
использования, остатки пароля могут по-прежнему находиться в списке свободных от
сборщика мусора.  @xref{Modifying Strings}.

@item Code injection
Emacs может отправлять команды многим другим приложениям, и приложения должны
позаботиться о том, чтобы строки, отправленные как операнды этих команд, не были
неверно интерпретированы как директивы.  Например, при использовании команды оболочки
для переименования файла @var{a} в @var{b} не использовать просто строку
@code{mv @var{a} @var{b}}, потому что любое имя файла может начинаться с @samp{-} или
может содержать метасимволы оболочки, такие как @samp{;}.  Хотя такие функции, как
@code{shell-quote-argument}, могут помочь избежать подобных проблем, они не являются
панацеей; например, на платформе POSIX @code{shell-quote-argument} цитирует
метасимволы оболочки, но не ведет @samp{-}.  В MS-Windows цитирование @samp{%}
предполагает, что ни одна из переменных среды не содержит @samp{^} в своем имени.
@xref{Shell Arguments}.  Обычно безопаснее использовать @code{call-process}, чем
подоболочку.  @xref{Synchronous Processes}.  И еще безопаснее использовать встроенные
функции Emacs; например, использовать @code{(rename-file "@var{a}" "@var{b}" t)}
вместо вызова @command{mv}.  @xref{Changing Files}.

@item Coding systems
Emacs пытается определить системы кодирования файлов и сетевых подключений, к которым
он обращается.  @xref{Coding Systems}.  Если Emacs делает неверный вывод или если
другие участники сетевого подключения не согласны с выводами Emacs, результирующая
система может быть ненадежной.  Кроме того, даже если делается правильный вывод, Emacs
часто может использовать байты, которые другие программы не могут.  Например, хотя для
Emacs нулевой байт является просто символом, как и любой другой, многие другие
приложения рассматривают его как терминатор строки и неправильно обрабатывают строки
или файлы, содержащие нулевые байты.

@item Environment and configuration variables
POSIX определяет несколько переменных среды, которые могут влиять на поведение Emacs.
Любая переменная среды, имя которой полностью состоит из прописных букв ASCII, цифр и
символа подчеркивания, может повлиять на внутреннее поведение Emacs.  Emacs использует
несколько таких переменных, например, @env{EMACSLOADPATH}.  @xref{Library Search}.
На некоторых платформах некоторые переменные окружения (такие как, @env{PATH},
@env{POSIXLY_CORRECT}, @env{SHELL}, @env{TMPDIR}) должны иметь правильно
сконфигурированные значения, чтобы получить стандартное поведение для любой утилиты,
которую может вызывать Emacs.  Даже такие, казалось бы, безобидные переменные, как
@env{TZ}, могут иметь проблемы с безопасностью.  @xref{System Environment}.

Emacs имеет настройки и другие переменные с аналогичными соображениями.  Например,
если переменная @code{shell-file-name} указывает оболочку с нестандартным поведением,
приложение на основе Emacs может вести себя неправильно.

@item Installation
Установленному Emacs, с изменённой иерархией каталогов установки недоверенными
пользователями, нельзя доверять как приложению.  Это относится также к иерархиям
каталогов программ, которые использует Emacs, и файлов, которые Emacs читает и
записывает.

@item Network access
Emacs часто обращается к сети, и можно настроить его так, чтобы избежать доступа к
сети, как это обычно бывает.  Например, если не установить @code{tramp-mode} на
@code{nil}, имена файлов с использованием определенного синтаксиса интерпретируются
как сетевые файлы и извлекаются по сети.
@xref{Top, The Tramp Manual,, tramp, The Tramp Manual}.

@item Race conditions
Приложения Emacs имеют те же проблемы, что и другие приложения.  Например, даже когда
@code{(file-readable-p "foo.txt")} возвращает @code{t}, возможно, что @file{foo.txt}
не читается, потому что какая-то другая программа изменила права доступа к файлу
между вызовом @code{file-readable-p} и сейчас.  @xref{Testing Accessibility}.

@item Resource limits
Когда Emacs исчерпывает память или другие ресурсы операционной системы, его поведение
может быть менее надежным, поскольку вычисления, которые обычно выполняются до
завершения, могут прерваться обратно на верхний уровень.  Это может привести к тому,
что Emacs будет пренебрегать операциями, которые он обычно выполнял бы.
@end table
