@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 2010-2019 Free Software Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Packaging
@chapter Подготовка Кода Lisp к Распространению
@cindex package
@cindex Lisp package

  Emacs предоставляет стандартный способ распространения кода Emacs Lisp среди
пользователей. @dfn{Пакет} - это набор из одного или нескольких файлов,
отформатированных и объединенных таким образом, что пользователи могут легко
загрузить, установить, удалить и обновить его.

  В следующих разделах описывается, как создать пакет и как поместить его в
@dfn{пакетный архив}, чтобы его могли загрузить другие.
@xref{Packages,,, emacs, The GNU Emacs Manual}, для описания функций системы
упаковки на уровне пользователя.

@menu
* Packaging Basics::        Основные концепции пакетов Emacs Lisp.
* Simple Packages::         Как упаковать один файл .el.
* Multi-file Packages::     Как упаковать несколько файлов.
* Package Archives::        Ведение архивов пакетов.
@end menu

@node Packaging Basics
@section Основы Пакета
@cindex package attributes
@cindex package name
@cindex package version
@cindex dependencies
@cindex package dependencies

  Пакет может быть либо @dfn{простым пакетом}, либо @dfn{многофайловым пакетом}.
Простой пакет хранится в архиве пакетов как один файл Emacs Lisp, тогда как
многофайловый пакет хранится как файл tar (содержащий несколько файлов Lisp и,
возможно, файлы, не относящиеся к Lisp, такие как руководство).

  При обычном использовании разница между простыми пакетами и многофайловыми пакетами
относительно несущественна; интерфейс меню пакета не делает различий между ними.
Однако процедура их создания отличается, как описано в следующих разделах.

  Каждый пакет (простой или многофайловый) имеет определенные @dfn{аттрибуты}:

@table @asis
@item Name
Короткое слово (например, @samp{auctex}).  Обычно это также префикс символа,
используемый в программе (@pxref{Coding Conventions}).

@item Version
Номер версии в форме, понятной функции @code{version-to-list}
(например, @samp{11.86}).  Каждый выпуск пакета должен сопровождаться увеличением
номера версии, чтобы пользователи, запрашивающие архив пакета, распознавали его как
обновление.

@item Brief description
Отображается, когда пакет указан в меню «Пакет».  Должно занимать одну строку, в
идеале не более 36 символов.

@item Long description
Отображается в буфере, созданном @kbd{C-h P} (@code{describe-package}), после краткого
описания пакета и статуса установки.  Обычно это занимает несколько строк и должно
полностью описывать возможности пакета и то, как начать его использовать после его
установки.

@item Dependencies
Список других пакетов (возможно, включая минимально допустимые номера версий), от
которых зависит этот пакет.  Список может быть пустым, что означает, что у этого
пакета нет зависимостей.  В противном случае при установке этого пакета также
рекурсивно автоматически устанавливаются его зависимости; если не удается найти
какую-либо зависимость, пакет не может быть установлен.
@end table

@cindex content directory, package
  При установке пакета с помощью команды @code{package-install-file} или через меню
пакетов создается подкаталог @code{package-user-dir} с именем
@file{@var{name}-@var{version}}, где @var{name} - это имя пакета, а @var{version} -
его версия (например, @file{~/.emacs.d/elpa/auctex-11.86/}).  Называется это в пакете
@dfn{каталогом содержимого}.  Сюда Emacs помещает содержимое пакета (единственный
файл Lisp для простого пакета или файлы, извлеченные из многофайлового пакета).

@cindex package autoloads
  Затем Emacs ищет в каждом файле Lisp в каталоге содержимого магические комментарии
автозагрузки (@pxref{Autoload}).  Эти определения автозагрузки сохраняются в файле с
именем @file{@var{name}-autoloads.el} в каталоге содержимого.  Обычно они используются
для автозагрузки основных пользовательских команд, определенных в пакете, но они также
могут выполнять другие задачи, такие как добавление элемента в @code{auto-mode-alist}
(@pxref{Auto Major Mode}).  Обратить внимание, что пакет обычно @emph{не}
автоматически загружает все функции и переменные, определенные в нем - только
несколько команд, которые обычно вызываются для начала использования пакета.  Затем
Emacs компилирует побайтно каждый файл Лиспа в пакете.

  После установки установлен пакет @dfn{loaded}: Emacs добавляет каталог содержимого
пакета в @code{load-path} и оценивает определения автозагрузки в
@file{@var{name}-autoloads.el}.

  Каждый раз, когда запускается Emacs, автоматически вызывается функция
@code{package-initialize} для загрузки установленных пакетов.  Это делается после
загрузки файла инициализации и файла сокращений (если есть) и перед запуском
@code{after-init-hook} (@pxref{Startup Summary}).  Автоматическая загрузка пакетов
отключена, если пользовательская опция @code{package-enable-at-startup} имеет
значение @code{nil}.

@deffn Command package-initialize &optional no-activate
Функция инициализирует внутреннюю запись Emacs о том, какие пакеты установлены, и
загружает их.  Пользовательская опция @code{package-load-list} указывает, какие
пакеты загружать; по умолчанию загружаются все установленные пакеты.  Если вызывается
во время запуска, эта функция также устанавливает @code{package-enable-at-startup} в
@code{nil}, чтобы избежать случайной загрузки пакетов дважды.
@xref{Package Installation,,, emacs, The GNU Emacs Manual}.

Необязательный аргумент @var{no-activate}, если не-@code{nil}, заставляет Emacs
обновлять свою запись установленных пакетов без их фактической загрузки; это только
для внутреннего использования.
@end deffn

@node Simple Packages
@section Простые Пакеты
@cindex single file package
@cindex simple package

  Простой пакет состоит из одного исходного файла Emacs Lisp.  Файл должен
соответствовать соглашению о заголовках библиотеки Emacs Lisp
(@pxref{Library Headers}).  Атрибуты пакета берутся из различных заголовков, как
показано в следующем примере:

@example
@group
;;; superfrobnicator.el --- Frobnicate and bifurcate flanges

;; Copyright (C) 2011 Free Software Foundation, Inc.
@end group

;; Author: J. R. Hacker <jrh@@example.com>
;; Version: 1.3
;; Package-Requires: ((flange "1.0"))
;; Keywords: multimedia, frobnicate
;; URL: http://example.com/jrhacker/superfrobnicate

@dots{}

;;; Commentary:

;; Этот пакет предоставляет дополнительный режим для разветвления и/или
;; раздвоения любых фланцев по вашему желанию.
;; Чтобы активировать его, просто введите
@dots{}

;;;###autoload
(define-minor-mode superfrobnicator-mode
@dots{}
@end example

  Имя пакета совпадает с базовым именем файла, написанным в первой строке.  Здесь
это @samp{superfrobnicator}.

  Краткое описание также взято из первой строки.  Здесь это
@samp{Frobnicate and bifurcate flanges}.

  Номер версии берется из заголовка @samp{Package-Version}, если он существует, или из
заголовка @samp{Version} в противном случае.  То или другое @emph{должно}
присутствовать.  Здесь номер версии 1.3.

  Если в файле есть раздел @samp{;;; Commentary:}, этот раздел используется как полное
описание.  (При отображении описания Emacs опускает строку @samp{;;; Commentary:}, а
также первые символы комментария в самом комментарии.)

  Если файл имеет заголовок @samp{Package-Requires}, это используется как зависимости
пакета.  В приведенном выше примере пакет зависит от пакета @samp{flange} версии 1.0
или выше.  @xref{Library Headers}, для описания заголовка @samp{Package-Requires}.
Если заголовок опущен, у пакета нет зависимостей.

  Заголовки @samp{Keywords} и @samp{URL} необязательны, но рекомендуются.  Команда
@code{describe-package} использует их для добавления ссылок в свой вывод.  Заголовок
@samp{Keywords} должен содержать хотя бы одно стандартное ключевое слово из списка
@code{finder-known-keywords}.

  Файл также должен содержать один или несколько магических комментариев автозагрузки,
как описано в @ref{Packaging Basics}.  В приведенном выше примере магический
комментарий автоматически загружает @code{superfrobnicator-mode}.

  @xref{Package Archives}, для объяснения того, как добавить однофайловый пакет в
архив пакетов.

@node Multi-file Packages
@section Многофайловые Пакеты
@cindex multi-file package

  Многофайловый пакет менее удобно создавать, чем однофайловый пакет, но он предлагает
больше возможностей: может включать несколько файлов Emacs Lisp, руководство по Info и
другие типы файлов (например, изображения).

  Перед установкой многофайловый пакет сохраняется в архиве пакетов в виде tar-файла.
Файл tar должен называться @file{@var{name}-@var{version}.tar}, где @var{name} - это
имя пакета, а @var{version} - номер версии.  После извлечения все его содержимое
должно появиться в каталоге с именем @file{@var{name}-@var{version}},
@dfn{content directory} (@pxref{Packaging Basics}).  Файлы также могут извлекаться в
подкаталоги каталога содержимого.

  Один из файлов в каталоге содержимого должен называться @file{@var{name}-pkg.el}.
Должен содержать единственную форму Lisp, состоящую из вызова функции
@code{define-package}, описанной ниже.  Это определяет атрибуты пакета: версию,
краткое описание и требования.

  Например, если распространяется версия 1.3 superfrobnicator в виде многофайлового
пакета, tar-файл будет иметь вид @file{superfrobnicator-1.3.tar}.  Его содержимое
будет извлечено в каталог @file{superfrobnicator-1.3}, и одним из них будет файл
@file{superfrobnicator-pkg.el}.

@defun define-package name version &optional docstring requirements
Функция определяет пакет.  @var{name} - это имя пакета, строка.  @var{version} - это
версия, как строка формы, которую может понять функция @code{version-to-list}.
@var{docstring} - краткое описание.

@var{requirements} - это список необходимых пакетов и их версий.  Каждый элемент в
этом списке должен иметь форму @code{(@var{dep-name} @var{dep-version})}, где
@var{dep-name} - это символ, имя которого - имя пакета зависимости, а
@var{dep-version} - версия зависимости (строка).
@end defun

  Если каталог содержимого содержит файл с именем @file{README}, этот файл
используется как подробное описание.

  Если каталог содержимого содержит файл с именем @file{dir}, предполагается, что это
файл каталога Info, созданный с помощью @command{install-info}.
@xref{Invoking install-info, Invoking install-info, Invoking install-info, texinfo, Texinfo}.  Соответствующие файлы Info также должны присутствовать в каталоге
содержимого.  В этом случае Emacs автоматически добавит каталог содержимого в
@code{Info-directory-list} при активации пакета.

  Не включать в пакет файлы @file{.elc}.  Они создаются при установке пакета.
Обратить внимание, что нет способа контролировать порядок, в котором файлы
компилируются по байтам.

  Не включать файлы с именем @file{@var{name}-autoloads.el}.  Этот файл зарезервирован
для определений автозагрузки пакета (@pxref{Packaging Basics}).  Он создается
автоматически при установке пакета путем поиска во всех файлах Lisp пакета магических
комментариев автозагрузки.

  Если многофайловый пакет содержит вспомогательные файлы данных (такие как
изображения), код Lisp пакета может ссылаться на эти файлы через переменную
@code{load-file-name} (@pxref{Loading}).  Вот пример:

@smallexample
(defconst superfrobnicator-base (file-name-directory load-file-name))

(defun superfrobnicator-fetch-image (file)
  (expand-file-name file superfrobnicator-base))
@end smallexample

@node Package Archives
@section Создание и Обслуживание Архива Пакетов
@cindex package archive

  Через меню пакетов пользователи могут загружать пакеты из @dfn{архива пакетов}.
Такие архивы задаются переменной @code{package-archives}, значение по умолчанию
которой содержит единственную запись: архив, размещенный проектом GNU по адресу
@url{https://elpa.gnu.org}.  В этом разделе описывается, как настроить и поддерживать
архив пакетов.

@cindex base location, package archive
@defopt package-archives
Значение этой переменной - список архивов пакетов, распознаваемых менеджером пакетов
Emacs.

Каждый элемент alist соответствует одному архиву и должен иметь вид
@code{(@var{id} . @var{location})}, где @var{id} - имя архива (строка), а
@var{location} - его @dfn{базовое местоположение} (строка).

Если базовое местоположение начинается с @samp{http:} или @samp{https:}, оно
рассматривается как URL-адрес HTTP(S), и пакеты загружаются из этого архива через
HTTP(S) (как в случае с архивом GNU по умолчанию).

В противном случае базовое местоположение должно быть именем каталога.  В этом случае
Emacs извлекает пакеты из этого архива через обычный доступ к файлам.  Такие локальные
архивы в основном полезны для тестирования.
@end defopt

  Архив пакетов - это просто каталог, в котором хранятся файлы пакетов и связанные с
ними файлы.  Если требуется, чтобы архив был доступен через HTTP, этот каталог должен
быть доступен для веб-сервера.  Как это сделать, выходит за рамки данного руководства.

  Удобный способ настроить и обновить архив пакетов - использовать библиотеку
@code{package-x}.  Это включено в Emacs, но не загружается по умолчанию; ввести
@kbd{M-x load-library @key{RET} package-x @key{RET}}, чтобы загрузить её, или
добавить @code{(require 'package-x)} в файл инициализации.
@xref{Lisp Libraries,, Lisp Libraries, emacs, The GNU Emacs Manual}.

@noindent
После создания архива помнить, что он недоступен в интерфейсе меню пакета, если
не находится в @code{package-archives}.

@cindex package archive security
@cindex package signing
Поддержание общедоступного архива пакетов влечет за собой определенную
ответственность.  Когда пользователи Emacs устанавливают пакеты из этого архива, эти
пакеты могут заставить Emacs запускать произвольный код с разрешениями
устанавливающего пользователя.  (Это верно для кода Emacs в целом, а не только для
пакетов.)  Таким образом, потребуется убедиться, что архив находится в хорошем
состоянии и обеспечивает безопасность системы хостинга.

  Один из способов повысить безопасность пакетов - скопировать их с помощью
криптографического ключа.  Если сгенерировать пару приватных/публичных ключей gpg,
можно использовать gpg для подписи пакета следующим образом:

@c FIXME EasyPG / package-x способ сделать это.
@example
gpg -ba -o @var{file}.sig @var{file}
@end example

@noindent
Для однофайлового пакета @var{file} - это файл пакета Lisp; для многофайлового пакета
это tar-файл пакета.  Таким же образом можно подписать и файл содержимого архива.
Сделать файлы @file{.sig} доступными в том же месте, что и пакеты.  Также потребуется
сделать свой открытый ключ доступным для скачивания людьми; например, загрузив его на
сервер ключей, такой как @url{http://pgp.mit.edu/}.  Когда люди устанавливают пакеты
из такого архива, могут использовать открытый ключ для проверки подписей.

Полное объяснение этих вопросов выходит за рамки данного руководства.  Для получения
дополнительной информации о криптографических ключах и подписи,
@pxref{Top,, GnuPG, gnupg, The GNU Privacy Guard Manual}.  Emacs поставляется с
интерфейсом к GNU Privacy Guard,
@pxref{Top,, EasyPG, epa, Emacs EasyPG Assistant Manual}.
