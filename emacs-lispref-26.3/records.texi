@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 2017-2019 Free Software Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node Records
@chapter Запись
@cindex records

  Задача объекта запись, дать возможность программисту создавать объекты с
  новыми типами, которые не встроены в Emacs.  Они используются в качестве
  базового представления @code{cl-defstruct} и @code{defclass} экземпляров.

  Внутренне, объект запись очень похож на вектор; доступ к его слотам можно
  получить с помощью @code{aref} и его можно скопировать с помощью
  @code{copy-sequence}.  Тем не менее, первый слот используются для хранения
  информации о его типе, возвращаемого @code{type-of}.  Кроме того, в текущей
  реализации объект запись может иметь не более 4096 слотов, тогда как вектор
  может иметь значительно больше.  Как массив, запись использует индексацию с
  с нулевым происхождением: первый слот имеет индекс 0.

  Слот для типа должен быть либо символом, либо дескриптор типа.  Если это
  дескриптор типа, будет возвращен символ, обозначающий его тип;
  @ref{Type Descriptors}.  Любой другой тип объекта возвращается как есть.

  Печатное представление записи - это @samp{#s} за чем следует список с
  указанием содержимого.  Первый элемент списка должен быть типом записи.
  Следующие элементы - это слоты записи.

  Для того, чтобы избежать конфликтов с другими именами типов, Lisp
  программы, определяющие новые типы записями, как правило, используют
  соглашения об именовании пакета, где эти имена типов записей введены.
  Обратите внимание, что имена типов, которые, возможно, будут конфликтовать,
  могут не быть известны в то время, как пакет, определяющий тип записи
  загружен; они могут быть загружены в будущем времени.

  Запись - постоянна для оценки: результат оценки - это сама запись.
  Это не оценка и даже не проверка слотов.  @xref{Self-Evaluating Forms}.

@menu
* Record Functions::        Функции для работы с Записью.
* Backward Compatibility::  Совместимость с cl-defstruct.
@end menu

@node Record Functions
@section Функции работы с Записью

@defun recordp object
Функция возвращает @code{t} если @var{object} является записью.

@example
@group
(recordp #s(a))
     @result{} t
@end group
@end example
@end defun

@defun record type &rest objects
Функция создает и возвращает запись, тип которой @var{type} и дополнительными
слотами переданными в аргументе @var{objects}.

@example
@group
(record 'foo 23 [bar baz] "rats")
     @result{} #s(foo 23 [bar baz] "rats")
@end group
@end example
@end defun

@defun make-record type length object
Функция возвращает новую запись с типом @var{type} и дополнительным
@var{length} колличеством слотов, каждый из которых инициализирован
@var{object}.

@example
@group
(setq sleepy (make-record 'foo 9 'Z))
     @result{} #s(foo Z Z Z Z Z Z Z Z Z)
@end group
@end example
@end defun

@node Backward Compatibility
@section Обратная Совместимость

  Код, скомпилированный с более старыми версиями @code{cl-defstruct}, который
  не использует объект запись, может столкнуться с проблемами при
  использовании в новом Emacs.  Чтобы облегчить это, Emacs определяет, когда
  используется старый @code{cl-defstruct}, и включает режим, в котором
  структуры старого стиля обрабатывается @code{type-of} так, как будто эти
  объекты представляют из себя запись.

@defun cl-old-struct-compat-mode arg
Если @var{arg} положителен, включается обратная совместимость со структурами
старого стиля.
@end defun
