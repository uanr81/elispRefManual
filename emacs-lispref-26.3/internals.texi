@c -*-texinfo-*-
@c This is part of the GNU Emacs Lisp Reference Manual.
@c Copyright (C) 1990-1993, 1998-1999, 2001-2019 Free Software
@c Foundation, Inc.
@c See the file elisp.texi for copying conditions.
@node GNU Emacs Internals
@appendix Внутреннее Устройство GNU Emacs

В этой главе описывается, как выполняется дамп исполняемого файла Emacs с
предварительно загруженными библиотеками Lisp, как распределяется память и некоторые
внутренние аспекты GNU Emacs, которые могут быть интересны программистам на C.

@menu
* Building Emacs::      Как происходит сборка Emacs.
* Pure Storage::        Kludge, чтобы сделать предустановленные функции Lisp общими.
* Garbage Collection::  Освобождение места для неиспользуемых объектов Lisp.
* Stack-allocated Objects::    Временные cons и строки в стеке C.
* Memory Usage::        Информация об общем размере созданных на данный момент
                           Lisp-объектов.
* C Dialect::           На каком варианте C написан Emacs.
* Writing Emacs Primitives::   Написание кода C для Emacs.
* Writing Dynamic Modules::    Написание загружаемых модулей для Emacs.
* Object Internals::    Форматы данных буферов, окон, процессов.
* C Integer Types::     Как целочисленные типы C используются в Emacs.
@end menu

@node Building Emacs
@section Сборка Emacs
@cindex building Emacs
@pindex temacs

  В этом разделе объясняются шаги, необходимые для создания исполняемого файла Emacs.
Не обязательно знать этот материал для сборки и установки Emacs, поскольку make-файлы
делают все это автоматически.  Информация имеет отношение к разработчикам Emacs.

  Для сборки Emacs требуется GNU Make версии 3.81 или новее.

  Компиляция исходных файлов C в каталоге @file{src} создает исполняемый файл с именем
@file{temacs}, также называемый @dfn{чистый нечистый Emacs}.  Cодержит интерпретатор
Emacs Lisp и процедуры ввода-вывода, но без команд редактирования.

@cindex @file{loadup.el}
  Команда @w{@command{temacs -l loadup}} запустит @file{temacs} и направит его на
загрузку @file{loadup.el}.  Библиотека @code{loadup} загружает дополнительные
библиотеки Lisp, которые устанавливают обычную среду редактирования Emacs.  После
этого шага исполняемый файл Emacs больше не является @dfn{голым}.

@cindex dumping Emacs
  Поскольку загрузка стандартных файлов Lisp занимает некоторое время, исполняемый
файл @file{temacs} обычно не запускается пользователями напрямую.  Вместо этого в
качестве одного из последних шагов сборки Emacs запускается команда
@samp{temacs -batch -l loadup dump}.  Специальный аргумент @samp{dump} заставляет
@command{temacs} выгружать исполняемую программу, называемую @file{emacs}, в которую
предварительно загружены все стандартные файлы Lisp.  (Аргумент @samp{-batch}
предотвращает попытку @file{temacs} инициализировать какие-либо свои данные на
терминале, так что таблицы информации о терминале остаются пустыми в выгруженном
Emacs.)

@cindex preloaded Lisp files
@vindex preloaded-file-list
  Установлен дамп исполняемый файл @file{emacs} (также называемый @dfn{чистый} Emacs).
Переменная @code{preloaded-file-list} хранит список файлов Lisp, предварительно
загруженных в выгруженный Emacs.  Если перенести Emacs в новую операционную систему
и не иметь возможности реализовать дамп, то Emacs должен загружать @file{loadup.el}
при каждом запуске.

@cindex build details
@cindex deterministic build
@cindex @option{--disable-build-details} option to @command{configure}
  По умолчанию сбрасываемый исполняемый файл @file{emacs} записывает такие детали,
как время сборки и имя хоста.  Использовать опцию @option{--disable-build-details}
для @command{configure}, чтобы скрыть эти детали, так что сборка и установка Emacs
дважды из одних и тех же источников с большей вероятностью приведет к созданию
идентичных копий Emacs.

@cindex @file{site-load.el}
  Можно указать дополнительные файлы для предварительной загрузки, написав библиотеку
с именем @file{site-load.el}, которая их загружает.  Может потребоваться перестроить
Emacs с добавленным определением

@example
#define SITELOAD_PURESIZE_EXTRA @var{n}
@end example

@noindent
сделать @var{n} добавленными байтами чистого пространства для хранения дополнительных
файлов; смотреть @file{src/puresize.h}.
(Попробуйте добавить приращение 20000, пока оно не станет достаточно большим.)  Однако
преимущество предварительной загрузки дополнительных файлов уменьшается по мере того,
как машины становятся быстрее.  На современных машинах это обычно не рекомендуется.

  После того, как @file{loadup.el} читает @file{site-load.el}, находятся строки
документации для примитивных и предварительно загруженных функций (и переменных) в
файле @file{etc/DOC}, где они хранятся, путем вызова @code{Snarf-documentation}
(@pxref{Definition of Snarf-documentation,, Accessing Documentation}).

@cindex @file{site-init.el}
@cindex preloading additional functions and variables
  Можно указать другие выражения Lisp для выполнения непосредственно перед сбросом,
поместив их в библиотеку с именем @file{site-init.el}.  Этот файл запускается после
нахождения строк документации.

  Если требуется предварительно загрузить определения функций или переменных, есть три
способа сделать это и сделать их строки документации доступными при последующем
запуске Emacs:

@itemize @bullet
@item
Настроить сканирование этих файлов при создании файла @file{etc/DOC} и загрузите их
с помощью @file{site-load.el}.

@item
Загрузить файлы с помощью @file{site-init.el}, затем скопировать файлы в каталог
установки для файлов Lisp при установке Emacs.

@item
Задать значение @code{nil} для @code{byte-compile-dynamic-docstrings} как локальную
переменную в каждом из этих файлов и загрузить их с помощью @file{site-load.el} или
@file{site-init.el}.  (Этот метод имеет тот недостаток, что строки документации все
время занимают место в Emacs.)
@end itemize

@cindex change @code{load-path} at configure time
@cindex @option{--enable-locallisppath} option to @command{configure}
  Не рекомендуется помещать в @file{site-load.el} или @file{site-init.el} что-либо,
что изменило бы какие-либо функции, которые пользователи ожидают от обычного
немодифицированного Emacs.  Если чувствуется, что должны переопределиться обычные
функции сайта, сделать это с помощью @file{default.el}, чтобы пользователи могли
отменить изменения, если захочется.  @xref{Startup Summary}.  Обратить внимание, что
если @file{site-load.el} или @file{site-init.el} изменяет @code{load-path}, изменения
будут потеряны после сброса.  @xref{Library Search}.  Чтобы навсегда изменить
@code{load-path}, использовать опцию @option{--enable-locallisppath} для
@command{configure}.

  В пакете, который может быть предварительно загружен, иногда необходимо (или
полезно) отложить определенные вычисления до последующего запуска Emacs.  Подавляющее
большинство таких случаев связано со значениями настраиваемых переменных.  Например,
@code{tutorial-directory} - это предварительно загруженная переменная, определенная в
@file{startup.el}.  Значение по умолчанию устанавливается на основе
@code{data-directory}.  Переменная должна получить доступ к значению
@code{data-directory} при запуске Emacs, а не при его выгрузке, потому что исполняемый
файл Emacs, вероятно, был установлен в другом месте с момента его выгрузки.

@defun custom-initialize-delay symbol value
Функция откладывает инициализацию @var{symbol} до следующего запуска Emacs.  Обычно
используется эта функция, определённая со свойством @code{:initialize} настраиваемой
переменной.  (Аргумент @var{value} не используется и предоставляется только для
совместимости с формой, которую ожидает Custom.)
@end defun

В том маловероятном случае, если понадобится более общая функциональность, чем
предоставляет @code{custom-initialize-delay}, можно использовать
@code{before-init-hook} (@pxref{Startup Summary}).

@defun dump-emacs to-file from-file
@cindex unexec
Функция выгружает текущее состояние Emacs в исполняемый файл @var{to-file}.  Берется
символы из @var{from-file} (обычно это исполняемый файл @file{temacs}).

Если нужно использовать эту функцию в Emacs, который уже был выгружен, потребуется
запустить Emacs с @samp{-batch}.
@end defun

@node Pure Storage
@section Чистое Хранилище
@cindex pure storage

  Emacs Lisp использует два типа хранилища для созданных пользователем объектов Lisp:
@dfn{нормальное хранение} и @dfn{чистое хранилище}.  Обычное хранилище - это место,
где все новые данные, созданные во время сеанса Emacs, хранятся
(@pxref{Garbage Collection}).  Чистое хранилище используется для определенных данных в
предварительно загруженных стандартных файлах Lisp - данных, которые никогда не должны
изменяться во время фактического использования Emacs.

  Чистое хранилище выделяется только тогда, когда @command{temacs} загружает
стандартные предварительно загруженные библиотеки Lisp.  В файле @file{emacs} помечено
как доступный только для чтения (в операционных системах, которые это разрешают), так
что пространство памяти может совместно использоваться всеми заданиями Emacs,
запущенными на машине одновременно.  Чистое хранилище не расширяется; фиксированная
сумма выделяется при компиляции Emacs, и если этого недостаточно для предварительно
загруженных библиотек, @file{temacs} выделяет динамическую память для той части,
которая не подходит.  Полученное изображение будет работать, но сборщик мусора
(@pxref{Garbage Collection}) в этой ситуации отключен, что приведет к утечке памяти.
Такое переполнение обычно не происходит, если не попытаться предварительно загрузить
дополнительные библиотеки или добавить функции к стандартным.  Emacs отобразит
предупреждение о переполнении при запуске.  Если это произойдет, следует увеличить
параметр компиляции @code{SYSTEM_PURESIZE_EXTRA} в файле @file{src/puresize.h} и
пересобрать Emacs.

@defun purecopy object
Функция делает копию в чистом хранилище @var{object} и возвращает ее.  Копируется
строка, просто создавая новую строку с теми же символами, но без текстовых свойств, в
чистом хранилище.  Рекурсивно копирует содержимое векторов и cons-ячеек.  Не
копируются другие объекты, такие как символы, а просто возвращаются без изменений.
Сигнализируется об ошибке, если задано скопировать маркеры.

Функция не работает, кроме случаев, когда Emacs собирается и выгружается; обычно
вызывается только в предварительно загруженных файлах Lisp.
@end defun

@defvar pure-bytes-used
Значение этой переменной - количество байтов чистой памяти, выделенной на данный
момент.  Обычно в выгруженном Emacs это число очень близко к общему объему доступной
чистой памяти - в противном случае предварительно бы распределилось меньше.
@end defvar

@defvar purify-flag
Переменная определяет, должен ли @code{defun} делать копию определения функции в
чистом хранилище.  Если это не-@code{nil}, то определение функции копируется в чистое
хранилище.

Флаг имеет значение @code{t} при первоначальной загрузке всех основных функций для
сборки Emacs (что позволяет использовать эти функции совместно и не собирать).
Выгрузка Emacs как исполняемого файла всегда записывает @code{nil} в эту переменную,
независимо от того, какое значение она имеет до и после выгрузки.

Не нужно изменять этот флаг в работающем Emacs.
@end defvar

@node Garbage Collection
@section Сбор Мусора

@cindex memory allocation
  Когда программа создает список или пользователь определяет новую функцию (например,
загружая библиотеку), эти данные помещаются в обычное хранилище.  Если нормального
хранилища не хватает, Emacs просит операционную систему выделить больше памяти.
Различные типы объектов Lisp, такие как символы, cons-ячейки, небольшие векторы,
маркеры и так далее, разделены в отдельные блоки в памяти.  (Большие векторы, длинные
строки, буферы и некоторые другие типы редактирования, которые довольно большие,
выделяются отдельными блоками, по одному на объект; маленькие строки упаковываются в
блоки по 8 Кбайт, а маленькие векторы упаковываются в блоки по 4 Кбайт) .

@cindex vector-like objects, storage
@cindex storage of vector-like Lisp objects
  Помимо базового вектора, многие объекты, такие как окно, буфер и фрейм, управляются
так, как если бы они были векторами.  Соответствующие структуры данных C включают поле
@code{union vectorlike_header}, член @code{size} которого содержит подтип,
перечисляемый @code{enum pvec_type}, и информацию о том, сколько полей
@code{Lisp_Object} содержит эта структура и каков размер остальных данных.  Эта
информация необходима для расчета объема памяти, занимаемого объектом, и используется
кодом распределения векторов при итерации по векторным блокам.

@cindex garbage collection
  Довольно распространено использовать какое-то хранилище на некоторое время, а затем
освободить его, (например) уничтожив буфер или удалив последний указатель на объект.
Emacs предоставляет @dfn{сборщик мусора} для восстановления этого заброшенного
хранилища.  Сборщик мусора работает, находя и отмечая все объекты Lisp, которые все
еще доступны для программ на Lisp.  Для начала предполагается, что все символы, их
значения и соответствующие определения функций, а также любые данные, находящиеся в
настоящее время в стеке, доступны.  Также доступны любые объекты, которые могут быть
достигнуты косвенно через другие доступные объекты.

  Когда маркировка закончена, все объекты, которые еще не помечены, являются мусором.
Независимо от того, что делает программа на Lisp или пользователь, на них невозможно
сослаться, поскольку больше нет способа связаться с ними.  Их пространство с таким же
успехом можно использовать повторно, потому что никто не затронит больше их.  Вторая
фаза (очистка) сборщика мусора предусматривает их повторное использование.

@c ??? Может быть, добавить сюда что-нибудь, описывающее слабые хеш-таблицы?

@cindex free list
  Фаза развертки помещает неиспользуемые cons-ячейки в @dfn{свободный список} для
будущего распределения; то же самое для символов и маркеров.  Сжимаются доступные
строки, поэтому занимают меньше 8k блоков; затем освобождаются остальные 8k блоков.
Недостижимые векторы из векторных блоков объединяются для создания максимально
возможных свободных областей; если свободная область охватывает полный блок размером
4 КБ, этот блок освобождается.  В противном случае свободная область записывается в
массиве свободного списка, где каждая запись соответствует свободному списку областей
того же размера.  Большие векторы, буферы и другие большие объекты выделяются и
освобождаются индивидуально.

@cindex CL note---allocate more storage
@quotation
@b{Common Lisp Примечание:} В отличие от других Lisp, GNU Emacs Lisp не вызывает
сборщик мусора, когда список свободных мест пуст.  Вместо этого просто запрашивается у
операционной системы выделение большего объема памяти, и обработка продолжается до
тех пор, пока не будут использованы байты @code{gc-cons-threshold}.

Это означает, что можно убедиться, что сборщик мусора не будет запускаться во время
определенной части программы Lisp, явно вызвав сборщик мусора непосредственно перед
ним (при условии, что эта часть программы не использует столько места, чтобы
запустить второй раз сборщик мусора).
@end quotation

@deffn Command garbage-collect
Команда запускает сборку мусора и возвращает информацию об объеме используемого
пространства.  (Сборка мусора также может происходить спонтанно, если использовать
более @code{gc-cons-threshold} байтов данных Lisp с момента предыдущей сборки мусора.)

@code{garbage-collect} возвращает список с информацией об объеме используемого
пространства, где каждая запись имеет форму @samp{(@var{name} @var{size} @var{used})}
или @samp{(@var{name} @var{size} @var{used} @var{free})}.  В записи @var{name} - это
символ, описывающий тип объектов, которые представляет эта запись, @var{size} - это
количество байтов, используемых каждым из них, @var{used} - это количество тех
объектов, которые были обнаружены живыми в куче, а необязательный @var{free} -
количество тех объектов, которые не являются активными, но которые Emacs хранит для
будущих распределений.  Итак, общий результат:

@example
((@code{conses} @var{cons-size} @var{used-conses} @var{free-conses})
 (@code{symbols} @var{symbol-size} @var{used-symbols} @var{free-symbols})
 (@code{miscs} @var{misc-size} @var{used-miscs} @var{free-miscs})
 (@code{strings} @var{string-size} @var{used-strings} @var{free-strings})
 (@code{string-bytes} @var{byte-size} @var{used-bytes})
 (@code{vectors} @var{vector-size} @var{used-vectors})
 (@code{vector-slots} @var{slot-size} @var{used-slots} @var{free-slots})
 (@code{floats} @var{float-size} @var{used-floats} @var{free-floats})
 (@code{intervals} @var{interval-size} @var{used-intervals} @var{free-intervals})
 (@code{buffers} @var{buffer-size} @var{used-buffers})
 (@code{heap} @var{unit-size} @var{total-size} @var{free-size}))
@end example

Вот пример:

@example
(garbage-collect)
      @result{} ((conses 16 49126 8058) (symbols 48 14607 0)
                 (miscs 40 34 56) (strings 32 2942 2607)
                 (string-bytes 1 78607) (vectors 16 7247)
                 (vector-slots 8 341609 29474) (floats 8 71 102)
                 (intervals 56 27 26) (buffers 944 8)
                 (heap 1024 11715 2678))
@end example

Ниже приведена таблица, объясняющая каждый элемент.  Обратить внимание, что последняя
запись @code{heap} является необязательной и присутствует только в том случае, если
базовая реализация @code{malloc} предоставляет функцию @code{mallinfo}.

@table @var
@item cons-size
Внутренний размер cons-ячейки, то есть @code{sizeof (struct Lisp_Cons)}.

@item used-conses
Количество используемых cons-ячеек.

@item free-conses
Количество cons-ячеек, пространство для которых было получено из операционной системы,
но которые в настоящее время не используются.

@item symbol-size
Внутренний размер символа, то есть @code{sizeof (struct Lisp_Symbol)}.

@item used-symbols
Количество используемых символов.

@item free-symbols
Количество символов, пространство для которых было получено из операционной системы,
но которые в настоящее время не используются.

@item misc-size
Внутренний размер другой сущности, то есть @code{sizeof (union Lisp_Misc)}, который
является размером самого большого типа, перечисленного в @code{enum Lisp_Misc_Type}.

@item used-miscs
Количество используемых разных объектов.  К ним относятся маркеры и наложения, а
также некоторые объекты, невидимые для пользователей.

@item free-miscs
Количество разных объектов, для которых из операционной системы было получено
пространство, но которые в настоящее время не используются.

@item string-size
Внутренний размер заголовка строки, то есть @code{sizeof (struct Lisp_String)}.

@item used-strings
Количество используемых заголовков строк.

@item free-strings
Количество строковых заголовков, пространство для которых было получено из
операционной системы, но которые в настоящее время не используются.

@item byte-size
Используется для удобства и равно @code{sizeof (char)}.

@item used-bytes
Общий размер всех строковых данных в байтах.

@item vector-size
Внутренний размер векторного заголовка, то есть @code{sizeof (struct Lisp_Vector)}.

@item used-vectors
Количество векторных заголовков, выделенных из векторных блоков.

@item slot-size
Внутренний размер слота вектора, всегда равен @code{sizeof (Lisp_Object)}.

@item used-slots
Количество слотов во всех используемых векторах.

@item free-slots
Количество свободных слотов во всех векторных блоках.

@item float-size
Внутренний размер объекта типа float, то есть @code{sizeof (struct Lisp_Float)}.
(Не путать с родной платформой @code{float} или @code{double}.)

@item used-floats
Число использования floats.

@item free-floats
Число чисел с плавающей запятой, пространство для которых было получено из
операционной системы, но которые в настоящее время не используются.

@item interval-size
Внутренний размер интервального объекта, то есть @code{sizeof (struct interval)}.

@item used-intervals
Количество используемых интервалов.

@item free-intervals
Количество интервалов, для которых пространство было получено из операционной
системы, но в настоящее время не используется.

@item buffer-size
Внутренний размер буфера, то есть @code{sizeof (struct buffer)}.
(Не путать со значением, возвращаемым функцией @code{buffer-size}.)

@item used-buffers
Количество используемых буферных объектов.  Это включает убитые буферы, невидимые
для пользователей, то есть все буферы в списке @code{all_buffers}.

@item unit-size
Единица измерения пространства кучи, всегда равная 1024 байтам.

@item total-size
Общий размер кучи в единицах @var{unit-size}.

@item free-size
Пространство кучи, которое в настоящее время не используется, в единицах
@var{unit-size}.
@end table

Если было переполнение в чистом пространстве (@pxref{Pure Storage}),
@code{garbage-collect} возвращает @code{nil}, потому что настоящая сборка мусора
не может быть выполнена.
@end deffn

@defopt garbage-collection-messages
Если переменная - не-@code{nil}, Emacs отображает сообщение в начале и в конце
сборки мусора.  Значение по умолчанию - @code{nil}.
@end defopt

@defvar post-gc-hook
Нормальный перехватчик, который запускается в конце сборки мусора.  Сборка мусора
запрещена во время выполнения функций перехватчика, поэтому буть осторожным при их
написании.
@end defvar

@defopt gc-cons-threshold
Значение этой переменной - количество байтов памяти, которые должны быть выделены для
объектов Lisp после одной сборки мусора, чтобы запустить другую сборку мусора.  Можно
использовать результат, возвращаемый @code{garbage-collect}, для получения информации
о размере конкретного типа объекта; пространство, выделенное для содержимого буферов,
не учитывается.  Обратить внимание, что последующая сборка мусора не происходит сразу
после того, как порог исчерпан, а только при следующем вызове интерпретатора Lisp.

Начальное пороговое значение - @code{GC_DEFAULT_THRESHOLD}, определенное в
@file{alloc.c}.  Поскольку это определено в единицах @code{word_size}, значение
составляет 400 000 для 32-битной конфигурации по умолчанию и 800 000 для 64-битной.
Если указать большее значение, сборка мусора будет происходить реже.  Это сокращает
время, затрачиваемое на сборку мусора, но увеличивает общее использование памяти.
Можно захотеть сделать это при запуске программы, которая создает много данных на
Lisp.

Можно сделать сборы более частыми, указав меньшее значение, вплоть до 1/10 от
@code{GC_DEFAULT_THRESHOLD}.  Значение меньше этого минимума будет действовать только
до следующей сборки мусора, после чего @code{garbage-collect} вернет порог обратно на
минимум.
@end defopt

@defopt gc-cons-percentage
Значение этой переменной указывает количество потребляемых ресурсов до того, как
произойдет сборка мусора, как часть текущего размера кучи.  Этот критерий и
@code{gc-cons-threshold} применяются параллельно, и сборка мусора происходит только
тогда, когда оба критерия удовлетворяются.

По мере увеличения размера кучи время выполнения сборки мусора увеличивается.  Таким
образом, может быть желательно делать их реже пропорционально.
@end defopt

  Значение, возвращаемое @code{garbage-collect}, описывает объем памяти, используемый
данными Lisp, с разбивкой по типам данных.  Напротив, функция @code{memory-limit}
предоставляет информацию об общем объеме памяти, используемой Emacs в настоящее время.

@defun memory-limit
Функция возвращает адрес последнего выделенного Emacs байта, деленный на 1024.
Делится значение на 1024, чтобы убедиться, что оно соответствует целому числу Lisp.

Можно использовать это, чтобы получить общее представление о том, как действия влияют
на использование памяти.
@end defun

@defvar memory-full
Переменная @code{t}, если в Emacs почти не хватает памяти для объектов Lisp, и
@code{nil} в противном случае.
@end defvar

@defun memory-use-counts
Возвращает список чисел, которые подсчитывают количество объектов, созданных в этом
сеансе Emacs.  Каждый из этих счетчиков увеличивается для определенного типа объекта.
Смотреть подробности в строке документации.
@end defun

@defun memory-info
Функция возвращает общий объем системной памяти и ее объем.  В неподдерживаемой
системе значение может быть @code{nil}.
@end defun

@defvar gcs-done
Переменная содержит общее количество сборок мусора, выполненных на данный момент в
этом сеансе Emacs.
@end defvar

@defvar gc-elapsed
Переменная содержит общее количество секунд, прошедшее с момента сборки мусора в этом
сеансе Emacs, в виде числа с плавающей запятой.
@end defvar

@node Stack-allocated Objects
@section Объекты, Размещенные в Стеке

@cindex stack allocated Lisp objects
@cindex Lisp objects, stack-allocated
  Описанный выше сборщик мусора используется для управления данными, видимыми из
программ Lisp, а также большей частью данных, используемых внутри интерпретатора Lisp.
Иногда может быть полезно выделить временные внутренние объекты с помощью стека C
интерпретатора.  Это может повысить производительность, поскольку выделение стека
обычно происходит быстрее, чем использование памяти кучи для выделения сборщику
мусора и для ее освобождения.  Обратной стороной является то, что использование таких
объектов после их освобождения приводит к неопределенному поведению, поэтому
использование должно быть хорошо продумано и тщательно отлажено с помощью функции
@code{GC_CHECK_MARKED_OBJECTS} (смотреть @file{src/alloc.c}).  В частности, объекты,
размещенные в стеке, никогда не должны быть видимыми для пользовательского кода Lisp.

  В настоящее время таким образом можно размещать cons-ячейки и строки.  Это
реализовано макросами C, такими как @code{AUTO_CONS} и @code{AUTO_STRING}, которые
определяют именованный @code{Lisp_Object} со временем жизни блока.  Сборщик мусора не
освобождает эти объекты; вместо этого они имеют автоматическую продолжительность
хранения, то есть они выделяются как локальные переменные и автоматически
освобождаются в конце выполнения блока C, который определил объект.

  По соображениям производительности строки, выделенные стеком, ограничены символами
@acronym{ASCII}, и многие из этих строк являются неизменяемыми, то есть вызов
@code{ASET} для них приводит к неопределенному поведению.

@node Memory Usage
@section Использование Памяти
@cindex memory usage

  Функции и переменные предоставляют информацию об общем объеме памяти, выделенной
Emacs, с разбивкой по типам данных.  Обратить внимание на разницу между ними и
значениями, возвращаемыми @code{garbage-collect}; эти подсчитывают объекты, которые в
настоящее время существуют, но подсчитывают количество или размер всех выделений,
в том числе для объектов, которые уже были освобождены.

@defvar cons-cells-consed
Общее количество cons-ячеек, выделенных на данный момент в этом сеансе Emacs.
@end defvar

@defvar floats-consed
Общее количество чисел с плавающей запятой, выделенных на данный момент в этом
сеансе Emacs.
@end defvar

@defvar vector-cells-consed
Общее количество векторных ячеек, выделенных на данный момент в этом сеансе Emacs.
@end defvar

@defvar symbols-consed
Общее количество символов, выделенных на данный момент в этом сеансе Emacs.
@end defvar

@defvar string-chars-consed
Общее количество строковых символов, выделенных на данный момент в этом сеансе.
@end defvar

@defvar misc-objects-consed
Общее количество разных объектов, выделенных на данный момент в этом сеансе.  К ним
относятся маркеры и наложения, а также некоторые объекты, невидимые для пользователей.
@end defvar

@defvar intervals-consed
Общее количество интервалов, выделенных на данный момент в этом сеансе Emacs.
@end defvar

@defvar strings-consed
Общее количество строк, выделенных на данный момент в этом сеансе Emacs.
@end defvar

@node C Dialect
@section C Диалект
@cindex C programming language

Часть C Emacs переносима на C99 или новее: специфичные для C11 особенности, такие как
@samp{<stdalign.h>} и @samp{_Noreturn}, не используются без проверки, обычно во время
настройки, а процедура сборки Emacs предоставляет заменяющую реализацию, если это
необходимо.  Некоторые функции C11, такие как анонимные структуры и объединения,
слишком сложно имитировать, поэтому их полностью избегают.

В какой-то момент в будущем базовый диалект C, несомненно, изменится на C11.

@node Writing Emacs Primitives
@section Написание Примитивов Emacs
@cindex primitive function internals
@cindex writing Emacs primitives

  Примитивы Lisp - это функции Lisp, реализованные в C@.  Детали взаимодействия с
функцией C, чтобы Lisp мог ее вызывать, обрабатываются несколькими макросами C.
Единственный способ понять, как писать новый код на C, - это прочитать исходный код,
но можно объяснить некоторые вещи здесь.

  Примером специальной формы является определение @code{or} из @file{eval.c}.
(Обычная функция будет иметь такой же общий вид.)

@smallexample
@group
DEFUN ("or", For, Sor, 0, UNEVALLED, 0,
       doc: /* Вычислять аргументы,
пока один из них не даст non-nil,
затем вернуть это значение. Остальные аргументы
вообще не вызываются.  Если все аргументы
возвращают nil, возвращается nil.
@end group
@group
usage: (or CONDITIONS...)  */)
  (Lisp_Object args)
@{
  Lisp_Object val = Qnil;
@end group

@group
  while (CONSP (args))
    @{
      val = eval_sub (XCAR (args));
      if (!NILP (val))
        break;
      args = XCDR (args);
      maybe_quit ();
    @}
@end group

@group
  return val;
@}
@end group
@end smallexample

@cindex @code{DEFUN}, макрос C для определения примитивов Lisp
  Начнем с точного объяснения аргументов макроса @code{DEFUN}.
Вот шаблон для них:

@example
DEFUN (@var{lname}, @var{fname}, @var{sname}, @var{min}, @var{max}, @var{interactive}, @var{doc})
@end example

@table @var
@item lname
Имя символа Lisp, определяемого как имя функции; в приведенном выше примере это
@code{or}.

@item fname
Имя функции C для функции.  Имя, которое используется в коде C для вызова функции.
По соглашению, имя @samp{F} добавляется к имени Lisp, а все дефисы (@samp{-}) в имени
Lisp заменены на символы подчеркивания.  Таким образом, чтобы вызвать эту функцию из
кода C, вызвать @code{For}.

@item sname
Имя переменной C для использования в структуре, содержащей данные для объекта subr,
представляющего функцию в Lisp.  Эта структура передает имя символа Lisp в процедуру
инициализации, которая создаст символ и сохранит объект subr в качестве его
определения.  По соглашению это имя всегда @var{fname} с заменой @samp{F} на @samp{S}.

@item min
Минимальное количество аргументов, которое требуется функции.  Функция @code{or}
допускает минимум ноль аргументов.

@item max
Максимальное количество аргументов, которое принимает функция, если есть фиксированный
максимум.  В качестве альтернативы это может быть @code{UNEVALLED}, указывающий на
специальную форму, которая принимает неоцененные аргументы, или @code{MANY},
указывающий неограниченное количество оцениваемых аргументов (эквивалент
@code{&rest}).  Оба @code{UNEVALLED} и @code{MANY} - это макросы.  Если @var{max} -
число, оно должно быть больше @var{min}, но меньше 8.

@cindex interactive specification in primitives
@item interactive
Интерактивная спецификация, строка, которая может использоваться в качестве аргумента
@code{interactive} в Lisp-функции (@pxref{Using Interactive}).  В случае @code{or}
это @code{0} (нулевой указатель), указывающий на то, что @code{or} не может быть
вызвано интерактивно.  Значение @code{""} указывает на функцию, которая не должна
получать аргументов при интерактивном вызове.  Если значение начинается с @samp{"(},
строка оценивается как форма Lisp.  Например:

@example
@group
DEFUN ("foo", Ffoo, Sfoo, 0, 3,
       "(list (read-char-by-name \"Insert character: \")\
              (prefix-numeric-value current-prefix-arg)\
              t)",
       doc: /* @dots{} */)
@end group
@end example

@item doc
Строка документации.  Используется синтаксис комментариев C, а не синтаксис строки C,
потому что синтаксис комментариев не требует ничего особенного для включения
нескольких строк.  @samp{doc:} идентифицирует следующий комментарий как строку
документации.  Разделители @samp{/*} и @samp{*/}, которые начинают и заканчивают
комментарий, не являются частью строки документации.

Если последняя строка строки документации начинается с ключевого слова @samp{usage:},
остальная часть строки рассматривается как список аргументов для целей документации.
Таким образом, можно использовать в строке документации имена аргументов, отличные от
тех, которые используются в коде C.  @samp{usage:} требуется, если функция имеет
неограниченное количество аргументов.

Все обычные правила для строк документации в коде Lisp (@pxref{Documentation Tips})
применимы и к строкам документации на языке C.

За строкой документации может следовать список атрибутов функции C для функции C,
реализующей примитив, например:

@example
@group
DEFUN ("bar", Fbar, Sbar, 0, UNEVALLED, 0
       doc: /* @dots{} */
       attributes: @var{attr1} @var{attr2} @dots{})
@end group
@end example

@noindent
Можно указать более одного атрибута один за другим.  В настоящее время распознаются
только следующие атрибуты:

@table @code
@item noreturn
Объявляет функцию C как функцию, которая никогда не возвращается.  Это соответствует
ключевому слову @code{_Noreturn} C11 и атрибуту
@w{@code{__attribute__ ((__noreturn__))}} GCC
(@pxref{Function Attributes,,, gcc, Using the GNU Compiler Collection}).

@item const
Объявляет, что функция не проверяет никаких значений, кроме своих аргументов, и не
имеет никаких эффектов, кроме возвращаемого значения.  Это соответствует атрибуту 
@w{@code{__attribute__ ((__const__))}} GCC.

@item noinline
Соответствует атрибуту @w{@code{__attribute__ ((__noinline__))}} GCC, который
предотвращает рассмотрение функции для встраивания.  Это может потребоваться,
например, для предотвращения эффектов оптимизации времени компоновки для переменных
на основе стека.
@end table

@end table

  После вызова макроса @code{DEFUN} требуется написать список аргументов для функции
C, включая типы для аргументов.  Если примитив принимает фиксированное максимальное
количество аргументов Lisp, должен быть один аргумент C для каждого аргумента Lisp и
каждый аргумент должен иметь тип @code{Lisp_Object}.  (Различные макросы и функции для
создания значений типа @code{Lisp_Object} объявлены в файле @file{lisp.h}.)  Если
примитив является специальной формой, должен принимать список Lisp, содержащий его
неоцененные аргументы Lisp, как единственный аргумент типа @code{Lisp_Object}.  Если
примитив не имеет верхнего предела на количество вычисляемых аргументов Lisp, должен
иметь ровно два аргумента C: первый - это количество аргументов Lisp, а второй - это
адрес блока, содержащего их значения.  У них есть типы @code{ptrdiff_t} и
@w{@code{Lisp_Object *}} соответственно.  Поскольку @code{Lisp_Object} может содержать
любой объект Lisp любого типа данных, можно определить фактический тип данных только
во время выполнения; поэтому, если требуется, чтобы примитив принимал аргумент только
определенного типа, нужно явно проверить тип, используя подходящий предикат
(@pxref{Type Predicates}).
@cindex type checking internals

@cindex garbage collection protection
@cindex protect C variables from garbage collection
  Внутри самой функции @code{For} локальная переменная @code{args} ссылается на
объекты, контролируемые сборщиком мусора Emacs с маркировкой стека.  Хотя сборщик
мусора не восстанавливает объекты, доступные из переменных стека C @code{Lisp_Object},
он может перемещать некоторые компоненты объекта, такие как содержимое строки или
текст буфера.  Следовательно, функции, которые обращаются к этим компонентам, должны
позаботиться о том, чтобы повторно получить их адреса после выполнения оценки Lisp.
Это означает, что вместо сохранения указателей C на содержимое строки или текст
буфера, код должен сохранять позицию буфера или строки и пересчитывать указатель C из
этой позиции после выполнения оценки Lisp.  Оценка Lisp может происходить через
вызовы @code{eval_sub} или @code{Feval}, прямо или косвенно.

@cindex @code{maybe_quit}, use in Lisp primitives
  Обратить внимание на вызов @code{maybe_quit} внутри цикла: эта функция проверяет,
нажал ли пользователь @kbd{C-g}, и, если да, прерывает обработку.  Потребуется делать
это в любом цикле, который потенциально может потребовать большого количества
итераций; в этом случае список аргументов может быть очень длинным.  Это увеличивает
скорость отклика Emacs и улучшает взаимодействие с пользователем.

  Не требуется использовать инициализаторы C для статических или глобальных
переменных, если только переменные никогда не записываются после сброса Emacs.  Эти
переменные с инициализаторами размещаются в области памяти, которая становится
доступной только для чтения (в некоторых операционных системах) в результате сброса
Emacs.  @xref{Pure Storage}.

@cindex @code{defsubr}, Lisp symbol for a primitive
  Определения функции C недостаточно, чтобы сделать примитив Lisp доступным; также
потребуется создать символ Lisp для примитива и сохранить подходящий объект subr в
его функциональной ячейке.  Код выглядит так:

@example
defsubr (&@var{sname});
@end example

@noindent
Здесь @var{sname} - это имя, которое вы использовали в качестве третьего аргумента
@code{DEFUN}.

  Если добавляется новый примитив в файл, в котором уже определены примитивы Lisp,
найть функцию (в конце файла) с именем @code{syms_of_@var{something}} и добавить туда
вызов @code{defsubr}.  Если в файле нет этой функции или если создаётся новый файл,
добавить к нему @code{syms_of_@var{filename}} (например, @code{syms_of_myfile}).
Затем найтидите место в @file{emacs.c}, где вызываются все эти функции, и добавьте туда вызов @code{syms_of_@var{filename}}.

@anchor{Defining Lisp variables in C}
@vindex byte-boolean-vars
@cindex defining Lisp variables in C
@cindex @code{DEFVAR_INT}, @code{DEFVAR_LISP}, @code{DEFVAR_BOOL}
  Функция @code{syms_of_@var{filename}} также является местом для определения любых
переменных C, которые должны быть видны как переменные Lisp.  @code{DEFVAR_LISP}
делает переменную C типа @code{Lisp_Object} видимой в Lisp.  @code{DEFVAR_INT} делает
переменную C типа @code{int} видимой в Lisp со значением, которое всегда является
целым числом.  @code{DEFVAR_BOOL} делает переменную C типа @code{int} видимой в Lisp
со значением @code{t} или @code{nil}.  Обратить внимание, что переменные, определенные
с помощью @code{DEFVAR_BOOL}, автоматически добавляются в список
@code{byte-boolean-vars}, используемый компилятором байтов.

@cindex defining customization variables in C
  Если нужно, чтобы переменная Lisp, определенная в C, вела себя как переменная,
объявленная с помощью @code{defcustom}, добавить соответствующую запись в
@file{cus-start.el}.

@cindex @code{staticpro}, protection from GC
  Если определяется переменная C файловой области типа @code{Lisp_Object}, потребуется
защитить ее от сборки мусора, вызвав @code{staticpro} в @code{syms_of_@var{filename}},
например:

@example
staticpro (&@var{variable});
@end example

  Вот еще один пример функции с более сложными аргументами.  Это происходит из кода в
@file{window.c}, и он демонстрирует использование макросов и функций для управления
объектами Lisp.

@smallexample
@group
DEFUN ("coordinates-in-window-p", Fcoordinates_in_window_p,
       Scoordinates_in_window_p, 2, 2, 0,
       doc: /* Return non-nil if COORDINATES are in WINDOW.
  @dots{}
@end group
@group
  or `right-margin' is returned.  */)
  (register Lisp_Object coordinates, Lisp_Object window)
@{
  struct window *w;
  struct frame *f;
  int x, y;
  Lisp_Object lx, ly;
@end group

@group
  w = decode_live_window (window);
  f = XFRAME (w->frame);
  CHECK_CONS (coordinates);
  lx = Fcar (coordinates);
  ly = Fcdr (coordinates);
  CHECK_NUMBER (lx);
  CHECK_NUMBER (ly);
  x = FRAME_PIXEL_X_FROM_CANON_X (f, lx) + FRAME_INTERNAL_BORDER_WIDTH (f);
  y = FRAME_PIXEL_Y_FROM_CANON_Y (f, ly) + FRAME_INTERNAL_BORDER_WIDTH (f);
@end group

@group
  switch (coordinates_in_window (w, x, y))
    @{
    case ON_NOTHING:            /* NOT in window at all.  */
      return Qnil;
@end group

    @dots{}

@group
    case ON_MODE_LINE:          /* In mode line of window.  */
      return Qmode_line;
@end group

    @dots{}

@group
    case ON_SCROLL_BAR:         /* On scroll-bar of window.  */
      /* Historically we are supposed to return nil in this case.  */
      return Qnil;
@end group

@group
    default:
      emacs_abort ();
    @}
@}
@end group
@end smallexample

  Обратить внимание, что код C не может вызывать функции по имени, если они не
определены в C@.  Способ вызова функции, написанной на Lisp, заключается в
использовании @code{Ffuncall}, который воплощает функцию Lisp @code{funcall}.
Поскольку функция Lisp @code{funcall} принимает неограниченное количество аргументов,
в C она принимает два: количество аргументов уровня Lisp и одномерный массив,
содержащий их значения.  Первый аргумент уровня Lisp - это вызываемая функция Lisp,
а остальные - аргументы, передаваемые ей.

  Функции языка C @code{call0}, @code{call1}, @code{call2} и так далее предоставляют
удобные способы вызова функции Lisp с фиксированным числом аргументов.  Работают,
вызывая @code{Ffuncall}.

  @file{eval.c} - очень хороший файл для поиска примеров; @file{lisp.h} содержит
определения некоторых важных макросов и функций.

  Если определяется функция без побочных эффектов, присвоить ей свойство не-@code{nil}
@code{side-effect-free} или @code{pure}, соответственно (@pxref{Standard Properties}).

@node Writing Dynamic Modules
@section Написание Динамически Загружаемых Модулей
@cindex writing emacs modules
@cindex dynamic modules, writing

@cindex module @acronym{API}
  В этом разделе описывается модуль @acronym{API} Emacs и его использование при
написании модулей расширения для Emacs.  Модуль @acronym{API} определен на языке
программирования C, поэтому описание и примеры в этом разделе предполагают, что
модуль написан на C@.  Для других языков программирования нужно будет использовать
соответствующие привязки, интерфейсы и средства для вызова кода C.  Для кода Emacs C
требуется компилятор (@pxref{C Dialect}) C99 или более поздней версии, поэтому
примеры кода в этом разделе также соответствуют этому стандарту.

Написание модуля и его интеграция в Emacs включает следующие задачи:

@itemize @bullet
@item
Написание кода инициализации модуля.

@item
Написание одной или нескольких функций модуля.

@item
Обмен значениями и объектами между Emacs и функциями вашего модуля.

@item
Обработка ошибок и нелокальных выходов.
@end itemize

@noindent
В следующих подразделах более подробно описаны эти задачи и само @acronym{API}.

После того, как модуль написан, скомпилировать его для создания общей библиотеки в
соответствии с соглашениями базовой платформы.  Затем поместить разделяемую библиотеку
в каталог, упомянутый в @code{load-path} (@pxref{Library Search}), где Emacs найдет
ее.

Если требуется проверить соответствие модуля динамическому модулю Emacs @acronym{API},
вызвать Emacs с опцией @kbd{--module-assertions}.
@xref{Initial Options,,,emacs, The GNU Emacs Manual}.

@menu
* Module Initialization::
* Module Functions::
* Module Values::
* Module Misc::
* Module Nonlocal::
@end menu

@node Module Initialization
@subsection Код Инициализации Модуля
@cindex module initialization

  Начать свой модуль с включения заголовочного файла @file{emacs-module.h} и
определения символа совместимости с GPL:

@example
#include <emacs-module.h>

int plugin_is_GPL_compatible;
@end example

Файл @file{emacs-module.h} устанавливается в дерево включения системы как часть
установки Emacs.  Кроме того, можно найти его в дереве исходных текстов Emacs.

@anchor{module initialization function}
Затем пишется функцию инициализации для модуля.

@deftypefn Function int emacs_module_init (struct emacs_runtime *@var{runtime})
Emacs вызывает эту функцию, когда загружает модуль.  Если модуль не экспортирует
функцию с именем @code{emacs_module_init}, попытка загрузить модуль будет
сигнализировать об ошибке.  Функция инициализации должна возвращать ноль, если
инициализация прошла успешно, в противном случае - ненулевое значение.  В последнем
случае Emacs сообщит об ошибке, и загрузка модуля завершится неудачно.  Если
пользователь нажимает @kbd{C-g} во время инициализации, Emacs игнорирует возвращаемое
значение функции инициализации и выходит из (@pxref{Quitting}).  (При необходимости
можно поймать завершение работы пользователя внутри функции инициализации
@pxref{should_quit}.)

Аргумент @var{runtime} - это указатель на объект C @code{struct}, который включает
2 открытых поля: @code{size}, который предоставляет размер структуры в байтах; и
@code{get_environment}, который предоставляет указатель на функцию, которая позволяет
функции инициализации модуля получить доступ к объекту среды Emacs и его интерфейсам.

Функция инициализации должна выполнять любую инициализацию, необходимую для модуля.
Кроме того, может выполнять следующие задачи:

@table @asis
@cindex compatibility, between modules and Emacs
@item Compatibility verification
Модуль может проверить, что исполняемый файл Emacs, который загружает модуль,
совместим с модулем, сравнив член @code{size} структуры @var{runtime} со значением,
скомпилированным в модуль:

@example
int
emacs_module_init (struct emacs_runtime *ert)
@{
  if (ert->size < sizeof (*ert))
    return 1;
@}
@end example

@noindent
Если размер объекта среды выполнения, переданного модулю, меньше ожидаемого, это
означает, что модуль был скомпилирован для более новой (более поздней) версии Emacs,
чем та, которая пытается его загрузить, то есть@: модуль может быть несовместим с
двоичным файлом Emacs.

Кроме того, модуль может проверить совместимость модуля @acronym{API} с тем, что
модуль ожидает.  В следующем примере кода предполагается, что он является частью
функции @code{emacs_module_init}, показанной выше:

@example
  emacs_env *env = ert->get_environment (ert);
  if (env->size < sizeof (*env))
    return 2;
@end example

@noindent
@cindex module runtime environment
Вызывает функцию @code{get_environment}, используя указатель, предоставленный в
структуре @code{runtime}, для получения указателя на @acronym{API} @dfn{environment},
C @code{struct}, который также имеет поле @code{size}, содержащее размер структуры в
байтах.

Наконец, можно написать модуль, который будет работать со старыми версиями Emacs,
сравнив размер среды, передаваемой Emacs, с известными размерами, например:

@example
  emacs_env *env = ert->get_environment (ert);
  if (env->size >= sizeof (struct emacs_env_26))
    emacs_version = 26;  /* Emacs 26 or later.  */
  else if (env->size >= sizeof (struct emacs_env_25))
    emacs_version = 25;
  else
    return 2; /* Unknown or unsupported version.  */
@end example

@noindent
Это работает, потому что более поздние версии Emacs всегда @emph{добавляют} члены в
среду, никогда не @emph{удаляют} какие-либо члены , поэтому размер может увеличиваться
только с новыми выпусками Emacs.  Учитывая версию Emacs, модуль может использовать
только те части модуля @acronym{API}, которые существовали в этой версии, поскольку
эти части идентичны в более поздних версиях.

Рекомендуется, чтобы модули всегда выполняли проверку совместимости, если только они
не выполняют свою работу полностью в функции инициализации, и не обращаются к
каким-либо объектам Lisp и не используют какие-либо функции Emacs, доступные через
структуру среды.

@item Binding module functions to Lisp symbols
Дает имена функциям модуля, чтобы код Lisp мог вызывать их по этому имени.  Описано,
как это сделать, в @ref{Module Functions} ниже.
@end table
@end deftypefn

@node Module Functions
@subsection Написание Функций Модуля
@cindex writing module functions
@cindex module functions

  Основная причина написания модуля Emacs - сделать дополнительные функции доступными
для программ на Lisp, которые загружают модуль.  В этом подразделе описывается, как
писать такие @dfn{функции модуля}.

Функция модуля имеет следующую общую форму и подпись:

@deftypefn Function emacs_value module_func (emacs_env *@var{env}, ptrdiff_t @var{nargs}, emacs_value *@var{args}, void *@var{data})
Аргумент @var{env} предоставляет указатель на среду @acronym{API}, необходимый для
доступа к объектам и функциям Emacs.  Аргумент @var{nargs} - это необходимое
количество аргументов, которое может быть нулевым (смотреть @code{make_function} ниже
для более гибкого указания номера аргумента), а @var{args} - указатель на массив
аргументов функции.  Аргумент @var{data} указывает на дополнительные данные,
необходимые для функции, которые были упорядочены при вызове @code{make_function}
(смотреть ниже) для создания функции Emacs из @code{module_func}.

Функции модуля используют тип @code{emacs_value} для связи объектов Lisp между Emacs и
модулем (@pxref{Module Values}).  @acronym{API}, описанный ниже и в следующих
подразделах, предоставляет средства для преобразования между базовыми типами данных
C и соответствующими объектами @code{emacs_value}.

Функция модуля всегда возвращает значение.  Если функция возвращается нормально, код
Lisp, который ее вызвал, увидит объект Lisp, соответствующий значению
@code{emacs_value}, которое вернула функция.  Однако, если пользователь набрал
@kbd{C-g}, или если функция модуля или ее вызываемые объекты сигнализировали об ошибке
или выходили (@pxref{Module Nonlocal}) нелокально, Emacs проигнорирует возвращаемое
значение и завершит работу или выбросит, как это происходит, когда код Lisp
встречается с теми же ситуациями.
@end deftypefn

После написания кода C для функции модуля потребуется создать из него объект функции
Lisp, используя функцию @code{make_function}, указатель которой предоставляется в
среде (напоминается, что указатель на среду возвращается функцией
@code{get_environment}).  Обычно это делается в функции инициализации модуля
(@pxref{module initialization function}) после проверки совместимости @acronym{API}.

@deftypefn Function emacs_value make_function (emacs_env *@var{env}, ptrdiff_t @var{min_arity}, ptrdiff_t @var{max_arity}, subr @var{func}, const char *@var{docstring}, void *@var{data})
@vindex emacs_variadic_function
Возвращает функцию Emacs, созданную из функции C @var{func}, сигнатура которой такая
же, как описано для @code{module_func} выше (предполагается, что здесь @code{typedef}
как @code{subr}).  Аргументы @var{min_arity} и @var{max_arity} определяют минимальное
и максимальное количество аргументов, которые может принимать @var{func}.  Аргумент
@var{max_arity} может иметь специальное значение @code{emacs_variadic_function},
которое заставляет функцию принимать неограниченное количество аргументов, как
ключевое слово @code{&rest} в Lisp (@pxref{Argument List}).

Аргумент @var{data} - это способ организовать передачу произвольных дополнительных
данных в @var{func} при её вызове.  Любой указатель, переданный в
@code{make_function}, будет передан в @var{func} без изменений.

Аргумент @var{docstring} указывает строку документации для функции.  Это должна быть
либо строка @acronym{ASCII}, либо строка не-@acronym{ASCII} в кодировке UTF-8, либо
указатель @code{NULL}; в последнем случае у функции не будет документации.  Строка
документации может заканчиваться строкой, определяющей объявленное соглашение о
вызовах, смотреть @ref{Function Documentation}.

Поскольку каждая функция модуля должна принимать указатель на среду в качестве своего
первого аргумента, вызов @code{make_function} может быть выполнен из любой функции
модуля, но обычно требуется сделать это из функции инициализации модуля, чтобы все
функции модуля были известны в Emacs после загрузки модуля.
@end deftypefn

Наконец, нужно привязать функцию Lisp к символу, чтобы код Lisp мог вызывать эту
функцию по имени.  Для этого использовать модуль @acronym{API} функции @code{intern}
(@pxref{intern}), указатель которого также предоставляется в среде, к которой могут
обращаться функции модуля.

Комбинируя вышеперечисленные шаги, код, который организует возможность вызова функции
@code{module_func} в C как @code{module-func} из Lisp, будет выглядеть так, как часть
функции инициализации модуля:

@example
 emacs_env *env = ert->get_environment (ert);
 emacs_value func = env->make_function (env, min_arity, max_arity,
                                        module_func, docstring, data);
 emacs_value symbol = env->intern (env, "module-func");
 emacs_value args[] = @{symbol, func@};
 env->funcall (env, env->intern (env, "defalias"), 2, args);
@end example

@noindent
Это делает символ @code{module-func} известным Emacs, вызывая @code{env->intern}, а
затем вызывается @code{defalias} из Emacs для привязки функции к этому символу.
Обратить внимание, что можно использовать @code{fset} вместо @code{defalias};
различия описаны в @ref{Defining Functions, defalias}.

Используя модуль @acronym{API}, можно определять более сложные функции и типы данных:
интерактивные функции, встроенные функции, макросы и так далее.  Однако результирующий
код C будет громоздким и трудным для чтения.  Поэтому рекомендуется ограничить код
модуля, который создает функции и структуры данных, до абсолютного минимума, а
остальное оставить для пакета Lisp, который будет сопровождать модуль, потому что
выполнение этих дополнительных задач в Lisp намного проще и приведет к гораздо более
читаемому коду.  Например, учитывая функцию модуля @code{module-func}, определенную,
как указано выше, один из способов создания на ее основе интерактивной команды
@code{module-cmd} - это использовать следующую простую оболочку Lisp:

@lisp
(defun module-cmd (&rest args)
  "Строка документации для команды."
  (interactive @var{spec})
  (apply 'module-func args))
@end lisp

Пакет Lisp, который идет с модулем, может затем загрузить модуль, используя примитив
@code{module-load} (@pxref{Dynamic Modules}), когда пакет загружается в Emacs.

@node Module Values
@subsection Преобразование Между Значениями Lisp и Модулем
@cindex module values, conversion

@cindex @code{emacs_value} data type
  With very few exceptions, most modules need to exchange data with
Lisp programs that call them: accept arguments to module functions and
return values from module functions.  For this purpose, the module
@acronym{API} provides the @code{emacs_value} type, which represents
Emacs Lisp objects communicated via the @acronym{API}; it is the
functional equivalent of the @code{Lisp_Object} type used in Emacs C
primitives (@pxref{Writing Emacs Primitives}).  This section describes
the parts of the module @acronym{API} that allow to create
@code{emacs_value} objects corresponding to basic Lisp data types, and
how to access from C data in @code{emacs_value} objects that
correspond to Lisp objects.

All of the functions described below are actually @emph{function
pointers} provided via the pointer to the environment which every
module function accepts.  Therefore, module code should call these
functions through the environment pointer, like this:

@example
emacs_env *env;  /* the environment pointer */
env->some_function (arguments@dots{});
@end example

@noindent
The @code{emacs_env} pointer will usually come from the first argument
to the module function, or from the call to @code{get_environment} if
you need the environment in the module initialization function.

Most of the functions described below became available in Emacs 25,
the first Emacs release that supported dynamic modules.  For the few
functions that became available in later Emacs releases, we mention
the first Emacs version that supported them.

The following @acronym{API} functions extract values of various C data
types from @code{emacs_value} objects.  They all raise the
@code{wrong-type-argument} error condition (@pxref{Type Predicates})
if the argument @code{emacs_value} object is not of the type expected
by the function.  @xref{Module Nonlocal}, for details of how signaling
errors works in Emacs modules, and how to catch error conditions
inside the module before they are reported to Emacs.  The
@acronym{API} function @code{type_of} (@pxref{Module Misc, type_of})
can be used to obtain the type of a @code{emacs_value} object.

@deftypefn Function intmax_t extract_integer (emacs_env *@var{env}, emacs_value @var{arg})
This function returns the value of a Lisp integer specified by
@var{arg}.  The C data type of the return value, @code{intmax_t}, is
the widest integral data type supported by the C compiler, typically
@w{@code{long long}}.
@end deftypefn

@deftypefn Function double extract_float (emacs_env *@var{env}, emacs_value @var{arg})
This function returns the value of a Lisp float specified by
@var{arg}, as a C @code{double} value.
@end deftypefn

@deftypefn Function bool copy_string_contents (emacs_env *@var{env}, emacs_value @var{arg}, char *@var{buf}, ptrdiff_t *@var{len})
This function stores the UTF-8 encoded text of a Lisp string specified
by @var{arg} in the array of @code{char} pointed by @var{buf}, which
should have enough space to hold at least @code{*@var{len}} bytes,
including the terminating null byte.  The argument @var{len} must not
be a @code{NULL} pointer, and, when the function is called, it should
point to a value that specifies the size of @var{buf} in bytes.

If the buffer size specified by @code{*@var{len}} is large enough to
hold the string's text, the function stores in @code{*@var{len}} the
actual number of bytes copied to @var{buf}, including the terminating
null byte, and returns @code{true}.  If the buffer is too small, the
function raises the @code{args-out-of-range} error condition, stores
the required number of bytes in @code{*@var{len}}, and returns
@code{false}.  @xref{Module Nonlocal}, for how to handle pending error
conditions.

The argument @var{buf} can be a @code{NULL} pointer, in which case the
function stores in @code{*@var{len}} the number of bytes required for
storing the contents of @var{arg}, and returns @code{true}.  This is
how you can determine the size of @var{buf} needed to store a
particular string: first call @code{copy_string_contents} with
@code{NULL} as @var{buf}, then allocate enough memory to hold the
number of bytes stored by the function in @code{*@var{len}}, and call
the function again with non-@code{NULL} @var{buf} to actually perform
the text copying.
@end deftypefn

@deftypefn Function emacs_value vec_get (emacs_env *@var{env}, emacs_value @var{vector}, ptrdiff_t @var{index})
This function returns the element of @var{vector} at @var{index}.  The
@var{index} of the first vector element is zero.  The function raises
the @code{args-out-of-range} error condition if the value of
@var{index} is invalid.  To extract C data from the value the function
returns, use the other extraction functions described here, as
appropriate for the Lisp data type stored in that element of the
vector.
@end deftypefn

@deftypefn Function ptrdiff_t vec_size (emacs_env *@var{env}, emacs_value @var{vector})
This function returns the number of elements in @var{vector}.
@end deftypefn

@deftypefn Function void vec_set (emacs_env *@var{env}, emacs_value @var{vector}, ptrdiff_t @var{index}, emacs_value @var{value})
This function stores @var{value} in the element of @var{vector} whose
index is @var{index}.  It raises the @code{args-out-of-range} error
condition if the value of @var{index} is invalid.
@end deftypefn

The following @acronym{API} functions create @code{emacs_value}
objects from basic C data types.  They all return the created
@code{emacs_value} object.

@deftypefn Function emacs_value make_integer (emacs_env *@var{env}, intmax_t @var{n})
This function takes an integer argument @var{n} and returns the
corresponding @code{emacs_value} object.  It raises the
@code{overflow-error} error condition if the value of @var{n} cannot
be represented as an Emacs integer, i.e.@: is not inside the limits
set by @code{most-negative-fixnum} and @code{most-positive-fixnum}
(@pxref{Integer Basics}).
@end deftypefn

@deftypefn Function emacs_value make_float (emacs_env *@var{env}, double @var{d})
This function takes a @code{double} argument @var{d} and returns the
corresponding Emacs floating-point value.
@end deftypefn

@deftypefn Function emacs_value make_string (emacs_env *@var{env}, const char *@var{str}, ptrdiff_t @var{strlen})
This function creates an Emacs string from C text string pointed by
@var{str} whose length in bytes, not including the terminating null
byte, is @var{strlen}.  The original string in @var{str} can be either
an @acronym{ASCII} string or a UTF-8 encoded non-@acronym{ASCII}
string; it can include embedded null bytes, and doesn't have to end in
a terminating null byte at @code{@var{str}[@var{strlen}]}.  The
function raises the @code{overflow-error} error condition if
@var{strlen} is negative or exceeds the maximum length of an Emacs
string.
@end deftypefn

The @acronym{API} does not provide functions to manipulate Lisp data
structures, for example, create lists with @code{cons} and @code{list}
(@pxref{Building Lists}), extract list members with @code{car} and
@code{cdr} (@pxref{List Elements}), create vectors with @code{vector}
(@pxref{Vector Functions}), etc.  For these, use @code{intern} and
@code{funcall}, described in the next subsection, to call the
corresponding Lisp functions.

Normally, @code{emacs_value} objects have a rather short lifetime: it
ends when the @code{emacs_env} pointer used for their creation goes
out of scope.  Occasionally, you may need to create @dfn{global
references}: @code{emacs_value} objects that live as long as you
wish.  Use the following two functions to manage such objects.

@deftypefn Function emacs_value make_global_ref (emacs_env *@var{env}, emacs_value @var{value})
This function returns a global reference for @var{value}.
@end deftypefn

@deftypefn Function void free_global_ref (emacs_env *@var{env}, emacs_value @var{global_value})
This function frees the @var{global_value} previously created by
@code{make_global_ref}.  The @var{global_value} is no longer valid
after the call.  Your module code should pair each call to
@code{make_global_ref} with the corresponding @code{free_global_ref}.
@end deftypefn

@cindex user pointer, using in module functions
An alternative to keeping around C data structures that need to be
passed to module functions later is to create @dfn{user pointer}
objects.  A user pointer, or @code{user-ptr}, object is a Lisp object
that encapsulates a C pointer and can have an associated finalizer
function, which is called when the object is garbage-collected
(@pxref{Garbage Collection}).  The module @acronym{API} provides
functions to create and access @code{user-ptr} objects.  These
functions raise the @code{wrong-type-argument} error condition if they
are called on @code{emacs_value} that doesn't represent a
@code{user-ptr} object.

@deftypefn Function emacs_value make_user_ptr (emacs_env *@var{env}, emacs_finalizer @var{fin}, void *@var{ptr})
This function creates and returns a @code{user-ptr} object which wraps
the C pointer @var{ptr}.  The finalizer function @var{fin} can be a
@code{NULL} pointer (meaning no finalizer), or it can be a function of
the following signature:

@example
typedef void (*emacs_finalizer) (void *@var{ptr});
@end example

@noindent
If @var{fin} is not a @code{NULL} pointer, it will be called with the
@var{ptr} as the argument when the @code{user-ptr} object is
garbage-collected.  Don't run any expensive code in a finalizer,
because GC must finish quickly to keep Emacs responsive.
@end deftypefn

@deftypefn Function void *get_user_ptr (emacs_env *@var{env}, emacs_value val)
This function extracts the C pointer from the Lisp object represented
by @var{val}.
@end deftypefn

@deftypefn Function void set_user_ptr (emacs_env *@var{env}, emacs_value @var{value}, void *@var{ptr})
This function sets the C pointer embedded in the @code{user-ptr}
object represented by @var{value} to @var{ptr}.
@end deftypefn

@deftypefn Function emacs_finalizer get_user_finalizer (emacs_env *@var{env}, emacs_value val)
This function returns the finalizer of the @code{user-ptr} object
represented by @var{val}, or @code{NULL} if it doesn't have a finalizer.
@end deftypefn

@deftypefn Function void set_user_finalizer (emacs_env *@var{env}, emacs_value @var{val}, emacs_finalizer @var{fin})
This function changes the finalizer of the @code{user-ptr} object
represented by @var{val} to be @var{fin}.  If @var{fin} is a
@code{NULL} pointer, the @code{user-ptr} object will have no finalizer.
@end deftypefn

@node Module Misc
@subsection Miscellaneous Convenience Functions for Modules

  This subsection describes a few convenience functions provided by
the module @acronym{API}.  Like the functions described in previous
subsections, all of them are actually function pointers, and need to
be called via the @code{emacs_env} pointer.  Description of functions
that were introduced after Emacs 25 calls out the first version where
they became available.

@deftypefn Function bool eq (emacs_env *@var{env}, emacs_value @var{val1}, emacs_value @var{val2})
This function returns @code{true} if the Lisp objects represented by
@var{val1} and @var{val2} are identical, @code{false} otherwise.  This
is the same as the Lisp function @code{eq} (@pxref{Equality
Predicates}), but avoids the need to intern the objects represented by
the arguments.

There are no @acronym{API} functions for other equality predicates, so
you will need to use @code{intern} and @code{funcall}, described
below, to perform more complex equality tests.
@end deftypefn

@deftypefn Function bool is_not_nil (emacs_env *@var{env}, emacs_value @var{val})
This function tests whether the Lisp object represented by @var{val}
is non-@code{nil}; it returns @code{true} or @code{false} accordingly.

Note that you could implement an equivalent test by using
@code{intern} to get an @code{emacs_value} representing @code{nil},
then use @code{eq}, described above, to test for equality.  But using
this function is more convenient.
@end deftypefn

@deftypefn Function emacs_value type_of (emacs_env *@var{env}, emacs_value @code{object})
This function returns the type of @var{object} as a value that
represents a symbol: @code{string} for a string, @code{integer} for an
integer, @code{process} for a process, etc.  @xref{Type Predicates}.
You can use @code{intern} and @code{eq} to compare against known type
symbols, if your code needs to depend on the object type.
@end deftypefn

@anchor{intern}
@deftypefn Function emacs_value intern (emacs_env *@var{env}, const char *name)
This function returns an interned Emacs symbol whose name is
@var{name}, which should be an @acronym{ASCII} null-terminated string.
It creates a new symbol if one does not already exist.

Together with @code{funcall}, described below, this function provides
a means for invoking any Lisp-callable Emacs function, provided that
its name is a pure @acronym{ASCII} string.  For example, here's how to
intern a symbol whose name @code{name_str} is non-@acronym{ASCII}, by
calling the more powerful Emacs @code{intern} function
(@pxref{Creating Symbols}):

@example
emacs_value fintern = env->intern (env, "intern");
emacs_value sym_name =
  env->make_string (env, name_str, strlen (name_str));
emacs_value intern_args[] = @{ sym_name, env->intern (env, "nil") @};
emacs_value symbol = env->funcall (env, fintern, 2, intern_args);
@end example

@end deftypefn

@deftypefn Function emacs_value funcall (emacs_env *@var{env}, emacs_value @var{func}, ptrdiff_t @var{nargs}, emacs_value *@var{args})
This function calls the specified @var{func} passing it @var{nargs}
arguments from the array pointed to by @var{args}.  The argument
@var{func} can be a function symbol (e.g., returned by @code{intern}
described above), a module function returned by @code{make_function}
(@pxref{Module Functions}), a subroutine written in C, etc.  If
@var{nargs} is zero, @var{args} can be a @code{NULL} pointer.

The function returns the value that @var{func} returned.
@end deftypefn

If your module includes potentially long-running code, it is a good
idea to check from time to time in that code whether the user wants to
quit, e.g., by typing @kbd{C-g} (@pxref{Quitting}).  The following
function, which is available since Emacs 26.1, is provided for that
purpose.

@anchor{should_quit}
@deftypefn Function bool should_quit (emacs_env *@var{env})
This function returns @code{true} if the user wants to quit.  In that
case, we recommend that your module function aborts any on-going
processing and returns as soon as possible.
@end deftypefn

@node Module Nonlocal
@subsection Nonlocal Exits in Modules
@cindex nonlocal exits, in modules

  Emacs Lisp supports nonlocal exits, whereby program control is
transfered from one point in a program to another remote point.
@xref{Nonlocal Exits}.  Thus, Lisp functions called by your module
might exit nonlocally by calling @code{signal} or @code{throw}, and
your module functions must handle such nonlocal exits properly.  Such
handling is needed because C programs will not automatically release
resources and perform other cleanups in these cases; your module code
must itself do it.  The module @acronym{API} provides facilities for
that, described in this subsection.  They are generally available
since Emacs 25; those of them that became available in later releases
explicitly call out the first Emacs version where they became part of
the @acronym{API}.

When some Lisp code called by a module function signals an error or
throws, the nonlocal exit is trapped, and the pending exit and its
associated data are stored in the environment.  Whenever a nonlocal
exit is pending in the environment, any module @acronym{API} function
called with a pointer to that environment will return immediately
without any processing (the functions @code{non_local_exit_check},
@code{non_local_exit_get}, and @code{non_local_exit_clear} are
exceptions from this rule).  If your module function then does nothing
and returns to Emacs, a pending nonlocal exit will cause Emacs to act
on it: signal an error or throw to the corresponding @code{catch}.

So the simplest ``handling'' of nonlocal exits in module functions is
to do nothing special and let the rest of your code to run as if
nothing happened.  However, this can cause two classes of problems:

@itemize @minus
@item
Your module function might use uninitialized or undefined values,
since @acronym{API} functions return immediately without producing the
expected results.

@item
Your module might leak resources, because it might not have the
opportunity to release them.
@end itemize

Therefore, we recommend that your module functions check for nonlocal
exit conditions and recover from them, using the functions described
below.

@deftypefn Function enum emacs_funcall_exit non_local_exit_check (emacs_env *@var{env})
This function returns the kind of nonlocal exit condition stored in
@var{env}.  The possible values are:

@vindex emacs_funcall_exit@r{, enumeration}
@vtable @code
@item emacs_funcall_exit_return
The last @acronym{API} function exited normally.
@item emacs_funcall_exit_signal
The last @acronym{API} function signaled an error.
@item emacs_funcall_exit_throw
The last @acronym{API} function exited via @code{throw}.
@end vtable
@end deftypefn

@deftypefn Function emacs_funcall_exit non_local_exit_get (emacs_env *@var{env}, emacs_value *@var{symbol}, emacs_value *@var{data})
This function returns the kind of nonlocal exit condition stored in
@var{env}, like @code{non_local_exit_check} does, but it also returns
the full information about the nonlocal exit, if any.  If the return
value is @code{emacs_funcall_exit_signal}, the function stores the
error symbol in @code{*@var{symbol}} and the error data in
@code{*@var{data}} (@pxref{Signaling Errors}).  If the return value is
@code{emacs_funcall_exit_throw}, the function stores the @code{catch}
tag symbol in @code{*@var{symbol}} and the @code{throw} value in
@code{*@var{data}}.  The function doesn't store anything in memory
pointed by these arguments when the return value is
@code{emacs_funcall_exit_return}.
@end deftypefn

You should check nonlocal exit conditions where it matters: before you
allocated some resource or after you allocated a resource that might
need freeing, or where a failure means further processing is
impossible or infeasible.

Once your module function detected that a nonlocal exit is pending, it
can either return to Emacs (after performing the necessary local
cleanup), or it can attempt to recover from the nonlocal exit.  The
following @acronym{API} functions will help with these tasks.

@deftypefn Function void non_local_exit_clear (emacs_env *@var{env})
This function clears the pending nonlocal exit conditions and data
from @var{env}.  After calling it, the module @acronym{API} functions
will work normally.  Use this function if your module function can
recover from nonlocal exits of the Lisp functions it calls and
continue, and also before calling any of the following two functions
(or any other @acronym{API} functions, if you want them to perform
their intended processing when a nonlocal exit is pending).
@end deftypefn

@deftypefn Function void non_local_exit_throw (emacs_env *@var{env}, emacs_value @var{tag}, emacs_value @var{value})
This function throws to the Lisp @code{catch} symbol represented by
@var{tag}, passing it @var{value} as the value to return.  Your module
function should in general return soon after calling this function.
One use of this function is when you want to re-throw a non-local exit
from one of the called @acronym{API} or Lisp functions.
@end deftypefn

@deftypefn Function void non_local_exit_signal (emacs_env *@var{env}, emacs_value @var{error}, emacs_value @var{data})
This function signals the error represented by @var{error} with the
specified error data @var{data}.  The module function should return
soon after calling this function.  This function could be useful,
e.g., for signaling errors from module functions to Emacs.
@end deftypefn


@node Object Internals
@section Object Internals
@cindex object internals

  Emacs Lisp provides a rich set of the data types.  Some of them, like cons
cells, integers and strings, are common to nearly all Lisp dialects.  Some
others, like markers and buffers, are quite special and needed to provide
the basic support to write editor commands in Lisp.  To implement such
a variety of object types and provide an efficient way to pass objects between
the subsystems of an interpreter, there is a set of C data structures and
a special type to represent the pointers to all of them, which is known as
@dfn{tagged pointer}.

  In C, the tagged pointer is an object of type @code{Lisp_Object}.  Any
initialized variable of such a type always holds the value of one of the
following basic data types: integer, symbol, string, cons cell, float,
vectorlike or miscellaneous object.  Each of these data types has the
corresponding tag value.  All tags are enumerated by @code{enum Lisp_Type}
and placed into a 3-bit bitfield of the @code{Lisp_Object}.  The rest of the
bits is the value itself.  Integers are immediate, i.e., directly
represented by those @dfn{value bits}, and all other objects are represented
by the C pointers to a corresponding object allocated from the heap.  Width
of the @code{Lisp_Object} is platform- and configuration-dependent: usually
it's equal to the width of an underlying platform pointer (i.e., 32-bit on
a 32-bit machine and 64-bit on a 64-bit one), but also there is a special
configuration where @code{Lisp_Object} is 64-bit but all pointers are 32-bit.
The latter trick was designed to overcome the limited range of values for
Lisp integers on a 32-bit system by using 64-bit @code{long long} type for
@code{Lisp_Object}.

  The following C data structures are defined in @file{lisp.h} to represent
the basic data types beyond integers:

@table @code
@item struct Lisp_Cons
Cons cell, an object used to construct lists.

@item struct Lisp_String
String, the basic object to represent a sequence of characters.

@item struct Lisp_Vector
Array, a fixed-size set of Lisp objects which may be accessed by an index.

@item struct Lisp_Symbol
Symbol, the unique-named entity commonly used as an identifier.

@item struct Lisp_Float
Floating-point value.

@item union Lisp_Misc
Miscellaneous kinds of objects which don't fit into any of the above.
@end table

  These types are the first-class citizens of an internal type system.
Since the tag space is limited, all other types are the subtypes of either
@code{Lisp_Vectorlike} or @code{Lisp_Misc}.  Vector subtypes are enumerated
by @code{enum pvec_type}, and nearly all complex objects like windows, buffers,
frames, and processes fall into this category.  The rest of special types,
including markers and overlays, are enumerated by @code{enum Lisp_Misc_Type}
and form the set of subtypes of @code{Lisp_Misc}.

  Below there is a description of a few subtypes of @code{Lisp_Vectorlike}.
Buffer object represents the text to display and edit.  Window is the part
of display structure which shows the buffer or is used as a container to
recursively place other windows on the same frame.  (Do not confuse Emacs Lisp
window object with the window as an entity managed by the user interface
system like X; in Emacs terminology, the latter is called frame.)  Finally,
process object is used to manage the subprocesses.

@menu
* Buffer Internals::    Components of a buffer structure.
* Window Internals::    Components of a window structure.
* Process Internals::   Components of a process structure.
@end menu

@node Buffer Internals
@subsection Buffer Internals
@cindex internals, of buffer
@cindex buffer internals

  Two structures (see @file{buffer.h}) are used to represent buffers
in C@.  The @code{buffer_text} structure contains fields describing the
text of a buffer; the @code{buffer} structure holds other fields.  In
the case of indirect buffers, two or more @code{buffer} structures
reference the same @code{buffer_text} structure.

Here are some of the fields in @code{struct buffer_text}:

@table @code
@item beg
The address of the buffer contents.  The buffer contents is a linear C
array of @code{char}, with the gap somewhere in its midst.

@item gpt
@itemx gpt_byte
The character and byte positions of the buffer gap.  @xref{Buffer
Gap}.

@item z
@itemx z_byte
The character and byte positions of the end of the buffer text.

@item gap_size
The size of buffer's gap.  @xref{Buffer Gap}.

@item modiff
@itemx save_modiff
@itemx chars_modiff
@itemx overlay_modiff
These fields count the number of buffer-modification events performed
in this buffer.  @code{modiff} is incremented after each
buffer-modification event, and is never otherwise changed;
@code{save_modiff} contains the value of @code{modiff} the last time
the buffer was visited or saved; @code{chars_modiff} counts only
modifications to the characters in the buffer, ignoring all other
kinds of changes (such as text properties); and @code{overlay_modiff}
counts only modifications to the buffer's overlays.

@item beg_unchanged
@itemx end_unchanged
The number of characters at the start and end of the text that are
known to be unchanged since the last complete redisplay.

@item unchanged_modified
@itemx overlay_unchanged_modified
The values of @code{modiff} and @code{overlay_modiff}, respectively,
after the last complete redisplay.  If their current values match
@code{modiff} or @code{overlay_modiff}, that means
@code{beg_unchanged} and @code{end_unchanged} contain no useful
information.

@item markers
The markers that refer to this buffer.  This is actually a single
marker, and successive elements in its marker @code{chain} are the other
markers referring to this buffer text.

@item intervals
The interval tree which records the text properties of this buffer.
@end table

Some of the fields of @code{struct buffer} are:

@table @code
@item header
A header of type @code{union vectorlike_header} is common to all
vectorlike objects.

@item own_text
A @code{struct buffer_text} structure that ordinarily holds the buffer
contents.  In indirect buffers, this field is not used.

@item text
A pointer to the @code{buffer_text} structure for this buffer.  In an
ordinary buffer, this is the @code{own_text} field above.  In an
indirect buffer, this is the @code{own_text} field of the base buffer.

@item next
A pointer to the next buffer, in the chain of all buffers, including
killed buffers.  This chain is used only for allocation and garbage
collection, in order to collect killed buffers properly.

@item pt
@itemx pt_byte
The character and byte positions of point in a buffer.

@item begv
@itemx begv_byte
The character and byte positions of the beginning of the accessible
range of text in the buffer.

@item zv
@itemx zv_byte
The character and byte positions of the end of the accessible range of
text in the buffer.

@item base_buffer
In an indirect buffer, this points to the base buffer.  In an ordinary
buffer, it is null.

@item local_flags
This field contains flags indicating that certain variables are local
in this buffer.  Such variables are declared in the C code using
@code{DEFVAR_PER_BUFFER}, and their buffer-local bindings are stored
in fields in the buffer structure itself.  (Some of these fields are
described in this table.)

@item modtime
The modification time of the visited file.  It is set when the file is
written or read.  Before writing the buffer into a file, this field is
compared to the modification time of the file to see if the file has
changed on disk.  @xref{Buffer Modification}.

@item auto_save_modified
The time when the buffer was last auto-saved.

@item last_window_start
The @code{window-start} position in the buffer as of the last time the
buffer was displayed in a window.

@item clip_changed
This flag indicates that narrowing has changed in the buffer.
@xref{Narrowing}.

@item prevent_redisplay_optimizations_p
This flag indicates that redisplay optimizations should not be used to
display this buffer.

@item overlay_center
This field holds the current overlay center position.  @xref{Managing
Overlays}.

@item overlays_before
@itemx overlays_after
These fields hold, respectively, a list of overlays that end at or
before the current overlay center, and a list of overlays that end
after the current overlay center.  @xref{Managing Overlays}.
@code{overlays_before} is sorted in order of decreasing end position,
and @code{overlays_after} is sorted in order of increasing beginning
position.

@c FIXME? the following are now all Lisp_Object BUFFER_INTERNAL_FIELD (foo).

@item name
A Lisp string that names the buffer.  It is guaranteed to be unique.
@xref{Buffer Names}.  This and the following fields have their names
in the C struct definition end in a @code{_} to indicate that they
should not be accessed directly, but via the @code{BVAR} macro, like
this:

@example
  Lisp_Object buf_name = BVAR (buffer, name);
@end example

@item save_length
The length of the file this buffer is visiting, when last read or
saved.  It can have 2 special values: @minus{}1 means auto-saving was
turned off in this buffer, and @minus{}2 means don't turn off
auto-saving if buffer text shrinks a lot.  This and other fields
concerned with saving are not kept in the @code{buffer_text} structure
because indirect buffers are never saved.

@item directory
The directory for expanding relative file names.  This is the value of
the buffer-local variable @code{default-directory} (@pxref{File Name Expansion}).

@item filename
The name of the file visited in this buffer, or @code{nil}.  This is
the value of the buffer-local variable @code{buffer-file-name}
(@pxref{Buffer File Name}).

@item undo_list
@itemx backed_up
@itemx auto_save_file_name
@itemx auto_save_file_format
@itemx read_only
@itemx file_format
@itemx file_truename
@itemx invisibility_spec
@itemx display_count
@itemx display_time
These fields store the values of Lisp variables that are automatically
buffer-local (@pxref{Buffer-Local Variables}), whose corresponding
variable names have the additional prefix @code{buffer-} and have
underscores replaced with dashes.  For instance, @code{undo_list}
stores the value of @code{buffer-undo-list}.

@item mark
The mark for the buffer.  The mark is a marker, hence it is also
included on the list @code{markers}.  @xref{The Mark}.

@item local_var_alist
The association list describing the buffer-local variable bindings of
this buffer, not including the built-in buffer-local bindings that
have special slots in the buffer object.  (Those slots are omitted
from this table.)  @xref{Buffer-Local Variables}.

@item major_mode
Symbol naming the major mode of this buffer, e.g., @code{lisp-mode}.

@item mode_name
Pretty name of the major mode, e.g., @code{"Lisp"}.

@item keymap
@itemx abbrev_table
@itemx syntax_table
@itemx category_table
@itemx display_table
These fields store the buffer's local keymap (@pxref{Keymaps}), abbrev
table (@pxref{Abbrev Tables}), syntax table (@pxref{Syntax Tables}),
category table (@pxref{Categories}), and display table (@pxref{Display
Tables}).

@item downcase_table
@itemx upcase_table
@itemx case_canon_table
These fields store the conversion tables for converting text to lower
case, upper case, and for canonicalizing text for case-fold search.
@xref{Case Tables}.

@item minor_modes
An alist of the minor modes of this buffer.

@item pt_marker
@itemx begv_marker
@itemx zv_marker
These fields are only used in an indirect buffer, or in a buffer that
is the base of an indirect buffer.  Each holds a marker that records
@code{pt}, @code{begv}, and @code{zv} respectively, for this buffer
when the buffer is not current.

@item mode_line_format
@itemx header_line_format
@itemx case_fold_search
@itemx tab_width
@itemx fill_column
@itemx left_margin
@itemx auto_fill_function
@itemx truncate_lines
@itemx word_wrap
@itemx ctl_arrow
@itemx bidi_display_reordering
@itemx bidi_paragraph_direction
@itemx selective_display
@itemx selective_display_ellipses
@itemx overwrite_mode
@itemx abbrev_mode
@itemx mark_active
@itemx enable_multibyte_characters
@itemx buffer_file_coding_system
@itemx cache_long_line_scans
@itemx point_before_scroll
@itemx left_fringe_width
@itemx right_fringe_width
@itemx fringes_outside_margins
@itemx scroll_bar_width
@itemx indicate_empty_lines
@itemx indicate_buffer_boundaries
@itemx fringe_indicator_alist
@itemx fringe_cursor_alist
@itemx scroll_up_aggressively
@itemx scroll_down_aggressively
@itemx cursor_type
@itemx cursor_in_non_selected_windows
These fields store the values of Lisp variables that are automatically
buffer-local (@pxref{Buffer-Local Variables}), whose corresponding
variable names have underscores replaced with dashes.  For instance,
@code{mode_line_format} stores the value of @code{mode-line-format}.

@item last_selected_window
This is the last window that was selected with this buffer in it, or @code{nil}
if that window no longer displays this buffer.
@end table

@node Window Internals
@subsection Window Internals
@cindex internals, of window
@cindex window internals

  The fields of a window (for a complete list, see the definition of
@code{struct window} in @file{window.h}) include:

@table @code
@item frame
The frame that this window is on, as a Lisp object.

@item mini
Non-zero if this window is a minibuffer window, a window showing the
minibuffer or the echo area.

@item pseudo_window_p
@cindex pseudo window
Non-zero if this window is a @dfn{pseudo window}.  A pseudo window is
either a window used to display the menu bar or the tool bar (when
Emacs uses toolkits that don't display their own menu bar and tool
bar) or a window showing a tooltip on a tooltip frame.  Pseudo windows
are in general not accessible from Lisp code.

@item parent
Internally, Emacs arranges windows in a tree; each group of siblings
has a parent window whose area includes all the siblings.  This field
points to the window's parent in that tree, as a Lisp object.  For the
root window of the tree and a minibuffer window this is always
@code{nil}.

Parent windows do not display buffers, and play little role in display
except to shape their child windows.  Emacs Lisp programs cannot
directly manipulate parent windows; they operate on the windows at the
leaves of the tree, which actually display buffers.

@item contents
For a leaf window and windows showing a tooltip, this is the buffer,
as a Lisp object, that the window is displaying.  For an internal
(``parent'') window, this is its first child window.  For a pseudo
window showing a menu or tool bar this is @code{nil}.  It is also
@code{nil} for a window that has been deleted.

@item next
@itemx prev
The next and previous sibling of this window as Lisp objects.
@code{next} is @code{nil} if the window is the right-most or
bottom-most in its group; @code{prev} is @code{nil} if it is the
left-most or top-most in its group.  Whether the sibling is left/right
or up/down is determined by the @code{horizontal} field of the
sibling's parent: if it's non-zero, the siblings are arranged
horizontally.

As a special case, @code{next} of a frame's root window points to the
frame's minibuffer window, provided this is not a minibuffer-only or
minibuffer-less frame.  On such frames @code{prev} of the minibuffer
window points to that frame's root window.  In any other case, the
root window's @code{next} and the minibuffer window's (if present)
@code{prev} fields are @code{nil}.

@item left_col
The left-hand edge of the window, measured in columns, relative to the
leftmost column (column 0) of the window's native frame.

@item top_line
The top edge of the window, measured in lines, relative to the topmost
line (line 0) of the window's native frame.

@item pixel_left
@itemx pixel_top
The left-hand and top edges of this window, measured in pixels,
relative to the top-left corner (0, 0) of the window's native frame.

@item total_cols
@itemx total_lines
The total width and height of the window, measured in columns and
lines respectively.  The values include scroll bars and fringes,
dividers and/or the separator line on the right of the window (if
any).

@item pixel_width;
@itemx pixel_height;
The total width and height of the window measured in pixels.

@item start
A marker pointing to the position in the buffer that is the first
character (in the logical order, @pxref{Bidirectional Display})
displayed in the window.

@item pointm
@cindex window point internals
This is the value of point in the current buffer when this window is
selected; when it is not selected, it retains its previous value.

@item old_pointm
The value of @code{pointm} at the last redisplay time.

@item force_start
If this flag is non-@code{nil}, it says that the window has been
scrolled explicitly by the Lisp program, and the value of the the
window's @code{start} was set for redisplay to honor.  This affects
what the next redisplay does if point is off the screen: instead of
scrolling the window to show the text around point, it moves point to
a location that is on the screen.

@item optional_new_start
This is similar to @code{force_start}, but the next redisplay will
only obey it if point stays visible.

@item start_at_line_beg
Non-@code{nil} means current value of @code{start} was the beginning of a line
when it was chosen.

@item use_time
This is the last time that the window was selected.  The function
@code{get-lru-window} uses this field.

@item sequence_number
A unique number assigned to this window when it was created.

@item last_modified
The @code{modiff} field of the window's buffer, as of the last time
a redisplay completed in this window.

@item last_overlay_modified
The @code{overlay_modiff} field of the window's buffer, as of the last
time a redisplay completed in this window.

@item last_point
The buffer's value of point, as of the last time a redisplay completed
in this window.

@item last_had_star
A non-zero value means the window's buffer was modified when the
window was last updated.

@item vertical_scroll_bar_type
@itemx horizontal_scroll_bar_type
The types of this window's vertical and horizontal scroll bars.

@item scroll_bar_width
@itemx scroll_bar_height
The width of this window's vertical scroll bar and the height of this
window's horizontal scroll bar, in pixels.

@item left_margin_cols
@itemx right_margin_cols
The widths of the left and right margins in this window.  A value of
zero means no margin.

@item left_fringe_width
@itemx right_fringe_width
The pixel widths of the left and right fringes in this window.  A
value of @minus{}1 means use the values of the frame.

@item fringes_outside_margins
A non-zero value means the fringes outside the display margins;
othersize they are between the margin and the text.

@item window_end_pos
This is computed as @code{z} minus the buffer position of the last glyph
in the current matrix of the window.  The value is only valid if
@code{window_end_valid} is non-zero.

@item window_end_bytepos
The byte position corresponding to @code{window_end_pos}.

@item window_end_vpos
The window-relative vertical position of the line containing
@code{window_end_pos}.

@item window_end_valid
This field is set to a non-zero value if @code{window_end_pos} and
@code{window_end_vpos} are truly valid.  This is zero if nontrivial
redisplay is pre-empted, since in that case the display that
@code{window_end_pos} was computed for did not get onto the screen.

@item cursor
A structure describing where the cursor is in this window.

@item last_cursor_vpos
The window-relative vertical position of the line showing the cursor
as of the last redisplay that finished.

@item phys_cursor
A structure describing where the cursor of this window physically is.

@item phys_cursor_type
@c FIXME What is this?
@c itemx phys_cursor_ascent
@itemx phys_cursor_height
@itemx phys_cursor_width
The type, height, and width of the cursor that was last displayed on
this window.

@item phys_cursor_on_p
This field is non-zero if the cursor is physically on.

@item cursor_off_p
Non-zero means the cursor in this window is logically off.  This is
used for blinking the cursor.

@item last_cursor_off_p
This field contains the value of @code{cursor_off_p} as of the time of
the last redisplay.

@item must_be_updated_p
This is set to 1 during redisplay when this window must be updated.

@item hscroll
This is the number of columns that the display in the window is
scrolled horizontally to the left.  Normally, this is 0.  When only
the current line is hscrolled, this describes how much the current
line is scrolled.

@item min_hscroll
Minimum value of @code{hscroll}, set by the user via
@code{set-window-hscroll} (@pxref{Horizontal Scrolling}).  When only
the current line is hscrolled, this describes the horizontal scrolling
of lines other than the current one.

@item vscroll
Vertical scroll amount, in pixels.  Normally, this is 0.

@item dedicated
Non-@code{nil} if this window is dedicated to its buffer.

@item combination_limit
This window's combination limit, meaningful only for a parent window.
If this is @code{t}, then it is not allowed to delete this window and
recombine its child windows with other siblings of this window.

@item window_parameters
The alist of this window's parameters.

@item display_table
The window's display table, or @code{nil} if none is specified for it.

@item update_mode_line
Non-zero means this window's mode line needs to be updated.

@item mode_line_height
@itemx header_line_height
The height in pixels of the mode line and the header line, or
@minus{}1 if not known.

@item base_line_number
The line number of a certain position in the buffer, or zero.
This is used for displaying the line number of point in the mode line.

@item base_line_pos
The position in the buffer for which the line number is known, or
zero meaning none is known.  If it is @minus{}1, don't display
the line number as long as the window shows that buffer.

@item column_number_displayed
The column number currently displayed in this window's mode line, or
@minus{}1 if column numbers are not being displayed.

@item current_matrix
@itemx desired_matrix
Glyph matrices describing the current and desired display of this window.
@end table

@node Process Internals
@subsection Process Internals
@cindex internals, of process
@cindex process internals

  The fields of a process (for a complete list, see the definition of
@code{struct Lisp_Process} in @file{process.h}) include:

@table @code
@item name
A Lisp string, the name of the process.

@item command
A list containing the command arguments that were used to start this
process.  For a network or serial process, it is @code{nil} if the
process is running or @code{t} if the process is stopped.

@item filter
A Lisp function used to accept output from the process.

@item sentinel
A Lisp function called whenever the state of the process changes.

@item buffer
The associated buffer of the process.

@item pid
An integer, the operating system's process @acronym{ID}.
Pseudo-processes such as network or serial connections use a value of 0.

@item childp
A flag, @code{t} if this is really a child process.  For a network or
serial connection, it is a plist based on the arguments to
@code{make-network-process} or @code{make-serial-process}.

@item mark
A marker indicating the position of the end of the last output from this
process inserted into the buffer.  This is often but not always the end
of the buffer.

@item kill_without_query
If this is non-zero, killing Emacs while this process is still running
does not ask for confirmation about killing the process.

@item raw_status
The raw process status, as returned by the @code{wait} system call.

@item status
The process status, as @code{process-status} should return it.  This
is a Lisp symbol, a cons cell, or a list.

@item tick
@itemx update_tick
If these two fields are not equal, a change in the status of the process
needs to be reported, either by running the sentinel or by inserting a
message in the process buffer.

@item pty_flag
Non-zero if communication with the subprocess uses a pty; zero if it
uses a pipe.

@item infd
The file descriptor for input from the process.

@item outfd
The file descriptor for output to the process.

@item tty_name
The name of the terminal that the subprocess is using,
or @code{nil} if it is using pipes.

@item decode_coding_system
Coding-system for decoding the input from this process.

@item decoding_buf
A working buffer for decoding.

@item decoding_carryover
Size of carryover in decoding.

@item encode_coding_system
Coding-system for encoding the output to this process.

@item encoding_buf
A working buffer for encoding.

@item inherit_coding_system_flag
Flag to set @code{coding-system} of the process buffer from the
coding system used to decode process output.

@item type
Symbol indicating the type of process: @code{real}, @code{network},
@code{serial}.

@end table

@node C Integer Types
@section C Integer Types
@cindex integer types (C programming language)

Here are some guidelines for use of integer types in the Emacs C
source code.  These guidelines sometimes give competing advice; common
sense is advised.

@itemize @bullet
@item
Avoid arbitrary limits.  For example, avoid @code{int len = strlen
(s);} unless the length of @code{s} is required for other reasons to
fit in @code{int} range.

@item
Do not assume that signed integer arithmetic wraps around on overflow.
This is no longer true of Emacs porting targets: signed integer
overflow has undefined behavior in practice, and can dump core or
even cause earlier or later code to behave illogically.  Unsigned
overflow does wrap around reliably, modulo a power of two.

@item
Prefer signed types to unsigned, as code gets confusing when signed
and unsigned types are combined.  Many other guidelines assume that
types are signed; in the rarer cases where unsigned types are needed,
similar advice may apply to the unsigned counterparts (e.g.,
@code{size_t} instead of @code{ptrdiff_t}, or @code{uintptr_t} instead
of @code{intptr_t}).

@item
Prefer @code{int} for Emacs character codes, in the range 0 ..@: 0x3FFFFF@.
More generally, prefer @code{int} for integers known to be in
@code{int} range, e.g., screen column counts.

@item
Prefer @code{ptrdiff_t} for sizes, i.e., for integers bounded by the
maximum size of any individual C object or by the maximum number of
elements in any C array.  This is part of Emacs's general preference
for signed types.  Using @code{ptrdiff_t} limits objects to
@code{PTRDIFF_MAX} bytes, but larger objects would cause trouble
anyway since they would break pointer subtraction, so this does not
impose an arbitrary limit.

@item
Avoid @code{ssize_t} except when communicating to low-level APIs that
have @code{ssize_t}-related limitations.  Although it's equivalent to
@code{ptrdiff_t} on typical platforms, @code{ssize_t} is occasionally
narrower, so using it for size-related calculations could overflow.
Also, @code{ptrdiff_t} is more ubiquitous and better-standardized, has
standard @code{printf} formats, and is the basis for Emacs's internal
size-overflow checking.  When using @code{ssize_t}, please note that
POSIX requires support only for values in the range @minus{}1 ..@:
@code{SSIZE_MAX}.

@item
Prefer @code{intptr_t} for internal representations of pointers, or
for integers bounded only by the number of objects that can exist at
any given time or by the total number of bytes that can be allocated.
Currently Emacs sometimes uses other types when @code{intptr_t} would
be better; fixing this is lower priority, as the code works as-is on
Emacs's current porting targets.

@item
Prefer the Emacs-defined type @code{EMACS_INT} for representing values
converted to or from Emacs Lisp fixnums, as fixnum arithmetic is based
on @code{EMACS_INT}.

@item
When representing a system value (such as a file size or a count of
seconds since the Epoch), prefer the corresponding system type (e.g.,
@code{off_t}, @code{time_t}).  Do not assume that a system type is
signed, unless this assumption is known to be safe.  For example,
although @code{off_t} is always signed, @code{time_t} need not be.

@item
Prefer the Emacs-defined type @code{printmax_t} for representing
values that might be any signed integer that can be printed,
using a @code{printf}-family function.

@item
Prefer @code{intmax_t} for representing values that might be any
signed integer value.

@item
Prefer @code{bool}, @code{false} and @code{true} for booleans.
Using @code{bool} can make programs easier to read and a bit faster than
using @code{int}.  Although it is also OK to use @code{int}, @code{0}
and @code{1}, this older style is gradually being phased out.  When
using @code{bool}, respect the limitations of the replacement
implementation of @code{bool}, as documented in the source file
@file{lib/stdbool.in.h}.  In particular, boolean bitfields should be of type
@code{bool_bf}, not @code{bool}, so that they work correctly even when
compiling Objective C with standard GCC.

@item
In bitfields, prefer @code{unsigned int} or @code{signed int} to
@code{int}, as @code{int} is less portable: it might be signed, and
might not be.  Single-bit bit fields should be @code{unsigned int} or
@code{bool_bf} so that their values are 0 or 1.
@end itemize

@c FIXME Mention src/globals.h somewhere in this file?
